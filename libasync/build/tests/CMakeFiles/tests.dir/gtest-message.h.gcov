        -:    0:Source:/Users/wjp/Desktop/workspace/libasync/libasync/googletest/include/gtest/gtest-message.h
        -:    0:Graph:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/SystemIntegrationTOT.cc.gcno
        -:    0:Data:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/SystemIntegrationTOT.cc.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32://
        -:   33:// This header file defines the Message class.
        -:   34://
        -:   35:// IMPORTANT NOTE: Due to limitation of the C++ language, we have to
        -:   36:// leave some internal implementation details in this header file.
        -:   37:// They are clearly marked by comments like this:
        -:   38://
        -:   39://   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
        -:   40://
        -:   41:// Such code is NOT meant to be used by a user directly, and is subject
        -:   42:// to CHANGE WITHOUT NOTICE.  Therefore DO NOT DEPEND ON IT in a user
        -:   43:// program!
        -:   44:
        -:   45:// GOOGLETEST_CM0001 DO NOT DELETE
        -:   46:
        -:   47:#ifndef GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_
        -:   48:#define GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_
        -:   49:
        -:   50:#include <limits>
        -:   51:#include <memory>
        -:   52:
        -:   53:#include "gtest/internal/gtest-port.h"
        -:   54:
        -:   55:GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \
        -:   56:/* class A needs to have dll-interface to be used by clients of class B */)
        -:   57:
        -:   58:// Ensures that there is at least one operator<< in the global namespace.
        -:   59:// See Message& operator<<(...) below for why.
        -:   60:void operator<<(const testing::internal::Secret&, int);
        -:   61:
        -:   62:namespace testing {
        -:   63:
        -:   64:// The Message class works like an ostream repeater.
        -:   65://
        -:   66:// Typical usage:
        -:   67://
        -:   68://   1. You stream a bunch of values to a Message object.
        -:   69://      It will remember the text in a stringstream.
        -:   70://   2. Then you stream the Message object to an ostream.
        -:   71://      This causes the text in the Message to be streamed
        -:   72://      to the ostream.
        -:   73://
        -:   74:// For example;
        -:   75://
        -:   76://   testing::Message foo;
        -:   77://   foo << 1 << " != " << 2;
        -:   78://   std::cout << foo;
        -:   79://
        -:   80:// will print "1 != 2".
        -:   81://
        -:   82:// Message is not intended to be inherited from.  In particular, its
        -:   83:// destructor is not virtual.
        -:   84://
        -:   85:// Note that stringstream behaves differently in gcc and in MSVC.  You
        -:   86:// can stream a NULL char pointer to it in the former, but not in the
        -:   87:// latter (it causes an access violation if you do).  The Message
        -:   88:// class hides this difference by treating a NULL char pointer as
        -:   89:// "(null)".
    #####:   90:class GTEST_API_ Message {
        -:   91: private:
        -:   92:  // The type of basic IO manipulators (endl, ends, and flush) for
        -:   93:  // narrow streams.
        -:   94:  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);
        -:   95:
        -:   96: public:
        -:   97:  // Constructs an empty Message.
        -:   98:  Message();
        -:   99:
        -:  100:  // Copy constructor.
        -:  101:  Message(const Message& msg) : ss_(new ::std::stringstream) {  // NOLINT
        -:  102:    *ss_ << msg.GetString();
        -:  103:  }
        -:  104:
        -:  105:  // Constructs a Message from a C-string.
        -:  106:  explicit Message(const char* str) : ss_(new ::std::stringstream) {
        -:  107:    *ss_ << str;
        -:  108:  }
        -:  109:
        -:  110:#if GTEST_OS_SYMBIAN
        -:  111:  // Streams a value (either a pointer or not) to this object.
        -:  112:  template <typename T>
        -:  113:  inline Message& operator <<(const T& value) {
        -:  114:    StreamHelper(typename internal::is_pointer<T>::type(), value);
        -:  115:    return *this;
        -:  116:  }
        -:  117:#else
        -:  118:  // Streams a non-pointer value to this object.
        -:  119:  template <typename T>
        -:  120:  inline Message& operator <<(const T& val) {
        -:  121:    // Some libraries overload << for STL containers.  These
        -:  122:    // overloads are defined in the global namespace instead of ::std.
        -:  123:    //
        -:  124:    // C++'s symbol lookup rule (i.e. Koenig lookup) says that these
        -:  125:    // overloads are visible in either the std namespace or the global
        -:  126:    // namespace, but not other namespaces, including the testing
        -:  127:    // namespace which Google Test's Message class is in.
        -:  128:    //
        -:  129:    // To allow STL containers (and other types that has a << operator
        -:  130:    // defined in the global namespace) to be used in Google Test
        -:  131:    // assertions, testing::Message must access the custom << operator
        -:  132:    // from the global namespace.  With this using declaration,
        -:  133:    // overloads of << defined in the global namespace and those
        -:  134:    // visible via Koenig lookup are both exposed in this function.
        -:  135:    using ::operator <<;
        -:  136:    *ss_ << val;
        -:  137:    return *this;
        -:  138:  }
        -:  139:
        -:  140:  // Streams a pointer value to this object.
        -:  141:  //
        -:  142:  // This function is an overload of the previous one.  When you
        -:  143:  // stream a pointer to a Message, this definition will be used as it
        -:  144:  // is more specialized.  (The C++ Standard, section
        -:  145:  // [temp.func.order].)  If you stream a non-pointer, then the
        -:  146:  // previous definition will be used.
        -:  147:  //
        -:  148:  // The reason for this overload is that streaming a NULL pointer to
        -:  149:  // ostream is undefined behavior.  Depending on the compiler, you
        -:  150:  // may get "0", "(nil)", "(null)", or an access violation.  To
        -:  151:  // ensure consistent result across compilers, we always treat NULL
        -:  152:  // as "(null)".
        -:  153:  template <typename T>
        -:  154:  inline Message& operator <<(T* const& pointer) {  // NOLINT
        -:  155:    if (pointer == nullptr) {
        -:  156:      *ss_ << "(null)";
        -:  157:    } else {
        -:  158:      *ss_ << pointer;
        -:  159:    }
        -:  160:    return *this;
        -:  161:  }
        -:  162:#endif  // GTEST_OS_SYMBIAN
        -:  163:
        -:  164:  // Since the basic IO manipulators are overloaded for both narrow
        -:  165:  // and wide streams, we have to provide this specialized definition
        -:  166:  // of operator <<, even though its body is the same as the
        -:  167:  // templatized version above.  Without this definition, streaming
        -:  168:  // endl or other basic IO manipulators to Message will confuse the
        -:  169:  // compiler.
        -:  170:  Message& operator <<(BasicNarrowIoManip val) {
        -:  171:    *ss_ << val;
        -:  172:    return *this;
        -:  173:  }
        -:  174:
        -:  175:  // Instead of 1/0, we want to see true/false for bool values.
        -:  176:  Message& operator <<(bool b) {
        -:  177:    return *this << (b ? "true" : "false");
        -:  178:  }
        -:  179:
        -:  180:  // These two overloads allow streaming a wide C string to a Message
        -:  181:  // using the UTF-8 encoding.
        -:  182:  Message& operator <<(const wchar_t* wide_c_str);
        -:  183:  Message& operator <<(wchar_t* wide_c_str);
        -:  184:
        -:  185:#if GTEST_HAS_STD_WSTRING
        -:  186:  // Converts the given wide string to a narrow string using the UTF-8
        -:  187:  // encoding, and streams the result to this Message object.
        -:  188:  Message& operator <<(const ::std::wstring& wstr);
        -:  189:#endif  // GTEST_HAS_STD_WSTRING
        -:  190:
        -:  191:#if GTEST_HAS_GLOBAL_WSTRING
        -:  192:  // Converts the given wide string to a narrow string using the UTF-8
        -:  193:  // encoding, and streams the result to this Message object.
        -:  194:  Message& operator <<(const ::wstring& wstr);
        -:  195:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:  196:
        -:  197:  // Gets the text streamed to this object so far as an std::string.
        -:  198:  // Each '\0' character in the buffer is replaced with "\\0".
        -:  199:  //
        -:  200:  // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
        -:  201:  std::string GetString() const;
        -:  202:
        -:  203: private:
        -:  204:#if GTEST_OS_SYMBIAN
        -:  205:  // These are needed as the Nokia Symbian Compiler cannot decide between
        -:  206:  // const T& and const T* in a function template. The Nokia compiler _can_
        -:  207:  // decide between class template specializations for T and T*, so a
        -:  208:  // tr1::type_traits-like is_pointer works, and we can overload on that.
        -:  209:  template <typename T>
        -:  210:  inline void StreamHelper(internal::true_type /*is_pointer*/, T* pointer) {
        -:  211:    if (pointer == nullptr) {
        -:  212:      *ss_ << "(null)";
        -:  213:    } else {
        -:  214:      *ss_ << pointer;
        -:  215:    }
        -:  216:  }
        -:  217:  template <typename T>
        -:  218:  inline void StreamHelper(internal::false_type /*is_pointer*/,
        -:  219:                           const T& value) {
        -:  220:    // See the comments in Message& operator <<(const T&) above for why
        -:  221:    // we need this using statement.
        -:  222:    using ::operator <<;
        -:  223:    *ss_ << value;
        -:  224:  }
        -:  225:#endif  // GTEST_OS_SYMBIAN
        -:  226:
        -:  227:  // We'll hold the text streamed to this object here.
        -:  228:  const std::unique_ptr< ::std::stringstream> ss_;
        -:  229:
        -:  230:  // We declare (but don't implement) this to prevent the compiler
        -:  231:  // from implementing the assignment operator.
        -:  232:  void operator=(const Message&);
        -:  233:};
        -:  234:
        -:  235:// Streams a Message to an ostream.
        -:  236:inline std::ostream& operator <<(std::ostream& os, const Message& sb) {
        -:  237:  return os << sb.GetString();
        -:  238:}
        -:  239:
        -:  240:namespace internal {
        -:  241:
        -:  242:// Converts a streamable value to an std::string.  A NULL pointer is
        -:  243:// converted to "(null)".  When the input value is a ::string,
        -:  244:// ::std::string, ::wstring, or ::std::wstring object, each NUL
        -:  245:// character in it is replaced with "\\0".
        -:  246:template <typename T>
        -:  247:std::string StreamableToString(const T& streamable) {
        -:  248:  return (Message() << streamable).GetString();
        -:  249:}
        -:  250:
        -:  251:}  // namespace internal
        -:  252:}  // namespace testing
        -:  253:
        -:  254:GTEST_DISABLE_MSC_WARNINGS_POP_()  //  4251
        -:  255:
        -:  256:#endif  // GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_
