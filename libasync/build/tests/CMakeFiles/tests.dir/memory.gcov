        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/memory
        -:    0:Graph:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/SystemIntegrationTOT.cc.gcno
        -:    0:Data:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/SystemIntegrationTOT.cc.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- memory ------------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is dual licensed under the MIT and the University of Illinois Open
        -:    7:// Source Licenses. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_MEMORY
        -:   12:#define _LIBCPP_MEMORY
        -:   13:
        -:   14:/*
        -:   15:    memory synopsis
        -:   16:
        -:   17:namespace std
        -:   18:{
        -:   19:
        -:   20:struct allocator_arg_t { };
        -:   21:constexpr allocator_arg_t allocator_arg = allocator_arg_t();
        -:   22:
        -:   23:template <class T, class Alloc> struct uses_allocator;
        -:   24:
        -:   25:template <class Ptr>
        -:   26:struct pointer_traits
        -:   27:{
        -:   28:    typedef Ptr pointer;
        -:   29:    typedef <details> element_type;
        -:   30:    typedef <details> difference_type;
        -:   31:
        -:   32:    template <class U> using rebind = <details>;
        -:   33:
        -:   34:    static pointer pointer_to(<details>);
        -:   35:};
        -:   36:
        -:   37:template <class T>
        -:   38:struct pointer_traits<T*>
        -:   39:{
        -:   40:    typedef T* pointer;
        -:   41:    typedef T element_type;
        -:   42:    typedef ptrdiff_t difference_type;
        -:   43:
        -:   44:    template <class U> using rebind = U*;
        -:   45:
        -:   46:    static pointer pointer_to(<details>) noexcept;
        -:   47:};
        -:   48:
        -:   49:template <class Alloc>
        -:   50:struct allocator_traits
        -:   51:{
        -:   52:    typedef Alloc                        allocator_type;
        -:   53:    typedef typename allocator_type::value_type
        -:   54:                                         value_type;
        -:   55:
        -:   56:    typedef Alloc::pointer | value_type* pointer;
        -:   57:    typedef Alloc::const_pointer
        -:   58:          | pointer_traits<pointer>::rebind<const value_type>
        -:   59:                                         const_pointer;
        -:   60:    typedef Alloc::void_pointer
        -:   61:          | pointer_traits<pointer>::rebind<void>
        -:   62:                                         void_pointer;
        -:   63:    typedef Alloc::const_void_pointer
        -:   64:          | pointer_traits<pointer>::rebind<const void>
        -:   65:                                         const_void_pointer;
        -:   66:    typedef Alloc::difference_type
        -:   67:          | pointer_traits<pointer>::difference_type
        -:   68:                                         difference_type;
        -:   69:    typedef Alloc::size_type
        -:   70:          | make_unsigned<difference_type>::type
        -:   71:                                         size_type;
        -:   72:    typedef Alloc::propagate_on_container_copy_assignment
        -:   73:          | false_type                   propagate_on_container_copy_assignment;
        -:   74:    typedef Alloc::propagate_on_container_move_assignment
        -:   75:          | false_type                   propagate_on_container_move_assignment;
        -:   76:    typedef Alloc::propagate_on_container_swap
        -:   77:          | false_type                   propagate_on_container_swap;
        -:   78:    typedef Alloc::is_always_equal
        -:   79:          | is_empty                     is_always_equal;
        -:   80:
        -:   81:    template <class T> using rebind_alloc  = Alloc::rebind<U>::other | Alloc<T, Args...>;
        -:   82:    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;
        -:   83:
        -:   84:    static pointer allocate(allocator_type& a, size_type n);
        -:   85:    static pointer allocate(allocator_type& a, size_type n, const_void_pointer hint);
        -:   86:
        -:   87:    static void deallocate(allocator_type& a, pointer p, size_type n) noexcept;
        -:   88:
        -:   89:    template <class T, class... Args>
        -:   90:        static void construct(allocator_type& a, T* p, Args&&... args);
        -:   91:
        -:   92:    template <class T>
        -:   93:        static void destroy(allocator_type& a, T* p);
        -:   94:
        -:   95:    static size_type max_size(const allocator_type& a); // noexcept in C++14
        -:   96:
        -:   97:    static allocator_type
        -:   98:        select_on_container_copy_construction(const allocator_type& a);
        -:   99:};
        -:  100:
        -:  101:template <>
        -:  102:class allocator<void>
        -:  103:{
        -:  104:public:
        -:  105:    typedef void*                                 pointer;
        -:  106:    typedef const void*                           const_pointer;
        -:  107:    typedef void                                  value_type;
        -:  108:
        -:  109:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  110:};
        -:  111:
        -:  112:template <class T>
        -:  113:class allocator
        -:  114:{
        -:  115:public:
        -:  116:    typedef size_t                                size_type;
        -:  117:    typedef ptrdiff_t                             difference_type;
        -:  118:    typedef T*                                    pointer;
        -:  119:    typedef const T*                              const_pointer;
        -:  120:    typedef typename add_lvalue_reference<T>::type       reference;
        -:  121:    typedef typename add_lvalue_reference<const T>::type const_reference;
        -:  122:    typedef T                                     value_type;
        -:  123:
        -:  124:    template <class U> struct rebind {typedef allocator<U> other;};
        -:  125:
        -:  126:    allocator() noexcept;
        -:  127:    allocator(const allocator&) noexcept;
        -:  128:    template <class U> allocator(const allocator<U>&) noexcept;
        -:  129:    ~allocator();
        -:  130:    pointer address(reference x) const noexcept;
        -:  131:    const_pointer address(const_reference x) const noexcept;
        -:  132:    pointer allocate(size_type, allocator<void>::const_pointer hint = 0);
        -:  133:    void deallocate(pointer p, size_type n) noexcept;
        -:  134:    size_type max_size() const noexcept;
        -:  135:    template<class U, class... Args>
        -:  136:        void construct(U* p, Args&&... args);
        -:  137:    template <class U>
        -:  138:        void destroy(U* p);
        -:  139:};
        -:  140:
        -:  141:template <class T, class U>
        -:  142:bool operator==(const allocator<T>&, const allocator<U>&) noexcept;
        -:  143:
        -:  144:template <class T, class U>
        -:  145:bool operator!=(const allocator<T>&, const allocator<U>&) noexcept;
        -:  146:
        -:  147:template <class OutputIterator, class T>
        -:  148:class raw_storage_iterator
        -:  149:    : public iterator<output_iterator_tag,
        -:  150:                      T,                               // purposefully not C++03
        -:  151:                      ptrdiff_t,                       // purposefully not C++03
        -:  152:                      T*,                              // purposefully not C++03
        -:  153:                      raw_storage_iterator&>           // purposefully not C++03
        -:  154:{
        -:  155:public:
        -:  156:    explicit raw_storage_iterator(OutputIterator x);
        -:  157:    raw_storage_iterator& operator*();
        -:  158:    raw_storage_iterator& operator=(const T& element);
        -:  159:    raw_storage_iterator& operator++();
        -:  160:    raw_storage_iterator  operator++(int);
        -:  161:};
        -:  162:
        -:  163:template <class T> pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;
        -:  164:template <class T> void               return_temporary_buffer(T* p) noexcept;
        -:  165:
        -:  166:template <class T> T* addressof(T& r) noexcept;
        -:  167:
        -:  168:template <class InputIterator, class ForwardIterator>
        -:  169:ForwardIterator
        -:  170:uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result);
        -:  171:
        -:  172:template <class InputIterator, class Size, class ForwardIterator>
        -:  173:ForwardIterator
        -:  174:uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);
        -:  175:
        -:  176:template <class ForwardIterator, class T>
        -:  177:void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);
        -:  178:
        -:  179:template <class ForwardIterator, class Size, class T>
        -:  180:ForwardIterator
        -:  181:uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
        -:  182:
        -:  183:template <class Y> struct auto_ptr_ref {};
        -:  184:
        -:  185:template<class X>
        -:  186:class auto_ptr
        -:  187:{
        -:  188:public:
        -:  189:    typedef X element_type;
        -:  190:
        -:  191:    explicit auto_ptr(X* p =0) throw();
        -:  192:    auto_ptr(auto_ptr&) throw();
        -:  193:    template<class Y> auto_ptr(auto_ptr<Y>&) throw();
        -:  194:    auto_ptr& operator=(auto_ptr&) throw();
        -:  195:    template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();
        -:  196:    auto_ptr& operator=(auto_ptr_ref<X> r) throw();
        -:  197:    ~auto_ptr() throw();
        -:  198:
        -:  199:    typename add_lvalue_reference<X>::type operator*() const throw();
        -:  200:    X* operator->() const throw();
        -:  201:    X* get() const throw();
        -:  202:    X* release() throw();
        -:  203:    void reset(X* p =0) throw();
        -:  204:
        -:  205:    auto_ptr(auto_ptr_ref<X>) throw();
        -:  206:    template<class Y> operator auto_ptr_ref<Y>() throw();
        -:  207:    template<class Y> operator auto_ptr<Y>() throw();
        -:  208:};
        -:  209:
        -:  210:template <class T>
        -:  211:struct default_delete
        -:  212:{
        -:  213:    constexpr default_delete() noexcept = default;
        -:  214:    template <class U> default_delete(const default_delete<U>&) noexcept;
        -:  215:
        -:  216:    void operator()(T*) const noexcept;
        -:  217:};
        -:  218:
        -:  219:template <class T>
        -:  220:struct default_delete<T[]>
        -:  221:{
        -:  222:    constexpr default_delete() noexcept = default;
        -:  223:    void operator()(T*) const noexcept;
        -:  224:    template <class U> void operator()(U*) const = delete;
        -:  225:};
        -:  226:
        -:  227:template <class T, class D = default_delete<T>>
        -:  228:class unique_ptr
        -:  229:{
        -:  230:public:
        -:  231:    typedef see below pointer;
        -:  232:    typedef T element_type;
        -:  233:    typedef D deleter_type;
        -:  234:
        -:  235:    // constructors
        -:  236:    constexpr unique_ptr() noexcept;
        -:  237:    explicit unique_ptr(pointer p) noexcept;
        -:  238:    unique_ptr(pointer p, see below d1) noexcept;
        -:  239:    unique_ptr(pointer p, see below d2) noexcept;
        -:  240:    unique_ptr(unique_ptr&& u) noexcept;
        -:  241:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  242:    template <class U, class E>
        -:  243:        unique_ptr(unique_ptr<U, E>&& u) noexcept;
        -:  244:    template <class U>
        -:  245:        unique_ptr(auto_ptr<U>&& u) noexcept;
        -:  246:
        -:  247:    // destructor
        -:  248:    ~unique_ptr();
        -:  249:
        -:  250:    // assignment
        -:  251:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  252:    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
        -:  253:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  254:
        -:  255:    // observers
        -:  256:    typename add_lvalue_reference<T>::type operator*() const;
        -:  257:    pointer operator->() const noexcept;
        -:  258:    pointer get() const noexcept;
        -:  259:    deleter_type& get_deleter() noexcept;
        -:  260:    const deleter_type& get_deleter() const noexcept;
        -:  261:    explicit operator bool() const noexcept;
        -:  262:
        -:  263:    // modifiers
        -:  264:    pointer release() noexcept;
        -:  265:    void reset(pointer p = pointer()) noexcept;
        -:  266:    void swap(unique_ptr& u) noexcept;
        -:  267:};
        -:  268:
        -:  269:template <class T, class D>
        -:  270:class unique_ptr<T[], D>
        -:  271:{
        -:  272:public:
        -:  273:    typedef implementation-defined pointer;
        -:  274:    typedef T element_type;
        -:  275:    typedef D deleter_type;
        -:  276:
        -:  277:    // constructors
        -:  278:    constexpr unique_ptr() noexcept;
        -:  279:    explicit unique_ptr(pointer p) noexcept;
        -:  280:    unique_ptr(pointer p, see below d) noexcept;
        -:  281:    unique_ptr(pointer p, see below d) noexcept;
        -:  282:    unique_ptr(unique_ptr&& u) noexcept;
        -:  283:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  284:
        -:  285:    // destructor
        -:  286:    ~unique_ptr();
        -:  287:
        -:  288:    // assignment
        -:  289:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  290:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  291:
        -:  292:    // observers
        -:  293:    T& operator[](size_t i) const;
        -:  294:    pointer get() const noexcept;
        -:  295:    deleter_type& get_deleter() noexcept;
        -:  296:    const deleter_type& get_deleter() const noexcept;
        -:  297:    explicit operator bool() const noexcept;
        -:  298:
        -:  299:    // modifiers
        -:  300:    pointer release() noexcept;
        -:  301:    void reset(pointer p = pointer()) noexcept;
        -:  302:    void reset(nullptr_t) noexcept;
        -:  303:    template <class U> void reset(U) = delete;
        -:  304:    void swap(unique_ptr& u) noexcept;
        -:  305:};
        -:  306:
        -:  307:template <class T, class D>
        -:  308:    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;
        -:  309:
        -:  310:template <class T1, class D1, class T2, class D2>
        -:  311:    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  312:template <class T1, class D1, class T2, class D2>
        -:  313:    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  314:template <class T1, class D1, class T2, class D2>
        -:  315:    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  316:template <class T1, class D1, class T2, class D2>
        -:  317:    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  318:template <class T1, class D1, class T2, class D2>
        -:  319:    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  320:template <class T1, class D1, class T2, class D2>
        -:  321:    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  322:
        -:  323:template <class T, class D>
        -:  324:    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  325:template <class T, class D>
        -:  326:    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  327:template <class T, class D>
        -:  328:    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  329:template <class T, class D>
        -:  330:    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  331:
        -:  332:template <class T, class D>
        -:  333:    bool operator<(const unique_ptr<T, D>& x, nullptr_t);
        -:  334:template <class T, class D>
        -:  335:    bool operator<(nullptr_t, const unique_ptr<T, D>& y);
        -:  336:template <class T, class D>
        -:  337:    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
        -:  338:template <class T, class D>
        -:  339:    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
        -:  340:template <class T, class D>
        -:  341:    bool operator>(const unique_ptr<T, D>& x, nullptr_t);
        -:  342:template <class T, class D>
        -:  343:    bool operator>(nullptr_t, const unique_ptr<T, D>& y);
        -:  344:template <class T, class D>
        -:  345:    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
        -:  346:template <class T, class D>
        -:  347:    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);
        -:  348:
        -:  349:class bad_weak_ptr
        -:  350:    : public std::exception
        -:  351:{
        -:  352:    bad_weak_ptr() noexcept;
        -:  353:};
        -:  354:
        -:  355:template<class T, class... Args> unique_ptr<T> make_unique(Args&&... args);     // C++14
        -:  356:template<class T>                unique_ptr<T> make_unique(size_t n);           // C++14
        -:  357:template<class T, class... Args> unspecified   make_unique(Args&&...) = delete; // C++14, T == U[N]
        -:  358:
        -:  359:template<class T>
        -:  360:class shared_ptr
        -:  361:{
        -:  362:public:
        -:  363:    typedef T element_type;
        -:  364:
        -:  365:    // constructors:
        -:  366:    constexpr shared_ptr() noexcept;
        -:  367:    template<class Y> explicit shared_ptr(Y* p);
        -:  368:    template<class Y, class D> shared_ptr(Y* p, D d);
        -:  369:    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
        -:  370:    template <class D> shared_ptr(nullptr_t p, D d);
        -:  371:    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
        -:  372:    template<class Y> shared_ptr(const shared_ptr<Y>& r, T *p) noexcept;
        -:  373:    shared_ptr(const shared_ptr& r) noexcept;
        -:  374:    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
        -:  375:    shared_ptr(shared_ptr&& r) noexcept;
        -:  376:    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
        -:  377:    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
        -:  378:    template<class Y> shared_ptr(auto_ptr<Y>&& r);
        -:  379:    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
        -:  380:    shared_ptr(nullptr_t) : shared_ptr() { }
        -:  381:
        -:  382:    // destructor:
        -:  383:    ~shared_ptr();
        -:  384:
        -:  385:    // assignment:
        -:  386:    shared_ptr& operator=(const shared_ptr& r) noexcept;
        -:  387:    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
        -:  388:    shared_ptr& operator=(shared_ptr&& r) noexcept;
        -:  389:    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r);
        -:  390:    template<class Y> shared_ptr& operator=(auto_ptr<Y>&& r);
        -:  391:    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
        -:  392:
        -:  393:    // modifiers:
        -:  394:    void swap(shared_ptr& r) noexcept;
        -:  395:    void reset() noexcept;
        -:  396:    template<class Y> void reset(Y* p);
        -:  397:    template<class Y, class D> void reset(Y* p, D d);
        -:  398:    template<class Y, class D, class A> void reset(Y* p, D d, A a);
        -:  399:
        -:  400:    // observers:
        -:  401:    T* get() const noexcept;
        -:  402:    T& operator*() const noexcept;
        -:  403:    T* operator->() const noexcept;
        -:  404:    long use_count() const noexcept;
        -:  405:    bool unique() const noexcept;
        -:  406:    explicit operator bool() const noexcept;
        -:  407:    template<class U> bool owner_before(shared_ptr<U> const& b) const;
        -:  408:    template<class U> bool owner_before(weak_ptr<U> const& b) const;
        -:  409:};
        -:  410:
        -:  411:// shared_ptr comparisons:
        -:  412:template<class T, class U>
        -:  413:    bool operator==(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  414:template<class T, class U>
        -:  415:    bool operator!=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  416:template<class T, class U>
        -:  417:    bool operator<(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  418:template<class T, class U>
        -:  419:    bool operator>(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  420:template<class T, class U>
        -:  421:    bool operator<=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  422:template<class T, class U>
        -:  423:    bool operator>=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  424:
        -:  425:template <class T>
        -:  426:    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  427:template <class T>
        -:  428:    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  429:template <class T>
        -:  430:    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  431:template <class T>
        -:  432:    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  433:template <class T>
        -:  434:    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  435:template <class T>
        -:  436:bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  437:template <class T>
        -:  438:    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  439:template <class T>
        -:  440:    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  441:template <class T>
        -:  442:    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  443:template <class T>
        -:  444:    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  445:template <class T>
        -:  446:    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  447:template <class T>
        -:  448:    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  449:
        -:  450:// shared_ptr specialized algorithms:
        -:  451:template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;
        -:  452:
        -:  453:// shared_ptr casts:
        -:  454:template<class T, class U>
        -:  455:    shared_ptr<T> static_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  456:template<class T, class U>
        -:  457:    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  458:template<class T, class U>
        -:  459:    shared_ptr<T> const_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  460:
        -:  461:// shared_ptr I/O:
        -:  462:template<class E, class T, class Y>
        -:  463:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, shared_ptr<Y> const& p);
        -:  464:
        -:  465:// shared_ptr get_deleter:
        -:  466:template<class D, class T> D* get_deleter(shared_ptr<T> const& p) noexcept;
        -:  467:
        -:  468:template<class T, class... Args>
        -:  469:    shared_ptr<T> make_shared(Args&&... args);
        -:  470:template<class T, class A, class... Args>
        -:  471:    shared_ptr<T> allocate_shared(const A& a, Args&&... args);
        -:  472:
        -:  473:template<class T>
        -:  474:class weak_ptr
        -:  475:{
        -:  476:public:
        -:  477:    typedef T element_type;
        -:  478:
        -:  479:    // constructors
        -:  480:    constexpr weak_ptr() noexcept;
        -:  481:    template<class Y> weak_ptr(shared_ptr<Y> const& r) noexcept;
        -:  482:    weak_ptr(weak_ptr const& r) noexcept;
        -:  483:    template<class Y> weak_ptr(weak_ptr<Y> const& r) noexcept;
        -:  484:    weak_ptr(weak_ptr&& r) noexcept;                      // C++14
        -:  485:    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept; // C++14
        -:  486:
        -:  487:    // destructor
        -:  488:    ~weak_ptr();
        -:  489:
        -:  490:    // assignment
        -:  491:    weak_ptr& operator=(weak_ptr const& r) noexcept;
        -:  492:    template<class Y> weak_ptr& operator=(weak_ptr<Y> const& r) noexcept;
        -:  493:    template<class Y> weak_ptr& operator=(shared_ptr<Y> const& r) noexcept;
        -:  494:    weak_ptr& operator=(weak_ptr&& r) noexcept;                      // C++14
        -:  495:    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept; // C++14
        -:  496:
        -:  497:    // modifiers
        -:  498:    void swap(weak_ptr& r) noexcept;
        -:  499:    void reset() noexcept;
        -:  500:
        -:  501:    // observers
        -:  502:    long use_count() const noexcept;
        -:  503:    bool expired() const noexcept;
        -:  504:    shared_ptr<T> lock() const noexcept;
        -:  505:    template<class U> bool owner_before(shared_ptr<U> const& b) const;
        -:  506:    template<class U> bool owner_before(weak_ptr<U> const& b) const;
        -:  507:};
        -:  508:
        -:  509:// weak_ptr specialized algorithms:
        -:  510:template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
        -:  511:
        -:  512:// class owner_less:
        -:  513:template<class T> struct owner_less;
        -:  514:
        -:  515:template<class T>
        -:  516:struct owner_less<shared_ptr<T>>
        -:  517:    : binary_function<shared_ptr<T>, shared_ptr<T>, bool>
        -:  518:{
        -:  519:    typedef bool result_type;
        -:  520:    bool operator()(shared_ptr<T> const&, shared_ptr<T> const&) const;
        -:  521:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const;
        -:  522:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const;
        -:  523:};
        -:  524:
        -:  525:template<class T>
        -:  526:struct owner_less<weak_ptr<T>>
        -:  527:    : binary_function<weak_ptr<T>, weak_ptr<T>, bool>
        -:  528:{
        -:  529:    typedef bool result_type;
        -:  530:    bool operator()(weak_ptr<T> const&, weak_ptr<T> const&) const;
        -:  531:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const;
        -:  532:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const;
        -:  533:};
        -:  534:
        -:  535:template<class T>
        -:  536:class enable_shared_from_this
        -:  537:{
        -:  538:protected:
        -:  539:    constexpr enable_shared_from_this() noexcept;
        -:  540:    enable_shared_from_this(enable_shared_from_this const&) noexcept;
        -:  541:    enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept;
        -:  542:    ~enable_shared_from_this();
        -:  543:public:
        -:  544:    shared_ptr<T> shared_from_this();
        -:  545:    shared_ptr<T const> shared_from_this() const;
        -:  546:};
        -:  547:
        -:  548:template<class T>
        -:  549:    bool atomic_is_lock_free(const shared_ptr<T>* p);
        -:  550:template<class T>
        -:  551:    shared_ptr<T> atomic_load(const shared_ptr<T>* p);
        -:  552:template<class T>
        -:  553:    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
        -:  554:template<class T>
        -:  555:    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
        -:  556:template<class T>
        -:  557:    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  558:template<class T>
        -:  559:    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
        -:  560:template<class T>
        -:  561:    shared_ptr<T>
        -:  562:    atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  563:template<class T>
        -:  564:    bool
        -:  565:    atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  566:template<class T>
        -:  567:    bool
        -:  568:    atomic_compare_exchange_strong( shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  569:template<class T>
        -:  570:    bool
        -:  571:    atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  572:                                          shared_ptr<T> w, memory_order success,
        -:  573:                                          memory_order failure);
        -:  574:template<class T>
        -:  575:    bool
        -:  576:    atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  577:                                            shared_ptr<T> w, memory_order success,
        -:  578:                                            memory_order failure);
        -:  579:// Hash support
        -:  580:template <class T> struct hash;
        -:  581:template <class T, class D> struct hash<unique_ptr<T, D> >;
        -:  582:template <class T> struct hash<shared_ptr<T> >;
        -:  583:
        -:  584:// Pointer safety
        -:  585:enum class pointer_safety { relaxed, preferred, strict };
        -:  586:void declare_reachable(void *p);
        -:  587:template <class T> T *undeclare_reachable(T *p);
        -:  588:void declare_no_pointers(char *p, size_t n);
        -:  589:void undeclare_no_pointers(char *p, size_t n);
        -:  590:pointer_safety get_pointer_safety() noexcept;
        -:  591:
        -:  592:void* align(size_t alignment, size_t size, void*& ptr, size_t& space);
        -:  593:
        -:  594:}  // std
        -:  595:
        -:  596:*/
        -:  597:
        -:  598:#include <__config>
        -:  599:#include <type_traits>
        -:  600:#include <typeinfo>
        -:  601:#include <cstddef>
        -:  602:#include <cstdint>
        -:  603:#include <new>
        -:  604:#include <utility>
        -:  605:#include <limits>
        -:  606:#include <iterator>
        -:  607:#include <__functional_base>
        -:  608:#include <iosfwd>
        -:  609:#include <tuple>
        -:  610:#include <cstring>
        -:  611:#if defined(_LIBCPP_NO_EXCEPTIONS)
        -:  612:    #include <cassert>
        -:  613:#endif
        -:  614:
        -:  615:#if __has_feature(cxx_atomic) && !defined(_LIBCPP_HAS_NO_THREADS)
        -:  616:#  include <atomic>
        -:  617:#endif
        -:  618:
        -:  619:#include <__undef_min_max>
        -:  620:#include <__undef___deallocate>
        -:  621:
        -:  622:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  623:#pragma GCC system_header
        -:  624:#endif
        -:  625:
        -:  626:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  627:
        -:  628:template <class _ValueType>
        -:  629:inline _LIBCPP_ALWAYS_INLINE
        -:  630:_ValueType __libcpp_relaxed_load(_ValueType const* __value) {
        -:  631:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  632:    defined(__ATOMIC_RELAXED) &&        \
        -:  633:    (__has_builtin(__atomic_load_n) || _GNUC_VER >= 407)
        -:  634:    return __atomic_load_n(__value, __ATOMIC_RELAXED);
        -:  635:#else
        -:  636:    return *__value;
        -:  637:#endif
        -:  638:}
        -:  639:
        -:  640:// addressof moved to <__functional_base>
        -:  641:
        -:  642:template <class _Tp> class allocator;
        -:  643:
        -:  644:template <>
        -:  645:class _LIBCPP_TYPE_VIS_ONLY allocator<void>
        -:  646:{
        -:  647:public:
        -:  648:    typedef void*             pointer;
        -:  649:    typedef const void*       const_pointer;
        -:  650:    typedef void              value_type;
        -:  651:
        -:  652:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  653:};
        -:  654:
        -:  655:template <>
        -:  656:class _LIBCPP_TYPE_VIS_ONLY allocator<const void>
        -:  657:{
        -:  658:public:
        -:  659:    typedef const void*       pointer;
        -:  660:    typedef const void*       const_pointer;
        -:  661:    typedef const void        value_type;
        -:  662:
        -:  663:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  664:};
        -:  665:
        -:  666:// pointer_traits
        -:  667:
        -:  668:template <class _Tp>
        -:  669:struct __has_element_type
        -:  670:{
        -:  671:private:
        -:  672:    struct __two {char __lx; char __lxx;};
        -:  673:    template <class _Up> static __two __test(...);
        -:  674:    template <class _Up> static char __test(typename _Up::element_type* = 0);
        -:  675:public:
        -:  676:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  677:};
        -:  678:
        -:  679:template <class _Ptr, bool = __has_element_type<_Ptr>::value>
        -:  680:struct __pointer_traits_element_type;
        -:  681:
        -:  682:template <class _Ptr>
        -:  683:struct __pointer_traits_element_type<_Ptr, true>
        -:  684:{
        -:  685:    typedef typename _Ptr::element_type type;
        -:  686:};
        -:  687:
        -:  688:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  689:
        -:  690:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  691:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>
        -:  692:{
        -:  693:    typedef typename _Sp<_Tp, _Args...>::element_type type;
        -:  694:};
        -:  695:
        -:  696:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  697:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>
        -:  698:{
        -:  699:    typedef _Tp type;
        -:  700:};
        -:  701:
        -:  702:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  703:
        -:  704:template <template <class> class _Sp, class _Tp>
        -:  705:struct __pointer_traits_element_type<_Sp<_Tp>, true>
        -:  706:{
        -:  707:    typedef typename _Sp<_Tp>::element_type type;
        -:  708:};
        -:  709:
        -:  710:template <template <class> class _Sp, class _Tp>
        -:  711:struct __pointer_traits_element_type<_Sp<_Tp>, false>
        -:  712:{
        -:  713:    typedef _Tp type;
        -:  714:};
        -:  715:
        -:  716:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  717:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, true>
        -:  718:{
        -:  719:    typedef typename _Sp<_Tp, _A0>::element_type type;
        -:  720:};
        -:  721:
        -:  722:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  723:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, false>
        -:  724:{
        -:  725:    typedef _Tp type;
        -:  726:};
        -:  727:
        -:  728:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  729:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, true>
        -:  730:{
        -:  731:    typedef typename _Sp<_Tp, _A0, _A1>::element_type type;
        -:  732:};
        -:  733:
        -:  734:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  735:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, false>
        -:  736:{
        -:  737:    typedef _Tp type;
        -:  738:};
        -:  739:
        -:  740:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  741:                                                           class _A1, class _A2>
        -:  742:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, true>
        -:  743:{
        -:  744:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::element_type type;
        -:  745:};
        -:  746:
        -:  747:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  748:                                                           class _A1, class _A2>
        -:  749:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, false>
        -:  750:{
        -:  751:    typedef _Tp type;
        -:  752:};
        -:  753:
        -:  754:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  755:
        -:  756:template <class _Tp>
        -:  757:struct __has_difference_type
        -:  758:{
        -:  759:private:
        -:  760:    struct __two {char __lx; char __lxx;};
        -:  761:    template <class _Up> static __two __test(...);
        -:  762:    template <class _Up> static char __test(typename _Up::difference_type* = 0);
        -:  763:public:
        -:  764:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  765:};
        -:  766:
        -:  767:template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
        -:  768:struct __pointer_traits_difference_type
        -:  769:{
        -:  770:    typedef ptrdiff_t type;
        -:  771:};
        -:  772:
        -:  773:template <class _Ptr>
        -:  774:struct __pointer_traits_difference_type<_Ptr, true>
        -:  775:{
        -:  776:    typedef typename _Ptr::difference_type type;
        -:  777:};
        -:  778:
        -:  779:template <class _Tp, class _Up>
        -:  780:struct __has_rebind
        -:  781:{
        -:  782:private:
        -:  783:    struct __two {char __lx; char __lxx;};
        -:  784:    template <class _Xp> static __two __test(...);
        -:  785:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>* = 0);
        -:  786:public:
        -:  787:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  788:};
        -:  789:
        -:  790:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -:  791:struct __pointer_traits_rebind
        -:  792:{
        -:  793:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  794:    typedef typename _Tp::template rebind<_Up> type;
        -:  795:#else
        -:  796:    typedef typename _Tp::template rebind<_Up>::other type;
        -:  797:#endif
        -:  798:};
        -:  799:
        -:  800:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  801:
        -:  802:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  803:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>
        -:  804:{
        -:  805:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  806:    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up> type;
        -:  807:#else
        -:  808:    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up>::other type;
        -:  809:#endif
        -:  810:};
        -:  811:
        -:  812:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  813:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>
        -:  814:{
        -:  815:    typedef _Sp<_Up, _Args...> type;
        -:  816:};
        -:  817:
        -:  818:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  819:
        -:  820:template <template <class> class _Sp, class _Tp, class _Up>
        -:  821:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, true>
        -:  822:{
        -:  823:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  824:    typedef typename _Sp<_Tp>::template rebind<_Up> type;
        -:  825:#else
        -:  826:    typedef typename _Sp<_Tp>::template rebind<_Up>::other type;
        -:  827:#endif
        -:  828:};
        -:  829:
        -:  830:template <template <class> class _Sp, class _Tp, class _Up>
        -:  831:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, false>
        -:  832:{
        -:  833:    typedef _Sp<_Up> type;
        -:  834:};
        -:  835:
        -:  836:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  837:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, true>
        -:  838:{
        -:  839:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  840:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up> type;
        -:  841:#else
        -:  842:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up>::other type;
        -:  843:#endif
        -:  844:};
        -:  845:
        -:  846:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  847:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, false>
        -:  848:{
        -:  849:    typedef _Sp<_Up, _A0> type;
        -:  850:};
        -:  851:
        -:  852:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  853:                                         class _A1, class _Up>
        -:  854:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, true>
        -:  855:{
        -:  856:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  857:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up> type;
        -:  858:#else
        -:  859:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -:  860:#endif
        -:  861:};
        -:  862:
        -:  863:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  864:                                         class _A1, class _Up>
        -:  865:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, false>
        -:  866:{
        -:  867:    typedef _Sp<_Up, _A0, _A1> type;
        -:  868:};
        -:  869:
        -:  870:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  871:                                                class _A1, class _A2, class _Up>
        -:  872:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, true>
        -:  873:{
        -:  874:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  875:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up> type;
        -:  876:#else
        -:  877:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -:  878:#endif
        -:  879:};
        -:  880:
        -:  881:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  882:                                                class _A1, class _A2, class _Up>
        -:  883:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, false>
        -:  884:{
        -:  885:    typedef _Sp<_Up, _A0, _A1, _A2> type;
        -:  886:};
        -:  887:
        -:  888:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  889:
        -:  890:template <class _Ptr>
        -:  891:struct _LIBCPP_TYPE_VIS_ONLY pointer_traits
        -:  892:{
        -:  893:    typedef _Ptr                                                     pointer;
        -:  894:    typedef typename __pointer_traits_element_type<pointer>::type    element_type;
        -:  895:    typedef typename __pointer_traits_difference_type<pointer>::type difference_type;
        -:  896:
        -:  897:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  898:    template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;
        -:  899:#else
        -:  900:    template <class _Up> struct rebind
        -:  901:        {typedef typename __pointer_traits_rebind<pointer, _Up>::type other;};
        -:  902:#endif  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  903:
        -:  904:private:
        -:  905:    struct __nat {};
        -:  906:public:
        -:  907:    _LIBCPP_INLINE_VISIBILITY
        -:  908:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  909:                                           __nat, element_type>::type& __r)
        -:  910:        {return pointer::pointer_to(__r);}
        -:  911:};
        -:  912:
        -:  913:template <class _Tp>
        -:  914:struct _LIBCPP_TYPE_VIS_ONLY pointer_traits<_Tp*>
        -:  915:{
        -:  916:    typedef _Tp*      pointer;
        -:  917:    typedef _Tp       element_type;
        -:  918:    typedef ptrdiff_t difference_type;
        -:  919:
        -:  920:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  921:    template <class _Up> using rebind = _Up*;
        -:  922:#else
        -:  923:    template <class _Up> struct rebind {typedef _Up* other;};
        -:  924:#endif
        -:  925:
        -:  926:private:
        -:  927:    struct __nat {};
        -:  928:public:
        -:  929:    _LIBCPP_INLINE_VISIBILITY
        -:  930:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  931:                                      __nat, element_type>::type& __r) _NOEXCEPT
    #####:  932:        {return _VSTD::addressof(__r);}
        -:  933:};
        -:  934:
        -:  935:template <class _From, class _To>
        -:  936:struct __rebind_pointer {
        -:  937:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  938:    typedef typename pointer_traits<_From>::template rebind<_To>        type;
        -:  939:#else
        -:  940:    typedef typename pointer_traits<_From>::template rebind<_To>::other type;
        -:  941:#endif
        -:  942:};
        -:  943:
        -:  944:// allocator_traits
        -:  945:
        -:  946:namespace __has_pointer_type_imp
        -:  947:{
        -:  948:    template <class _Up> static __two __test(...);
        -:  949:    template <class _Up> static char __test(typename _Up::pointer* = 0);
        -:  950:}
        -:  951:
        -:  952:template <class _Tp>
        -:  953:struct __has_pointer_type
        -:  954:    : public integral_constant<bool, sizeof(__has_pointer_type_imp::__test<_Tp>(0)) == 1>
        -:  955:{
        -:  956:};
        -:  957:
        -:  958:namespace __pointer_type_imp
        -:  959:{
        -:  960:
        -:  961:template <class _Tp, class _Dp, bool = __has_pointer_type<_Dp>::value>
        -:  962:struct __pointer_type
        -:  963:{
        -:  964:    typedef typename _Dp::pointer type;
        -:  965:};
        -:  966:
        -:  967:template <class _Tp, class _Dp>
        -:  968:struct __pointer_type<_Tp, _Dp, false>
        -:  969:{
        -:  970:    typedef _Tp* type;
        -:  971:};
        -:  972:
        -:  973:}  // __pointer_type_imp
        -:  974:
        -:  975:template <class _Tp, class _Dp>
        -:  976:struct __pointer_type
        -:  977:{
        -:  978:    typedef typename __pointer_type_imp::__pointer_type<_Tp, typename remove_reference<_Dp>::type>::type type;
        -:  979:};
        -:  980:
        -:  981:template <class _Tp>
        -:  982:struct __has_const_pointer
        -:  983:{
        -:  984:private:
        -:  985:    struct __two {char __lx; char __lxx;};
        -:  986:    template <class _Up> static __two __test(...);
        -:  987:    template <class _Up> static char __test(typename _Up::const_pointer* = 0);
        -:  988:public:
        -:  989:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  990:};
        -:  991:
        -:  992:template <class _Tp, class _Ptr, class _Alloc, bool = __has_const_pointer<_Alloc>::value>
        -:  993:struct __const_pointer
        -:  994:{
        -:  995:    typedef typename _Alloc::const_pointer type;
        -:  996:};
        -:  997:
        -:  998:template <class _Tp, class _Ptr, class _Alloc>
        -:  999:struct __const_pointer<_Tp, _Ptr, _Alloc, false>
        -: 1000:{
        -: 1001:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1002:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp> type;
        -: 1003:#else
        -: 1004:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp>::other type;
        -: 1005:#endif
        -: 1006:};
        -: 1007:
        -: 1008:template <class _Tp>
        -: 1009:struct __has_void_pointer
        -: 1010:{
        -: 1011:private:
        -: 1012:    struct __two {char __lx; char __lxx;};
        -: 1013:    template <class _Up> static __two __test(...);
        -: 1014:    template <class _Up> static char __test(typename _Up::void_pointer* = 0);
        -: 1015:public:
        -: 1016:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1017:};
        -: 1018:
        -: 1019:template <class _Ptr, class _Alloc, bool = __has_void_pointer<_Alloc>::value>
        -: 1020:struct __void_pointer
        -: 1021:{
        -: 1022:    typedef typename _Alloc::void_pointer type;
        -: 1023:};
        -: 1024:
        -: 1025:template <class _Ptr, class _Alloc>
        -: 1026:struct __void_pointer<_Ptr, _Alloc, false>
        -: 1027:{
        -: 1028:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1029:    typedef typename pointer_traits<_Ptr>::template rebind<void> type;
        -: 1030:#else
        -: 1031:    typedef typename pointer_traits<_Ptr>::template rebind<void>::other type;
        -: 1032:#endif
        -: 1033:};
        -: 1034:
        -: 1035:template <class _Tp>
        -: 1036:struct __has_const_void_pointer
        -: 1037:{
        -: 1038:private:
        -: 1039:    struct __two {char __lx; char __lxx;};
        -: 1040:    template <class _Up> static __two __test(...);
        -: 1041:    template <class _Up> static char __test(typename _Up::const_void_pointer* = 0);
        -: 1042:public:
        -: 1043:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1044:};
        -: 1045:
        -: 1046:template <class _Ptr, class _Alloc, bool = __has_const_void_pointer<_Alloc>::value>
        -: 1047:struct __const_void_pointer
        -: 1048:{
        -: 1049:    typedef typename _Alloc::const_void_pointer type;
        -: 1050:};
        -: 1051:
        -: 1052:template <class _Ptr, class _Alloc>
        -: 1053:struct __const_void_pointer<_Ptr, _Alloc, false>
        -: 1054:{
        -: 1055:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1056:    typedef typename pointer_traits<_Ptr>::template rebind<const void> type;
        -: 1057:#else
        -: 1058:    typedef typename pointer_traits<_Ptr>::template rebind<const void>::other type;
        -: 1059:#endif
        -: 1060:};
        -: 1061:
        -: 1062:template <class _Tp>
        -: 1063:inline _LIBCPP_INLINE_VISIBILITY
        -: 1064:_Tp*
        -: 1065:__to_raw_pointer(_Tp* __p) _NOEXCEPT
        -: 1066:{
    #####: 1067:    return __p;
        -: 1068:}
        -: 1069:
        -: 1070:template <class _Pointer>
        -: 1071:inline _LIBCPP_INLINE_VISIBILITY
        -: 1072:typename pointer_traits<_Pointer>::element_type*
        -: 1073:__to_raw_pointer(_Pointer __p) _NOEXCEPT
        -: 1074:{
        -: 1075:    return _VSTD::__to_raw_pointer(__p.operator->());
        -: 1076:}
        -: 1077:
        -: 1078:template <class _Tp>
        -: 1079:struct __has_size_type
        -: 1080:{
        -: 1081:private:
        -: 1082:    struct __two {char __lx; char __lxx;};
        -: 1083:    template <class _Up> static __two __test(...);
        -: 1084:    template <class _Up> static char __test(typename _Up::size_type* = 0);
        -: 1085:public:
        -: 1086:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1087:};
        -: 1088:
        -: 1089:template <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>
        -: 1090:struct __size_type
        -: 1091:{
        -: 1092:    typedef typename make_unsigned<_DiffType>::type type;
        -: 1093:};
        -: 1094:
        -: 1095:template <class _Alloc, class _DiffType>
        -: 1096:struct __size_type<_Alloc, _DiffType, true>
        -: 1097:{
        -: 1098:    typedef typename _Alloc::size_type type;
        -: 1099:};
        -: 1100:
        -: 1101:template <class _Tp>
        -: 1102:struct __has_propagate_on_container_copy_assignment
        -: 1103:{
        -: 1104:private:
        -: 1105:    struct __two {char __lx; char __lxx;};
        -: 1106:    template <class _Up> static __two __test(...);
        -: 1107:    template <class _Up> static char __test(typename _Up::propagate_on_container_copy_assignment* = 0);
        -: 1108:public:
        -: 1109:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1110:};
        -: 1111:
        -: 1112:template <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>
        -: 1113:struct __propagate_on_container_copy_assignment
        -: 1114:{
        -: 1115:    typedef false_type type;
        -: 1116:};
        -: 1117:
        -: 1118:template <class _Alloc>
        -: 1119:struct __propagate_on_container_copy_assignment<_Alloc, true>
        -: 1120:{
        -: 1121:    typedef typename _Alloc::propagate_on_container_copy_assignment type;
        -: 1122:};
        -: 1123:
        -: 1124:template <class _Tp>
        -: 1125:struct __has_propagate_on_container_move_assignment
        -: 1126:{
        -: 1127:private:
        -: 1128:    struct __two {char __lx; char __lxx;};
        -: 1129:    template <class _Up> static __two __test(...);
        -: 1130:    template <class _Up> static char __test(typename _Up::propagate_on_container_move_assignment* = 0);
        -: 1131:public:
        -: 1132:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1133:};
        -: 1134:
        -: 1135:template <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>
        -: 1136:struct __propagate_on_container_move_assignment
        -: 1137:{
        -: 1138:    typedef false_type type;
        -: 1139:};
        -: 1140:
        -: 1141:template <class _Alloc>
        -: 1142:struct __propagate_on_container_move_assignment<_Alloc, true>
        -: 1143:{
        -: 1144:    typedef typename _Alloc::propagate_on_container_move_assignment type;
        -: 1145:};
        -: 1146:
        -: 1147:template <class _Tp>
        -: 1148:struct __has_propagate_on_container_swap
        -: 1149:{
        -: 1150:private:
        -: 1151:    struct __two {char __lx; char __lxx;};
        -: 1152:    template <class _Up> static __two __test(...);
        -: 1153:    template <class _Up> static char __test(typename _Up::propagate_on_container_swap* = 0);
        -: 1154:public:
        -: 1155:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1156:};
        -: 1157:
        -: 1158:template <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>
        -: 1159:struct __propagate_on_container_swap
        -: 1160:{
        -: 1161:    typedef false_type type;
        -: 1162:};
        -: 1163:
        -: 1164:template <class _Alloc>
        -: 1165:struct __propagate_on_container_swap<_Alloc, true>
        -: 1166:{
        -: 1167:    typedef typename _Alloc::propagate_on_container_swap type;
        -: 1168:};
        -: 1169:
        -: 1170:template <class _Tp>
        -: 1171:struct __has_is_always_equal
        -: 1172:{
        -: 1173:private:
        -: 1174:    struct __two {char __lx; char __lxx;};
        -: 1175:    template <class _Up> static __two __test(...);
        -: 1176:    template <class _Up> static char __test(typename _Up::is_always_equal* = 0);
        -: 1177:public:
        -: 1178:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1179:};
        -: 1180:
        -: 1181:template <class _Alloc, bool = __has_is_always_equal<_Alloc>::value>
        -: 1182:struct __is_always_equal
        -: 1183:{
        -: 1184:    typedef typename _VSTD::is_empty<_Alloc>::type type;
        -: 1185:};
        -: 1186:
        -: 1187:template <class _Alloc>
        -: 1188:struct __is_always_equal<_Alloc, true>
        -: 1189:{
        -: 1190:    typedef typename _Alloc::is_always_equal type;
        -: 1191:};
        -: 1192:
        -: 1193:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -: 1194:struct __has_rebind_other
        -: 1195:{
        -: 1196:private:
        -: 1197:    struct __two {char __lx; char __lxx;};
        -: 1198:    template <class _Xp> static __two __test(...);
        -: 1199:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>::other* = 0);
        -: 1200:public:
        -: 1201:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1202:};
        -: 1203:
        -: 1204:template <class _Tp, class _Up>
        -: 1205:struct __has_rebind_other<_Tp, _Up, false>
        -: 1206:{
        -: 1207:    static const bool value = false;
        -: 1208:};
        -: 1209:
        -: 1210:template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
        -: 1211:struct __allocator_traits_rebind
        -: 1212:{
        -: 1213:    typedef typename _Tp::template rebind<_Up>::other type;
        -: 1214:};
        -: 1215:
        -: 1216:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1217:
        -: 1218:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1219:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true>
        -: 1220:{
        -: 1221:    typedef typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other type;
        -: 1222:};
        -: 1223:
        -: 1224:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1225:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false>
        -: 1226:{
        -: 1227:    typedef _Alloc<_Up, _Args...> type;
        -: 1228:};
        -: 1229:
        -: 1230:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1231:
        -: 1232:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1233:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, true>
        -: 1234:{
        -: 1235:    typedef typename _Alloc<_Tp>::template rebind<_Up>::other type;
        -: 1236:};
        -: 1237:
        -: 1238:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1239:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, false>
        -: 1240:{
        -: 1241:    typedef _Alloc<_Up> type;
        -: 1242:};
        -: 1243:
        -: 1244:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1245:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, true>
        -: 1246:{
        -: 1247:    typedef typename _Alloc<_Tp, _A0>::template rebind<_Up>::other type;
        -: 1248:};
        -: 1249:
        -: 1250:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1251:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, false>
        -: 1252:{
        -: 1253:    typedef _Alloc<_Up, _A0> type;
        -: 1254:};
        -: 1255:
        -: 1256:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1257:                                         class _A1, class _Up>
        -: 1258:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, true>
        -: 1259:{
        -: 1260:    typedef typename _Alloc<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -: 1261:};
        -: 1262:
        -: 1263:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1264:                                         class _A1, class _Up>
        -: 1265:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, false>
        -: 1266:{
        -: 1267:    typedef _Alloc<_Up, _A0, _A1> type;
        -: 1268:};
        -: 1269:
        -: 1270:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1271:                                                class _A1, class _A2, class _Up>
        -: 1272:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, true>
        -: 1273:{
        -: 1274:    typedef typename _Alloc<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -: 1275:};
        -: 1276:
        -: 1277:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1278:                                                class _A1, class _A2, class _Up>
        -: 1279:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, false>
        -: 1280:{
        -: 1281:    typedef _Alloc<_Up, _A0, _A1, _A2> type;
        -: 1282:};
        -: 1283:
        -: 1284:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1285:
        -: 1286:#ifndef _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1287:
        -: 1288:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1289:auto
        -: 1290:__has_allocate_hint_test(_Alloc&& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1291:    -> decltype(__a.allocate(__sz, __p), true_type());
        -: 1292:
        -: 1293:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1294:auto
        -: 1295:__has_allocate_hint_test(const _Alloc& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1296:    -> false_type;
        -: 1297:
        -: 1298:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1299:struct __has_allocate_hint
        -: 1300:    : integral_constant<bool,
        -: 1301:        is_same<
        -: 1302:            decltype(__has_allocate_hint_test(declval<_Alloc>(),
        -: 1303:                                          declval<_SizeType>(),
        -: 1304:                                          declval<_ConstVoidPtr>())),
        -: 1305:            true_type>::value>
        -: 1306:{
        -: 1307:};
        -: 1308:
        -: 1309:#else  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1310:
        -: 1311:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1312:struct __has_allocate_hint
        -: 1313:    : true_type
        -: 1314:{
        -: 1315:};
        -: 1316:
        -: 1317:#endif  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1318:
        -: 1319:#if !defined(_LIBCPP_HAS_NO_ADVANCED_SFINAE) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1320:
        -: 1321:template <class _Alloc, class _Tp, class ..._Args>
        -: 1322:decltype(_VSTD::declval<_Alloc>().construct(_VSTD::declval<_Tp*>(),
        -: 1323:                                           _VSTD::declval<_Args>()...),
        -: 1324:                                           true_type())
        -: 1325:__has_construct_test(_Alloc&& __a, _Tp* __p, _Args&& ...__args);
        -: 1326:
        -: 1327:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1328:false_type
        -: 1329:__has_construct_test(const _Alloc& __a, _Pointer&& __p, _Args&& ...__args);
        -: 1330:
        -: 1331:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1332:struct __has_construct
        -: 1333:    : integral_constant<bool,
        -: 1334:        is_same<
        -: 1335:            decltype(__has_construct_test(declval<_Alloc>(),
        -: 1336:                                          declval<_Pointer>(),
        -: 1337:                                          declval<_Args>()...)),
        -: 1338:            true_type>::value>
        -: 1339:{
        -: 1340:};
        -: 1341:
        -: 1342:template <class _Alloc, class _Pointer>
        -: 1343:auto
        -: 1344:__has_destroy_test(_Alloc&& __a, _Pointer&& __p)
        -: 1345:    -> decltype(__a.destroy(__p), true_type());
        -: 1346:
        -: 1347:template <class _Alloc, class _Pointer>
        -: 1348:auto
        -: 1349:__has_destroy_test(const _Alloc& __a, _Pointer&& __p)
        -: 1350:    -> false_type;
        -: 1351:
        -: 1352:template <class _Alloc, class _Pointer>
        -: 1353:struct __has_destroy
        -: 1354:    : integral_constant<bool,
        -: 1355:        is_same<
        -: 1356:            decltype(__has_destroy_test(declval<_Alloc>(),
        -: 1357:                                        declval<_Pointer>())),
        -: 1358:            true_type>::value>
        -: 1359:{
        -: 1360:};
        -: 1361:
        -: 1362:template <class _Alloc>
        -: 1363:auto
        -: 1364:__has_max_size_test(_Alloc&& __a)
        -: 1365:    -> decltype(__a.max_size(), true_type());
        -: 1366:
        -: 1367:template <class _Alloc>
        -: 1368:auto
        -: 1369:__has_max_size_test(const volatile _Alloc& __a)
        -: 1370:    -> false_type;
        -: 1371:
        -: 1372:template <class _Alloc>
        -: 1373:struct __has_max_size
        -: 1374:    : integral_constant<bool,
        -: 1375:        is_same<
        -: 1376:            decltype(__has_max_size_test(declval<_Alloc&>())),
        -: 1377:            true_type>::value>
        -: 1378:{
        -: 1379:};
        -: 1380:
        -: 1381:template <class _Alloc>
        -: 1382:auto
        -: 1383:__has_select_on_container_copy_construction_test(_Alloc&& __a)
        -: 1384:    -> decltype(__a.select_on_container_copy_construction(), true_type());
        -: 1385:
        -: 1386:template <class _Alloc>
        -: 1387:auto
        -: 1388:__has_select_on_container_copy_construction_test(const volatile _Alloc& __a)
        -: 1389:    -> false_type;
        -: 1390:
        -: 1391:template <class _Alloc>
        -: 1392:struct __has_select_on_container_copy_construction
        -: 1393:    : integral_constant<bool,
        -: 1394:        is_same<
        -: 1395:            decltype(__has_select_on_container_copy_construction_test(declval<_Alloc&>())),
        -: 1396:            true_type>::value>
        -: 1397:{
        -: 1398:};
        -: 1399:
        -: 1400:#else  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1401:
        -: 1402:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1403:
        -: 1404:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1405:struct __has_construct
        -: 1406:    : false_type
        -: 1407:{
        -: 1408:};
        -: 1409:
        -: 1410:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1411:
        -: 1412:template <class _Alloc, class _Pointer, class _Args>
        -: 1413:struct __has_construct
        -: 1414:    : false_type
        -: 1415:{
        -: 1416:};
        -: 1417:
        -: 1418:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1419:
        -: 1420:template <class _Alloc, class _Pointer>
        -: 1421:struct __has_destroy
        -: 1422:    : false_type
        -: 1423:{
        -: 1424:};
        -: 1425:
        -: 1426:template <class _Alloc>
        -: 1427:struct __has_max_size
        -: 1428:    : true_type
        -: 1429:{
        -: 1430:};
        -: 1431:
        -: 1432:template <class _Alloc>
        -: 1433:struct __has_select_on_container_copy_construction
        -: 1434:    : false_type
        -: 1435:{
        -: 1436:};
        -: 1437:
        -: 1438:#endif  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1439:
        -: 1440:template <class _Alloc, class _Ptr, bool = __has_difference_type<_Alloc>::value>
        -: 1441:struct __alloc_traits_difference_type
        -: 1442:{
        -: 1443:    typedef typename pointer_traits<_Ptr>::difference_type type;
        -: 1444:};
        -: 1445:
        -: 1446:template <class _Alloc, class _Ptr>
        -: 1447:struct __alloc_traits_difference_type<_Alloc, _Ptr, true>
        -: 1448:{
        -: 1449:    typedef typename _Alloc::difference_type type;
        -: 1450:};
        -: 1451:
        -: 1452:template <class _Alloc>
        -: 1453:struct _LIBCPP_TYPE_VIS_ONLY allocator_traits
        -: 1454:{
        -: 1455:    typedef _Alloc                              allocator_type;
        -: 1456:    typedef typename allocator_type::value_type value_type;
        -: 1457:
        -: 1458:    typedef typename __pointer_type<value_type, allocator_type>::type pointer;
        -: 1459:    typedef typename __const_pointer<value_type, pointer, allocator_type>::type const_pointer;
        -: 1460:    typedef typename __void_pointer<pointer, allocator_type>::type void_pointer;
        -: 1461:    typedef typename __const_void_pointer<pointer, allocator_type>::type const_void_pointer;
        -: 1462:
        -: 1463:    typedef typename __alloc_traits_difference_type<allocator_type, pointer>::type difference_type;
        -: 1464:    typedef typename __size_type<allocator_type, difference_type>::type size_type;
        -: 1465:
        -: 1466:    typedef typename __propagate_on_container_copy_assignment<allocator_type>::type
        -: 1467:                     propagate_on_container_copy_assignment;
        -: 1468:    typedef typename __propagate_on_container_move_assignment<allocator_type>::type
        -: 1469:                     propagate_on_container_move_assignment;
        -: 1470:    typedef typename __propagate_on_container_swap<allocator_type>::type
        -: 1471:                     propagate_on_container_swap;
        -: 1472:    typedef typename __is_always_equal<allocator_type>::type
        -: 1473:                     is_always_equal;
        -: 1474:
        -: 1475:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1476:    template <class _Tp> using rebind_alloc =
        -: 1477:                  typename __allocator_traits_rebind<allocator_type, _Tp>::type;
        -: 1478:    template <class _Tp> using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
        -: 1479:#else  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1480:    template <class _Tp> struct rebind_alloc
        -: 1481:        {typedef typename __allocator_traits_rebind<allocator_type, _Tp>::type other;};
        -: 1482:    template <class _Tp> struct rebind_traits
        -: 1483:        {typedef allocator_traits<typename rebind_alloc<_Tp>::other> other;};
        -: 1484:#endif  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1485:
        -: 1486:    _LIBCPP_INLINE_VISIBILITY
        -: 1487:    static pointer allocate(allocator_type& __a, size_type __n)
    #####: 1488:        {return __a.allocate(__n);}
        -: 1489:    _LIBCPP_INLINE_VISIBILITY
        -: 1490:    static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
        -: 1491:        {return allocate(__a, __n, __hint,
        -: 1492:            __has_allocate_hint<allocator_type, size_type, const_void_pointer>());}
        -: 1493:
        -: 1494:    _LIBCPP_INLINE_VISIBILITY
        -: 1495:    static void deallocate(allocator_type& __a, pointer __p, size_type __n) _NOEXCEPT
        -: 1496:        {__a.deallocate(__p, __n);}
        -: 1497:
        -: 1498:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1499:    template <class _Tp, class... _Args>
        -: 1500:        _LIBCPP_INLINE_VISIBILITY
        -: 1501:        static void construct(allocator_type& __a, _Tp* __p, _Args&&... __args)
        -: 1502:            {__construct(__has_construct<allocator_type, _Tp*, _Args...>(),
        -: 1503:                         __a, __p, _VSTD::forward<_Args>(__args)...);}
        -: 1504:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1505:    template <class _Tp>
        -: 1506:        _LIBCPP_INLINE_VISIBILITY
        -: 1507:        static void construct(allocator_type& __a, _Tp* __p)
        -: 1508:            {
        -: 1509:                ::new ((void*)__p) _Tp();
        -: 1510:            }
        -: 1511:    template <class _Tp, class _A0>
        -: 1512:        _LIBCPP_INLINE_VISIBILITY
        -: 1513:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0)
        -: 1514:            {
        -: 1515:                ::new ((void*)__p) _Tp(__a0);
        -: 1516:            }
        -: 1517:    template <class _Tp, class _A0, class _A1>
        -: 1518:        _LIBCPP_INLINE_VISIBILITY
        -: 1519:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0,
        -: 1520:                              const _A1& __a1)
        -: 1521:            {
        -: 1522:                ::new ((void*)__p) _Tp(__a0, __a1);
        -: 1523:            }
        -: 1524:    template <class _Tp, class _A0, class _A1, class _A2>
        -: 1525:        _LIBCPP_INLINE_VISIBILITY
        -: 1526:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0,
        -: 1527:                              const _A1& __a1, const _A2& __a2)
        -: 1528:            {
        -: 1529:                ::new ((void*)__p) _Tp(__a0, __a1, __a2);
        -: 1530:            }
        -: 1531:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1532:
        -: 1533:    template <class _Tp>
        -: 1534:        _LIBCPP_INLINE_VISIBILITY
        -: 1535:        static void destroy(allocator_type& __a, _Tp* __p)
        -: 1536:            {__destroy(__has_destroy<allocator_type, _Tp*>(), __a, __p);}
        -: 1537:
        -: 1538:    _LIBCPP_INLINE_VISIBILITY
        -: 1539:    static size_type max_size(const allocator_type& __a) _NOEXCEPT
    #####: 1540:        {return __max_size(__has_max_size<const allocator_type>(), __a);}
        -: 1541:
        -: 1542:    _LIBCPP_INLINE_VISIBILITY
        -: 1543:    static allocator_type
        -: 1544:        select_on_container_copy_construction(const allocator_type& __a)
        -: 1545:            {return select_on_container_copy_construction(
        -: 1546:                __has_select_on_container_copy_construction<const allocator_type>(),
        -: 1547:                __a);}
        -: 1548:
        -: 1549:    template <class _Ptr>
        -: 1550:        _LIBCPP_INLINE_VISIBILITY
        -: 1551:        static
        -: 1552:        void
        -: 1553:        __construct_forward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __begin2)
        -: 1554:        {
        -: 1555:            for (; __begin1 != __end1; ++__begin1, ++__begin2)
        -: 1556:                construct(__a, _VSTD::__to_raw_pointer(__begin2), _VSTD::move_if_noexcept(*__begin1));
        -: 1557:        }
        -: 1558:
        -: 1559:    template <class _Tp>
        -: 1560:        _LIBCPP_INLINE_VISIBILITY
        -: 1561:        static
        -: 1562:        typename enable_if
        -: 1563:        <
        -: 1564:            (is_same<allocator_type, allocator<_Tp> >::value
        -: 1565:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1566:             is_trivially_move_constructible<_Tp>::value,
        -: 1567:            void
        -: 1568:        >::type
        -: 1569:        __construct_forward(allocator_type& __a, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)
        -: 1570:        {
        -: 1571:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1572:            if (_Np > 0)
        -: 1573:            {
        -: 1574:                _VSTD::memcpy(__begin2, __begin1, _Np * sizeof(_Tp));
        -: 1575:                __begin2 += _Np;
        -: 1576:            }
        -: 1577:        }
        -: 1578:
        -: 1579:    template <class _Iter, class _Ptr>
        -: 1580:        _LIBCPP_INLINE_VISIBILITY
        -: 1581:        static
        -: 1582:        void
        -: 1583:        __construct_range_forward(allocator_type& __a, _Iter __begin1, _Iter __end1, _Ptr& __begin2)
        -: 1584:        {
        -: 1585:            for (; __begin1 != __end1; ++__begin1, (void) ++__begin2)
        -: 1586:                construct(__a, _VSTD::__to_raw_pointer(__begin2), *__begin1);
        -: 1587:        }
        -: 1588:
        -: 1589:    template <class _Tp>
        -: 1590:        _LIBCPP_INLINE_VISIBILITY
        -: 1591:        static
        -: 1592:        typename enable_if
        -: 1593:        <
        -: 1594:            (is_same<allocator_type, allocator<_Tp> >::value
        -: 1595:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1596:             is_trivially_move_constructible<_Tp>::value,
        -: 1597:            void
        -: 1598:        >::type
        -: 1599:        __construct_range_forward(allocator_type& __a, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)
        -: 1600:        {
        -: 1601:            typedef typename remove_const<_Tp>::type _Vp;
        -: 1602:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1603:            if (_Np > 0)
        -: 1604:            {
        -: 1605:                _VSTD::memcpy(const_cast<_Vp*>(__begin2), __begin1, _Np * sizeof(_Tp));
        -: 1606:                __begin2 += _Np;
        -: 1607:            }
        -: 1608:        }
        -: 1609:
        -: 1610:    template <class _Ptr>
        -: 1611:        _LIBCPP_INLINE_VISIBILITY
        -: 1612:        static
        -: 1613:        void
        -: 1614:        __construct_backward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __end2)
        -: 1615:        {
        -: 1616:            while (__end1 != __begin1)
        -: 1617:            {
        -: 1618:                construct(__a, _VSTD::__to_raw_pointer(__end2-1), _VSTD::move_if_noexcept(*--__end1));
        -: 1619:                --__end2;
        -: 1620:            }
        -: 1621:        }
        -: 1622:
        -: 1623:    template <class _Tp>
        -: 1624:        _LIBCPP_INLINE_VISIBILITY
        -: 1625:        static
        -: 1626:        typename enable_if
        -: 1627:        <
        -: 1628:            (is_same<allocator_type, allocator<_Tp> >::value
        -: 1629:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1630:             is_trivially_move_constructible<_Tp>::value,
        -: 1631:            void
        -: 1632:        >::type
        -: 1633:        __construct_backward(allocator_type& __a, _Tp* __begin1, _Tp* __end1, _Tp*& __end2)
        -: 1634:        {
        -: 1635:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1636:            __end2 -= _Np;
        -: 1637:            if (_Np > 0)
        -: 1638:                _VSTD::memcpy(__end2, __begin1, _Np * sizeof(_Tp));
        -: 1639:        }
        -: 1640:
        -: 1641:private:
        -: 1642:
        -: 1643:    _LIBCPP_INLINE_VISIBILITY
        -: 1644:    static pointer allocate(allocator_type& __a, size_type __n,
        -: 1645:        const_void_pointer __hint, true_type)
        -: 1646:        {return __a.allocate(__n, __hint);}
        -: 1647:    _LIBCPP_INLINE_VISIBILITY
        -: 1648:    static pointer allocate(allocator_type& __a, size_type __n,
        -: 1649:        const_void_pointer, false_type)
        -: 1650:        {return __a.allocate(__n);}
        -: 1651:
        -: 1652:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1653:    template <class _Tp, class... _Args>
        -: 1654:        _LIBCPP_INLINE_VISIBILITY
        -: 1655:        static void __construct(true_type, allocator_type& __a, _Tp* __p, _Args&&... __args)
        -: 1656:            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}
        -: 1657:    template <class _Tp, class... _Args>
        -: 1658:        _LIBCPP_INLINE_VISIBILITY
        -: 1659:        static void __construct(false_type, allocator_type&, _Tp* __p, _Args&&... __args)
        -: 1660:            {
        -: 1661:                ::new ((void*)__p) _Tp(_VSTD::forward<_Args>(__args)...);
        -: 1662:            }
        -: 1663:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1664:
        -: 1665:    template <class _Tp>
        -: 1666:        _LIBCPP_INLINE_VISIBILITY
        -: 1667:        static void __destroy(true_type, allocator_type& __a, _Tp* __p)
        -: 1668:            {__a.destroy(__p);}
        -: 1669:    template <class _Tp>
        -: 1670:        _LIBCPP_INLINE_VISIBILITY
        -: 1671:        static void __destroy(false_type, allocator_type&, _Tp* __p)
        -: 1672:            {
        -: 1673:                __p->~_Tp();
        -: 1674:            }
        -: 1675:
        -: 1676:    _LIBCPP_INLINE_VISIBILITY
        -: 1677:    static size_type __max_size(true_type, const allocator_type& __a)
    #####: 1678:            {return __a.max_size();}
        -: 1679:    _LIBCPP_INLINE_VISIBILITY
        -: 1680:    static size_type __max_size(false_type, const allocator_type&)
        -: 1681:            {return numeric_limits<size_type>::max();}
        -: 1682:
        -: 1683:    _LIBCPP_INLINE_VISIBILITY
        -: 1684:    static allocator_type
        -: 1685:        select_on_container_copy_construction(true_type, const allocator_type& __a)
        -: 1686:            {return __a.select_on_container_copy_construction();}
        -: 1687:    _LIBCPP_INLINE_VISIBILITY
        -: 1688:    static allocator_type
        -: 1689:        select_on_container_copy_construction(false_type, const allocator_type& __a)
        -: 1690:            {return __a;}
        -: 1691:};
        -: 1692:
        -: 1693:template <class _Traits, class _Tp>
        -: 1694:struct __rebind_alloc_helper
        -: 1695:{
        -: 1696:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1697:    typedef typename _Traits::template rebind_alloc<_Tp>        type;
        -: 1698:#else
        -: 1699:    typedef typename _Traits::template rebind_alloc<_Tp>::other type;
        -: 1700:#endif
        -: 1701:};
        -: 1702:
        -: 1703:// allocator
        -: 1704:
        -: 1705:template <class _Tp>
        -: 1706:class _LIBCPP_TYPE_VIS_ONLY allocator
        -: 1707:{
        -: 1708:public:
        -: 1709:    typedef size_t            size_type;
        -: 1710:    typedef ptrdiff_t         difference_type;
        -: 1711:    typedef _Tp*              pointer;
        -: 1712:    typedef const _Tp*        const_pointer;
        -: 1713:    typedef _Tp&              reference;
        -: 1714:    typedef const _Tp&        const_reference;
        -: 1715:    typedef _Tp               value_type;
        -: 1716:
        -: 1717:    typedef true_type propagate_on_container_move_assignment;
        -: 1718:    typedef true_type is_always_equal;
        -: 1719:
        -: 1720:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1721:
        6: 1722:    _LIBCPP_INLINE_VISIBILITY allocator() _NOEXCEPT {}
        -: 1723:    template <class _Up> _LIBCPP_INLINE_VISIBILITY allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1724:    _LIBCPP_INLINE_VISIBILITY pointer address(reference __x) const _NOEXCEPT
        -: 1725:        {return _VSTD::addressof(__x);}
        -: 1726:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1727:        {return _VSTD::addressof(__x);}
        -: 1728:    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
    #####: 1729:        {return static_cast<pointer>(_VSTD::__allocate(__n * sizeof(_Tp)));}
        -: 1730:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT
        -: 1731:        {_VSTD::__deallocate((void*)__p);}
        -: 1732:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
    #####: 1733:        {return size_type(~0) / sizeof(_Tp);}
        -: 1734:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1735:    template <class _Up, class... _Args>
        -: 1736:        _LIBCPP_INLINE_VISIBILITY
        -: 1737:        void
        -: 1738:        construct(_Up* __p, _Args&&... __args)
        -: 1739:        {
        -: 1740:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1741:        }
        -: 1742:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1743:        _LIBCPP_INLINE_VISIBILITY
        -: 1744:        void
        -: 1745:        construct(pointer __p)
        -: 1746:        {
        -: 1747:            ::new((void*)__p) _Tp();
        -: 1748:        }
        -: 1749:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1750:
        -: 1751:    template <class _A0>
        -: 1752:        _LIBCPP_INLINE_VISIBILITY
        -: 1753:        void
        -: 1754:        construct(pointer __p, _A0& __a0)
        -: 1755:        {
        -: 1756:            ::new((void*)__p) _Tp(__a0);
        -: 1757:        }
        -: 1758:    template <class _A0>
        -: 1759:        _LIBCPP_INLINE_VISIBILITY
        -: 1760:        void
        -: 1761:        construct(pointer __p, const _A0& __a0)
        -: 1762:        {
        -: 1763:            ::new((void*)__p) _Tp(__a0);
        -: 1764:        }
        -: 1765:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1766:    template <class _A0, class _A1>
        -: 1767:        _LIBCPP_INLINE_VISIBILITY
        -: 1768:        void
        -: 1769:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 1770:        {
        -: 1771:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1772:        }
        -: 1773:    template <class _A0, class _A1>
        -: 1774:        _LIBCPP_INLINE_VISIBILITY
        -: 1775:        void
        -: 1776:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 1777:        {
        -: 1778:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1779:        }
        -: 1780:    template <class _A0, class _A1>
        -: 1781:        _LIBCPP_INLINE_VISIBILITY
        -: 1782:        void
        -: 1783:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 1784:        {
        -: 1785:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1786:        }
        -: 1787:    template <class _A0, class _A1>
        -: 1788:        _LIBCPP_INLINE_VISIBILITY
        -: 1789:        void
        -: 1790:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 1791:        {
        -: 1792:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1793:        }
        -: 1794:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1795:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1796:};
        -: 1797:
        -: 1798:template <class _Tp>
        -: 1799:class _LIBCPP_TYPE_VIS_ONLY allocator<const _Tp>
        -: 1800:{
        -: 1801:public:
        -: 1802:    typedef size_t            size_type;
        -: 1803:    typedef ptrdiff_t         difference_type;
        -: 1804:    typedef const _Tp*        pointer;
        -: 1805:    typedef const _Tp*        const_pointer;
        -: 1806:    typedef const _Tp&        reference;
        -: 1807:    typedef const _Tp&        const_reference;
        -: 1808:    typedef const _Tp         value_type;
        -: 1809:
        -: 1810:    typedef true_type propagate_on_container_move_assignment;
        -: 1811:    typedef true_type is_always_equal;
        -: 1812:
        -: 1813:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1814:
        -: 1815:    _LIBCPP_INLINE_VISIBILITY allocator() _NOEXCEPT {}
        -: 1816:    template <class _Up> _LIBCPP_INLINE_VISIBILITY allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1817:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1818:        {return _VSTD::addressof(__x);}
        -: 1819:    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
        -: 1820:        {return static_cast<pointer>(_VSTD::__allocate(__n * sizeof(_Tp)));}
        -: 1821:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT
        -: 1822:        {_VSTD::__deallocate((void*)__p);}
        -: 1823:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
        -: 1824:        {return size_type(~0) / sizeof(_Tp);}
        -: 1825:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1826:    template <class _Up, class... _Args>
        -: 1827:        _LIBCPP_INLINE_VISIBILITY
        -: 1828:        void
        -: 1829:        construct(_Up* __p, _Args&&... __args)
        -: 1830:        {
        -: 1831:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1832:        }
        -: 1833:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1834:        _LIBCPP_INLINE_VISIBILITY
        -: 1835:        void
        -: 1836:        construct(pointer __p)
        -: 1837:        {
        -: 1838:            ::new((void*)__p) _Tp();
        -: 1839:        }
        -: 1840:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1841:
        -: 1842:    template <class _A0>
        -: 1843:        _LIBCPP_INLINE_VISIBILITY
        -: 1844:        void
        -: 1845:        construct(pointer __p, _A0& __a0)
        -: 1846:        {
        -: 1847:            ::new((void*)__p) _Tp(__a0);
        -: 1848:        }
        -: 1849:    template <class _A0>
        -: 1850:        _LIBCPP_INLINE_VISIBILITY
        -: 1851:        void
        -: 1852:        construct(pointer __p, const _A0& __a0)
        -: 1853:        {
        -: 1854:            ::new((void*)__p) _Tp(__a0);
        -: 1855:        }
        -: 1856:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1857:    template <class _A0, class _A1>
        -: 1858:        _LIBCPP_INLINE_VISIBILITY
        -: 1859:        void
        -: 1860:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 1861:        {
        -: 1862:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1863:        }
        -: 1864:    template <class _A0, class _A1>
        -: 1865:        _LIBCPP_INLINE_VISIBILITY
        -: 1866:        void
        -: 1867:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 1868:        {
        -: 1869:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1870:        }
        -: 1871:    template <class _A0, class _A1>
        -: 1872:        _LIBCPP_INLINE_VISIBILITY
        -: 1873:        void
        -: 1874:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 1875:        {
        -: 1876:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1877:        }
        -: 1878:    template <class _A0, class _A1>
        -: 1879:        _LIBCPP_INLINE_VISIBILITY
        -: 1880:        void
        -: 1881:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 1882:        {
        -: 1883:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1884:        }
        -: 1885:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1886:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1887:};
        -: 1888:
        -: 1889:template <class _Tp, class _Up>
        -: 1890:inline _LIBCPP_INLINE_VISIBILITY
        -: 1891:bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}
        -: 1892:
        -: 1893:template <class _Tp, class _Up>
        -: 1894:inline _LIBCPP_INLINE_VISIBILITY
        -: 1895:bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}
        -: 1896:
        -: 1897:template <class _OutputIterator, class _Tp>
        -: 1898:class _LIBCPP_TYPE_VIS_ONLY raw_storage_iterator
        -: 1899:    : public iterator<output_iterator_tag,
        -: 1900:                      _Tp,                                         // purposefully not C++03
        -: 1901:                      ptrdiff_t,                                   // purposefully not C++03
        -: 1902:                      _Tp*,                                        // purposefully not C++03
        -: 1903:                      raw_storage_iterator<_OutputIterator, _Tp>&> // purposefully not C++03
        -: 1904:{
        -: 1905:private:
        -: 1906:    _OutputIterator __x_;
        -: 1907:public:
        -: 1908:    _LIBCPP_INLINE_VISIBILITY explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}
        -: 1909:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator*() {return *this;}
        -: 1910:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(const _Tp& __element)
        -: 1911:        {::new(&*__x_) _Tp(__element); return *this;}
        -: 1912:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator++() {++__x_; return *this;}
        -: 1913:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator  operator++(int)
        -: 1914:        {raw_storage_iterator __t(*this); ++__x_; return __t;}
        -: 1915:#if _LIBCPP_STD_VER >= 14
        -: 1916:    _LIBCPP_INLINE_VISIBILITY _OutputIterator base() const { return __x_; } 
        -: 1917:#endif
        -: 1918:};
        -: 1919:
        -: 1920:template <class _Tp>
        -: 1921:pair<_Tp*, ptrdiff_t>
        -: 1922:get_temporary_buffer(ptrdiff_t __n) _NOEXCEPT
        -: 1923:{
        -: 1924:    pair<_Tp*, ptrdiff_t> __r(0, 0);
        -: 1925:    const ptrdiff_t __m = (~ptrdiff_t(0) ^
        -: 1926:                           ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * __CHAR_BIT__ - 1)))
        -: 1927:                           / sizeof(_Tp);
        -: 1928:    if (__n > __m)
        -: 1929:        __n = __m;
        -: 1930:    while (__n > 0)
        -: 1931:    {
        -: 1932:        __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));
        -: 1933:        if (__r.first)
        -: 1934:        {
        -: 1935:            __r.second = __n;
        -: 1936:            break;
        -: 1937:        }
        -: 1938:        __n /= 2;
        -: 1939:    }
        -: 1940:    return __r;
        -: 1941:}
        -: 1942:
        -: 1943:template <class _Tp>
        -: 1944:inline _LIBCPP_INLINE_VISIBILITY
        -: 1945:void return_temporary_buffer(_Tp* __p) _NOEXCEPT {::operator delete(__p);}
        -: 1946:
        -: 1947:template <class _Tp>
        -: 1948:struct auto_ptr_ref
        -: 1949:{
        -: 1950:    _Tp* __ptr_;
        -: 1951:};
        -: 1952:
        -: 1953:template<class _Tp>
        -: 1954:class _LIBCPP_TYPE_VIS_ONLY auto_ptr
        -: 1955:{
        -: 1956:private:
        -: 1957:    _Tp* __ptr_;
        -: 1958:public:
        -: 1959:    typedef _Tp element_type;
        -: 1960:
        -: 1961:    _LIBCPP_INLINE_VISIBILITY explicit auto_ptr(_Tp* __p = 0) throw() : __ptr_(__p) {}
        -: 1962:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr& __p) throw() : __ptr_(__p.release()) {}
        -: 1963:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr<_Up>& __p) throw()
        -: 1964:        : __ptr_(__p.release()) {}
        -: 1965:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr& __p) throw()
        -: 1966:        {reset(__p.release()); return *this;}
        -: 1967:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr<_Up>& __p) throw()
        -: 1968:        {reset(__p.release()); return *this;}
        -: 1969:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr_ref<_Tp> __p) throw()
        -: 1970:        {reset(__p.__ptr_); return *this;}
        -: 1971:    _LIBCPP_INLINE_VISIBILITY ~auto_ptr() throw() {delete __ptr_;}
        -: 1972:
        -: 1973:    _LIBCPP_INLINE_VISIBILITY _Tp& operator*() const throw()
        -: 1974:        {return *__ptr_;}
        -: 1975:    _LIBCPP_INLINE_VISIBILITY _Tp* operator->() const throw() {return __ptr_;}
        -: 1976:    _LIBCPP_INLINE_VISIBILITY _Tp* get() const throw() {return __ptr_;}
        -: 1977:    _LIBCPP_INLINE_VISIBILITY _Tp* release() throw()
        -: 1978:    {
        -: 1979:        _Tp* __t = __ptr_;
        -: 1980:        __ptr_ = 0;
        -: 1981:        return __t;
        -: 1982:    }
        -: 1983:    _LIBCPP_INLINE_VISIBILITY void reset(_Tp* __p = 0) throw()
        -: 1984:    {
        -: 1985:        if (__ptr_ != __p)
        -: 1986:            delete __ptr_;
        -: 1987:        __ptr_ = __p;
        -: 1988:    }
        -: 1989:
        -: 1990:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr_ref<_Tp> __p) throw() : __ptr_(__p.__ptr_) {}
        -: 1991:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr_ref<_Up>() throw()
        -: 1992:        {auto_ptr_ref<_Up> __t; __t.__ptr_ = release(); return __t;}
        -: 1993:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr<_Up>() throw()
        -: 1994:        {return auto_ptr<_Up>(release());}
        -: 1995:};
        -: 1996:
        -: 1997:template <>
        -: 1998:class _LIBCPP_TYPE_VIS_ONLY auto_ptr<void>
        -: 1999:{
        -: 2000:public:
        -: 2001:    typedef void element_type;
        -: 2002:};
        -: 2003:
        -: 2004:template <class _T1, class _T2, bool = is_same<typename remove_cv<_T1>::type,
        -: 2005:                                                     typename remove_cv<_T2>::type>::value,
        -: 2006:                                bool = is_empty<_T1>::value
        -: 2007:                                       && !__libcpp_is_final<_T1>::value,
        -: 2008:                                bool = is_empty<_T2>::value
        -: 2009:                                       && !__libcpp_is_final<_T2>::value
        -: 2010:         >
        -: 2011:struct __libcpp_compressed_pair_switch;
        -: 2012:
        -: 2013:template <class _T1, class _T2, bool IsSame>
        -: 2014:struct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, false, false> {enum {value = 0};};
        -: 2015:
        -: 2016:template <class _T1, class _T2, bool IsSame>
        -: 2017:struct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, true, false>  {enum {value = 1};};
        -: 2018:
        -: 2019:template <class _T1, class _T2, bool IsSame>
        -: 2020:struct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, false, true>  {enum {value = 2};};
        -: 2021:
        -: 2022:template <class _T1, class _T2>
        -: 2023:struct __libcpp_compressed_pair_switch<_T1, _T2, false, true, true>    {enum {value = 3};};
        -: 2024:
        -: 2025:template <class _T1, class _T2>
        -: 2026:struct __libcpp_compressed_pair_switch<_T1, _T2, true, true, true>     {enum {value = 1};};
        -: 2027:
        -: 2028:template <class _T1, class _T2, unsigned = __libcpp_compressed_pair_switch<_T1, _T2>::value>
        -: 2029:class __libcpp_compressed_pair_imp;
        -: 2030:
        -: 2031:template <class _T1, class _T2>
        -: 2032:class __libcpp_compressed_pair_imp<_T1, _T2, 0>
        -: 2033:{
        -: 2034:private:
        -: 2035:    _T1 __first_;
        -: 2036:    _T2 __second_;
        -: 2037:public:
        -: 2038:    typedef _T1 _T1_param;
        -: 2039:    typedef _T2 _T2_param;
        -: 2040:
        -: 2041:    typedef typename remove_reference<_T1>::type& _T1_reference;
        -: 2042:    typedef typename remove_reference<_T2>::type& _T2_reference;
        -: 2043:
        -: 2044:    typedef const typename remove_reference<_T1>::type& _T1_const_reference;
        -: 2045:    typedef const typename remove_reference<_T2>::type& _T2_const_reference;
        -: 2046:
        -: 2047:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() : __first_(), __second_() {}
        -: 2048:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2049:        : __first_(_VSTD::forward<_T1_param>(__t1)), __second_() {}
        -: 2050:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 2051:        : __first_(), __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2052:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2053:        : __first_(_VSTD::forward<_T1_param>(__t1)), __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2054:
        -: 2055:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2056:
        -: 2057:    _LIBCPP_INLINE_VISIBILITY
        -: 2058:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2059:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2060:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2061:        : __first_(__p.first()),
        -: 2062:          __second_(__p.second()) {}
        -: 2063:
        -: 2064:    _LIBCPP_INLINE_VISIBILITY
        -: 2065:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2066:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2067:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2068:        {
        -: 2069:            __first_ = __p.first();
        -: 2070:            __second_ = __p.second();
        -: 2071:            return *this;
        -: 2072:        }
        -: 2073:
        -: 2074:    _LIBCPP_INLINE_VISIBILITY
        -: 2075:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2076:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2077:                   is_nothrow_move_constructible<_T2>::value)
        -: 2078:        : __first_(_VSTD::forward<_T1>(__p.first())),
        -: 2079:          __second_(_VSTD::forward<_T2>(__p.second())) {}
        -: 2080:
        -: 2081:    _LIBCPP_INLINE_VISIBILITY
        -: 2082:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2083:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2084:                   is_nothrow_move_assignable<_T2>::value)
        -: 2085:        {
        -: 2086:            __first_ = _VSTD::forward<_T1>(__p.first());
        -: 2087:            __second_ = _VSTD::forward<_T2>(__p.second());
        -: 2088:            return *this;
        -: 2089:        }
        -: 2090:
        -: 2091:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2092:
        -: 2093:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2094:
        -: 2095:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2096:        _LIBCPP_INLINE_VISIBILITY
        -: 2097:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2098:                                     tuple<_Args1...> __first_args,
        -: 2099:                                     tuple<_Args2...> __second_args,
        -: 2100:                                     __tuple_indices<_I1...>,
        -: 2101:                                     __tuple_indices<_I2...>)
        -: 2102:            : __first_(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),
        -: 2103:              __second_(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)
        -: 2104:            {}
        -: 2105:
        -: 2106:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2107:
        -: 2108:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return __first_;}
        -: 2109:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return __first_;}
        -: 2110:
        -: 2111:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return __second_;}
        -: 2112:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return __second_;}
        -: 2113:
        -: 2114:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)
        -: 2115:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2116:                   __is_nothrow_swappable<_T2>::value)
        -: 2117:    {
        -: 2118:        using _VSTD::swap;
        -: 2119:        swap(__first_, __x.__first_);
        -: 2120:        swap(__second_, __x.__second_);
        -: 2121:    }
        -: 2122:};
        -: 2123:
        -: 2124:template <class _T1, class _T2>
        -: 2125:class __libcpp_compressed_pair_imp<_T1, _T2, 1>
        -: 2126:    : private _T1
        -: 2127:{
        -: 2128:private:
        -: 2129:    _T2 __second_;
        -: 2130:public:
        -: 2131:    typedef _T1 _T1_param;
        -: 2132:    typedef _T2 _T2_param;
        -: 2133:
        -: 2134:    typedef _T1&                                        _T1_reference;
        -: 2135:    typedef typename remove_reference<_T2>::type& _T2_reference;
        -: 2136:
        -: 2137:    typedef const _T1&                                        _T1_const_reference;
        -: 2138:    typedef const typename remove_reference<_T2>::type& _T2_const_reference;
        -: 2139:
        -: 2140:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() : __second_() {}
        -: 2141:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2142:        : _T1(_VSTD::forward<_T1_param>(__t1)), __second_() {}
        -: 2143:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 2144:        : __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2145:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2146:        : _T1(_VSTD::forward<_T1_param>(__t1)), __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2147:
        -: 2148:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2149:
        -: 2150:    _LIBCPP_INLINE_VISIBILITY
        -: 2151:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2152:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2153:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2154:        : _T1(__p.first()), __second_(__p.second()) {}
        -: 2155:
        -: 2156:    _LIBCPP_INLINE_VISIBILITY
        -: 2157:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2158:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2159:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2160:        {
        -: 2161:            _T1::operator=(__p.first());
        -: 2162:            __second_ = __p.second();
        -: 2163:            return *this;
        -: 2164:        }
        -: 2165:
        -: 2166:    _LIBCPP_INLINE_VISIBILITY
        -: 2167:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2168:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2169:                   is_nothrow_move_constructible<_T2>::value)
        -: 2170:        : _T1(_VSTD::move(__p.first())), __second_(_VSTD::forward<_T2>(__p.second())) {}
        -: 2171:
        -: 2172:    _LIBCPP_INLINE_VISIBILITY
        -: 2173:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2174:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2175:                   is_nothrow_move_assignable<_T2>::value)
        -: 2176:        {
        -: 2177:            _T1::operator=(_VSTD::move(__p.first()));
        -: 2178:            __second_ = _VSTD::forward<_T2>(__p.second());
        -: 2179:            return *this;
        -: 2180:        }
        -: 2181:
        -: 2182:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2183:
        -: 2184:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2185:
        -: 2186:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2187:        _LIBCPP_INLINE_VISIBILITY
        -: 2188:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2189:                                     tuple<_Args1...> __first_args,
        -: 2190:                                     tuple<_Args2...> __second_args,
        -: 2191:                                     __tuple_indices<_I1...>,
        -: 2192:                                     __tuple_indices<_I2...>)
        -: 2193:            : _T1(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),
        -: 2194:              __second_(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)
        -: 2195:            {}
        -: 2196:
        -: 2197:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2198:
        -: 2199:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return *this;}
        -: 2200:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return *this;}
        -: 2201:
        -: 2202:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return __second_;}
        -: 2203:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return __second_;}
        -: 2204:
        -: 2205:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)
        -: 2206:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2207:                   __is_nothrow_swappable<_T2>::value)
        -: 2208:    {
        -: 2209:        using _VSTD::swap;
        -: 2210:        swap(__second_, __x.__second_);
        -: 2211:    }
        -: 2212:};
        -: 2213:
        -: 2214:template <class _T1, class _T2>
        -: 2215:class __libcpp_compressed_pair_imp<_T1, _T2, 2>
        -: 2216:    : private _T2
        -: 2217:{
        -: 2218:private:
        -: 2219:    _T1 __first_;
        -: 2220:public:
        -: 2221:    typedef _T1 _T1_param;
        -: 2222:    typedef _T2 _T2_param;
        -: 2223:
        -: 2224:    typedef typename remove_reference<_T1>::type& _T1_reference;
        -: 2225:    typedef _T2&                                        _T2_reference;
        -: 2226:
        -: 2227:    typedef const typename remove_reference<_T1>::type& _T1_const_reference;
        -: 2228:    typedef const _T2&                                        _T2_const_reference;
        -: 2229:
        6: 2230:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() : __first_() {}
        -: 2231:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2232:        : __first_(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2233:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
    #####: 2234:        : _T2(_VSTD::forward<_T2_param>(__t2)), __first_() {}
        -: 2235:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2236:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2237:                   is_nothrow_move_constructible<_T2>::value)
        -: 2238:        : _T2(_VSTD::forward<_T2_param>(__t2)), __first_(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2239:
        -: 2240:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2241:
        -: 2242:    _LIBCPP_INLINE_VISIBILITY
        -: 2243:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2244:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2245:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2246:        : _T2(__p.second()), __first_(__p.first()) {}
        -: 2247:
        -: 2248:    _LIBCPP_INLINE_VISIBILITY
        -: 2249:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2250:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2251:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2252:        {
        -: 2253:            _T2::operator=(__p.second());
        -: 2254:            __first_ = __p.first();
        -: 2255:            return *this;
        -: 2256:        }
        -: 2257:
        -: 2258:    _LIBCPP_INLINE_VISIBILITY
        -: 2259:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2260:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2261:                   is_nothrow_move_constructible<_T2>::value)
        -: 2262:        : _T2(_VSTD::forward<_T2>(__p.second())), __first_(_VSTD::move(__p.first())) {}
        -: 2263:
        -: 2264:    _LIBCPP_INLINE_VISIBILITY
        -: 2265:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2266:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2267:                   is_nothrow_move_assignable<_T2>::value)
        -: 2268:        {
        -: 2269:            _T2::operator=(_VSTD::forward<_T2>(__p.second()));
        -: 2270:            __first_ = _VSTD::move(__p.first());
        -: 2271:            return *this;
        -: 2272:        }
        -: 2273:
        -: 2274:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2275:
        -: 2276:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2277:
        -: 2278:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2279:        _LIBCPP_INLINE_VISIBILITY
        -: 2280:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2281:                                     tuple<_Args1...> __first_args,
        -: 2282:                                     tuple<_Args2...> __second_args,
        -: 2283:                                     __tuple_indices<_I1...>,
        -: 2284:                                     __tuple_indices<_I2...>)
        -: 2285:            : _T2(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...),
        -: 2286:              __first_(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...)
        -: 2287:              
        -: 2288:            {}
        -: 2289:
        -: 2290:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2291:
    #####: 2292:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return __first_;}
    #####: 2293:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return __first_;}
        -: 2294:
    #####: 2295:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return *this;}
    #####: 2296:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return *this;}
        -: 2297:
        -: 2298:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)
        -: 2299:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2300:                   __is_nothrow_swappable<_T2>::value)
        -: 2301:    {
        -: 2302:        using _VSTD::swap;
        -: 2303:        swap(__first_, __x.__first_);
        -: 2304:    }
        -: 2305:};
        -: 2306:
        -: 2307:template <class _T1, class _T2>
        -: 2308:class __libcpp_compressed_pair_imp<_T1, _T2, 3>
        -: 2309:    : private _T1,
        -: 2310:      private _T2
        -: 2311:{
        -: 2312:public:
        -: 2313:    typedef _T1 _T1_param;
        -: 2314:    typedef _T2 _T2_param;
        -: 2315:
        -: 2316:    typedef _T1& _T1_reference;
        -: 2317:    typedef _T2& _T2_reference;
        -: 2318:
        -: 2319:    typedef const _T1& _T1_const_reference;
        -: 2320:    typedef const _T2& _T2_const_reference;
        -: 2321:
        -: 2322:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() {}
        -: 2323:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2324:        : _T1(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2325:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 2326:        : _T2(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2327:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2328:        : _T1(_VSTD::forward<_T1_param>(__t1)), _T2(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2329:
        -: 2330:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2331:
        -: 2332:    _LIBCPP_INLINE_VISIBILITY
        -: 2333:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2334:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2335:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2336:        : _T1(__p.first()), _T2(__p.second()) {}
        -: 2337:
        -: 2338:    _LIBCPP_INLINE_VISIBILITY
        -: 2339:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2340:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2341:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2342:        {
        -: 2343:            _T1::operator=(__p.first());
        -: 2344:            _T2::operator=(__p.second());
        -: 2345:            return *this;
        -: 2346:        }
        -: 2347:
        -: 2348:    _LIBCPP_INLINE_VISIBILITY
        -: 2349:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2350:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2351:                   is_nothrow_move_constructible<_T2>::value)
        -: 2352:        : _T1(_VSTD::move(__p.first())), _T2(_VSTD::move(__p.second())) {}
        -: 2353:
        -: 2354:    _LIBCPP_INLINE_VISIBILITY
        -: 2355:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2356:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2357:                   is_nothrow_move_assignable<_T2>::value)
        -: 2358:        {
        -: 2359:            _T1::operator=(_VSTD::move(__p.first()));
        -: 2360:            _T2::operator=(_VSTD::move(__p.second()));
        -: 2361:            return *this;
        -: 2362:        }
        -: 2363:
        -: 2364:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2365:
        -: 2366:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2367:
        -: 2368:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2369:        _LIBCPP_INLINE_VISIBILITY
        -: 2370:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2371:                                     tuple<_Args1...> __first_args,
        -: 2372:                                     tuple<_Args2...> __second_args,
        -: 2373:                                     __tuple_indices<_I1...>,
        -: 2374:                                     __tuple_indices<_I2...>)
        -: 2375:            : _T1(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),
        -: 2376:              _T2(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)
        -: 2377:            {}
        -: 2378:
        -: 2379:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2380:
        -: 2381:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return *this;}
        -: 2382:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return *this;}
        -: 2383:
        -: 2384:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return *this;}
        -: 2385:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return *this;}
        -: 2386:
        -: 2387:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp&)
        -: 2388:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2389:                   __is_nothrow_swappable<_T2>::value)
        -: 2390:    {
        -: 2391:    }
        -: 2392:};
        -: 2393:
        -: 2394:template <class _T1, class _T2>
        -: 2395:class __compressed_pair
        -: 2396:    : private __libcpp_compressed_pair_imp<_T1, _T2>
        -: 2397:{
        -: 2398:    typedef __libcpp_compressed_pair_imp<_T1, _T2> base;
        -: 2399:public:
        -: 2400:    typedef typename base::_T1_param _T1_param;
        -: 2401:    typedef typename base::_T2_param _T2_param;
        -: 2402:
        -: 2403:    typedef typename base::_T1_reference _T1_reference;
        -: 2404:    typedef typename base::_T2_reference _T2_reference;
        -: 2405:
        -: 2406:    typedef typename base::_T1_const_reference _T1_const_reference;
        -: 2407:    typedef typename base::_T2_const_reference _T2_const_reference;
        -: 2408:
       12: 2409:    _LIBCPP_INLINE_VISIBILITY __compressed_pair() {}
        -: 2410:    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T1_param __t1)
        -: 2411:        : base(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2412:    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T2_param __t2)
    #####: 2413:        : base(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2414:    _LIBCPP_INLINE_VISIBILITY __compressed_pair(_T1_param __t1, _T2_param __t2)
        -: 2415:        : base(_VSTD::forward<_T1_param>(__t1), _VSTD::forward<_T2_param>(__t2)) {}
        -: 2416:
        -: 2417:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2418:
        -: 2419:    _LIBCPP_INLINE_VISIBILITY
        -: 2420:    __compressed_pair(const __compressed_pair& __p)
        -: 2421:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2422:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2423:        : base(__p) {}
        -: 2424:
        -: 2425:    _LIBCPP_INLINE_VISIBILITY
        -: 2426:    __compressed_pair& operator=(const __compressed_pair& __p)
        -: 2427:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2428:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2429:        {
        -: 2430:            base::operator=(__p);
        -: 2431:            return *this;
        -: 2432:        }
        -: 2433:
        -: 2434:    _LIBCPP_INLINE_VISIBILITY
        -: 2435:    __compressed_pair(__compressed_pair&& __p)
        -: 2436:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2437:                   is_nothrow_move_constructible<_T2>::value)
        -: 2438:        : base(_VSTD::move(__p)) {}
        -: 2439:
        -: 2440:    _LIBCPP_INLINE_VISIBILITY
        -: 2441:    __compressed_pair& operator=(__compressed_pair&& __p)
        -: 2442:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2443:                   is_nothrow_move_assignable<_T2>::value)
        -: 2444:        {
        -: 2445:            base::operator=(_VSTD::move(__p));
        -: 2446:            return *this;
        -: 2447:        }
        -: 2448:
        -: 2449:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2450:
        -: 2451:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2452:
        -: 2453:    template <class... _Args1, class... _Args2>
        -: 2454:        _LIBCPP_INLINE_VISIBILITY
        -: 2455:        __compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,
        -: 2456:                                                      tuple<_Args2...> __second_args)
        -: 2457:            : base(__pc, _VSTD::move(__first_args), _VSTD::move(__second_args),
        -: 2458:                   typename __make_tuple_indices<sizeof...(_Args1)>::type(),
        -: 2459:                   typename __make_tuple_indices<sizeof...(_Args2) >::type())
        -: 2460:            {}
        -: 2461:
        -: 2462:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2463:
    #####: 2464:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return base::first();}
    #####: 2465:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return base::first();}
        -: 2466:
    #####: 2467:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return base::second();}
    #####: 2468:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return base::second();}
        -: 2469:
        -: 2470:    _LIBCPP_INLINE_VISIBILITY void swap(__compressed_pair& __x)
        -: 2471:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2472:                   __is_nothrow_swappable<_T2>::value)
        -: 2473:        {base::swap(__x);}
        -: 2474:};
        -: 2475:
        -: 2476:template <class _T1, class _T2>
        -: 2477:inline _LIBCPP_INLINE_VISIBILITY
        -: 2478:void
        -: 2479:swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)
        -: 2480:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2481:                   __is_nothrow_swappable<_T2>::value)
        -: 2482:    {__x.swap(__y);}
        -: 2483:
        -: 2484:// __same_or_less_cv_qualified
        -: 2485:
        -: 2486:template <class _Ptr1, class _Ptr2,
        -: 2487:          bool = is_same<typename remove_cv<typename pointer_traits<_Ptr1>::element_type>::type,
        -: 2488:                         typename remove_cv<typename pointer_traits<_Ptr2>::element_type>::type
        -: 2489:                        >::value
        -: 2490:         >
        -: 2491:struct __same_or_less_cv_qualified_imp
        -: 2492:    : is_convertible<_Ptr1, _Ptr2> {};
        -: 2493:
        -: 2494:template <class _Ptr1, class _Ptr2>
        -: 2495:struct __same_or_less_cv_qualified_imp<_Ptr1, _Ptr2, false>
        -: 2496:    : false_type {};
        -: 2497:
        -: 2498:template <class _Ptr1, class _Ptr2, bool = is_pointer<_Ptr1>::value ||
        -: 2499:                                           is_same<_Ptr1, _Ptr2>::value ||
        -: 2500:                                           __has_element_type<_Ptr1>::value>
        -: 2501:struct __same_or_less_cv_qualified
        -: 2502:    : __same_or_less_cv_qualified_imp<_Ptr1, _Ptr2> {};
        -: 2503:
        -: 2504:template <class _Ptr1, class _Ptr2>
        -: 2505:struct __same_or_less_cv_qualified<_Ptr1, _Ptr2, false>
        -: 2506:    : false_type {};
        -: 2507:
        -: 2508:// default_delete
        -: 2509:
        -: 2510:template <class _Tp>
        -: 2511:struct _LIBCPP_TYPE_VIS_ONLY default_delete
        -: 2512:{
        -: 2513:#ifndef _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS
        -: 2514:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT = default;
        -: 2515:#else
        -: 2516:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT {}
        -: 2517:#endif
        -: 2518:    template <class _Up>
        -: 2519:        _LIBCPP_INLINE_VISIBILITY default_delete(const default_delete<_Up>&,
        -: 2520:             typename enable_if<is_convertible<_Up*, _Tp*>::value>::type* = 0) _NOEXCEPT {}
        -: 2521:    _LIBCPP_INLINE_VISIBILITY void operator() (_Tp* __ptr) const _NOEXCEPT
        -: 2522:        {
        -: 2523:            static_assert(sizeof(_Tp) > 0, "default_delete can not delete incomplete type");
        -: 2524:            static_assert(!is_void<_Tp>::value, "default_delete can not delete incomplete type");
    #####: 2525:            delete __ptr;
    #####: 2526:        }
        -: 2527:};
        -: 2528:
        -: 2529:template <class _Tp>
        -: 2530:struct _LIBCPP_TYPE_VIS_ONLY default_delete<_Tp[]>
        -: 2531:{
        -: 2532:public:
        -: 2533:#ifndef _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS
        -: 2534:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT = default;
        -: 2535:#else
        -: 2536:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT {}
        -: 2537:#endif
        -: 2538:    template <class _Up>
        -: 2539:        _LIBCPP_INLINE_VISIBILITY default_delete(const default_delete<_Up[]>&,
        -: 2540:             typename enable_if<__same_or_less_cv_qualified<_Up*, _Tp*>::value>::type* = 0) _NOEXCEPT {}
        -: 2541:    template <class _Up>
        -: 2542:        _LIBCPP_INLINE_VISIBILITY
        -: 2543:        void operator() (_Up* __ptr,
        -: 2544:                         typename enable_if<__same_or_less_cv_qualified<_Up*, _Tp*>::value>::type* = 0) const _NOEXCEPT
        -: 2545:        {
        -: 2546:            static_assert(sizeof(_Tp) > 0, "default_delete can not delete incomplete type");
        -: 2547:            static_assert(!is_void<_Tp>::value, "default_delete can not delete incomplete type");
        -: 2548:            delete [] __ptr;
        -: 2549:        }
        -: 2550:};
        -: 2551:
        -: 2552:template <class _Tp, class _Dp = default_delete<_Tp> >
        -: 2553:class _LIBCPP_TYPE_VIS_ONLY unique_ptr
        -: 2554:{
        -: 2555:public:
        -: 2556:    typedef _Tp element_type;
        -: 2557:    typedef _Dp deleter_type;
        -: 2558:    typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2559:private:
        -: 2560:    __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2561:
        -: 2562:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2563:    unique_ptr(unique_ptr&);
        -: 2564:    template <class _Up, class _Ep>
        -: 2565:        unique_ptr(unique_ptr<_Up, _Ep>&);
        -: 2566:    unique_ptr& operator=(unique_ptr&);
        -: 2567:    template <class _Up, class _Ep>
        -: 2568:        unique_ptr& operator=(unique_ptr<_Up, _Ep>&);
        -: 2569:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2570:
        -: 2571:    struct __nat {int __for_bool_;};
        -: 2572:
        -: 2573:    typedef       typename remove_reference<deleter_type>::type& _Dp_reference;
        -: 2574:    typedef const typename remove_reference<deleter_type>::type& _Dp_const_reference;
        -: 2575:public:
        -: 2576:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT
        -: 2577:        : __ptr_(pointer())
        -: 2578:        {
        -: 2579:            static_assert(!is_pointer<deleter_type>::value,
        -: 2580:                "unique_ptr constructed with null function pointer deleter");
        -: 2581:        }
        -: 2582:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT
        -: 2583:        : __ptr_(pointer())
        -: 2584:        {
        -: 2585:            static_assert(!is_pointer<deleter_type>::value,
        -: 2586:                "unique_ptr constructed with null function pointer deleter");
        -: 2587:        }
        -: 2588:    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(pointer __p) _NOEXCEPT
        -: 2589:        : __ptr_(_VSTD::move(__p))
        -: 2590:        {
        -: 2591:            static_assert(!is_pointer<deleter_type>::value,
        -: 2592:                "unique_ptr constructed with null function pointer deleter");
        -: 2593:        }
        -: 2594:
        -: 2595:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2596:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, typename conditional<
        -: 2597:                                        is_reference<deleter_type>::value,
        -: 2598:                                        deleter_type,
        -: 2599:                                        typename add_lvalue_reference<const deleter_type>::type>::type __d)
        -: 2600:             _NOEXCEPT
        -: 2601:        : __ptr_(__p, __d) {}
        -: 2602:
        -: 2603:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, typename remove_reference<deleter_type>::type&& __d)
        -: 2604:             _NOEXCEPT
        -: 2605:        : __ptr_(__p, _VSTD::move(__d))
        -: 2606:        {
        -: 2607:            static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -: 2608:        }
        -: 2609:    _LIBCPP_INLINE_VISIBILITY unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2610:        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}
        -: 2611:    template <class _Up, class _Ep>
        -: 2612:        _LIBCPP_INLINE_VISIBILITY
        -: 2613:        unique_ptr(unique_ptr<_Up, _Ep>&& __u,
        -: 2614:                   typename enable_if
        -: 2615:                      <
        -: 2616:                        !is_array<_Up>::value &&
        -: 2617:                         is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&
        -: 2618:                         is_convertible<_Ep, deleter_type>::value &&
        -: 2619:                         (
        -: 2620:                            !is_reference<deleter_type>::value ||
        -: 2621:                            is_same<deleter_type, _Ep>::value
        -: 2622:                         ),
        -: 2623:                         __nat
        -: 2624:                      >::type = __nat()) _NOEXCEPT
        -: 2625:            : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {}
        -: 2626:
        -: 2627:    template <class _Up>
        -: 2628:        _LIBCPP_INLINE_VISIBILITY unique_ptr(auto_ptr<_Up>&& __p,
        -: 2629:                typename enable_if<
        -: 2630:                                      is_convertible<_Up*, _Tp*>::value &&
        -: 2631:                                      is_same<_Dp, default_delete<_Tp> >::value,
        -: 2632:                                      __nat
        -: 2633:                                  >::type = __nat()) _NOEXCEPT
        -: 2634:            : __ptr_(__p.release())
        -: 2635:            {
        -: 2636:            }
        -: 2637:
        -: 2638:        _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT
        -: 2639:            {
        -: 2640:                reset(__u.release());
        -: 2641:                __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2642:                return *this;
        -: 2643:            }
        -: 2644:
        -: 2645:        template <class _Up, class _Ep>
        -: 2646:            _LIBCPP_INLINE_VISIBILITY
        -: 2647:            typename enable_if
        -: 2648:            <
        -: 2649:                !is_array<_Up>::value &&
        -: 2650:                is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&
        -: 2651:                is_assignable<deleter_type&, _Ep&&>::value,
        -: 2652:                unique_ptr&
        -: 2653:            >::type
        -: 2654:            operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2655:            {
        -: 2656:                reset(__u.release());
        -: 2657:                __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2658:                return *this;
        -: 2659:            }
        -: 2660:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2661:
        -: 2662:    _LIBCPP_INLINE_VISIBILITY operator __rv<unique_ptr>()
        -: 2663:    {
        -: 2664:        return __rv<unique_ptr>(*this);
        -: 2665:    }
        -: 2666:
        -: 2667:    _LIBCPP_INLINE_VISIBILITY unique_ptr(__rv<unique_ptr> __u)
        -: 2668:        : __ptr_(__u->release(), _VSTD::forward<deleter_type>(__u->get_deleter())) {}
        -: 2669:
        -: 2670:    template <class _Up, class _Ep>
        -: 2671:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr<_Up, _Ep> __u)
        -: 2672:    {
        -: 2673:        reset(__u.release());
        -: 2674:        __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2675:        return *this;
        -: 2676:    }
        -: 2677:
        -: 2678:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, deleter_type __d)
        -: 2679:        : __ptr_(_VSTD::move(__p), _VSTD::move(__d)) {}
        -: 2680:
        -: 2681:    template <class _Up>
        -: 2682:        _LIBCPP_INLINE_VISIBILITY
        -: 2683:                typename enable_if<
        -: 2684:                                      is_convertible<_Up*, _Tp*>::value &&
        -: 2685:                                      is_same<_Dp, default_delete<_Tp> >::value,
        -: 2686:                                      unique_ptr&
        -: 2687:                                  >::type
        -: 2688:        operator=(auto_ptr<_Up> __p)
        -: 2689:            {reset(__p.release()); return *this;}
        -: 2690:
        -: 2691:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
    #####: 2692:    _LIBCPP_INLINE_VISIBILITY ~unique_ptr() {reset();}
        -: 2693:
        -: 2694:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(nullptr_t) _NOEXCEPT
        -: 2695:    {
        -: 2696:        reset();
        -: 2697:        return *this;
        -: 2698:    }
        -: 2699:
        -: 2700:    _LIBCPP_INLINE_VISIBILITY typename add_lvalue_reference<_Tp>::type operator*() const
        -: 2701:        {return *__ptr_.first();}
    #####: 2702:    _LIBCPP_INLINE_VISIBILITY pointer operator->() const _NOEXCEPT {return __ptr_.first();}
    #####: 2703:    _LIBCPP_INLINE_VISIBILITY pointer get() const _NOEXCEPT {return __ptr_.first();}
        -: 2704:    _LIBCPP_INLINE_VISIBILITY       _Dp_reference get_deleter() _NOEXCEPT
        -: 2705:        {return __ptr_.second();}
        -: 2706:    _LIBCPP_INLINE_VISIBILITY _Dp_const_reference get_deleter() const _NOEXCEPT
        -: 2707:        {return __ptr_.second();}
        -: 2708:    _LIBCPP_INLINE_VISIBILITY
        -: 2709:        _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT
        -: 2710:        {return __ptr_.first() != nullptr;}
        -: 2711:
        -: 2712:    _LIBCPP_INLINE_VISIBILITY pointer release() _NOEXCEPT
        -: 2713:    {
        -: 2714:        pointer __t = __ptr_.first();
        -: 2715:        __ptr_.first() = pointer();
        -: 2716:        return __t;
        -: 2717:    }
        -: 2718:
        -: 2719:    _LIBCPP_INLINE_VISIBILITY void reset(pointer __p = pointer()) _NOEXCEPT
        -: 2720:    {
    #####: 2721:        pointer __tmp = __ptr_.first();
    #####: 2722:        __ptr_.first() = __p;
    #####: 2723:        if (__tmp)
    #####: 2724:            __ptr_.second()(__tmp);
    #####: 2725:    }
        -: 2726:
        -: 2727:    _LIBCPP_INLINE_VISIBILITY void swap(unique_ptr& __u) _NOEXCEPT
        -: 2728:        {__ptr_.swap(__u.__ptr_);}
        -: 2729:};
        -: 2730:
        -: 2731:template <class _Tp, class _Dp>
        -: 2732:class _LIBCPP_TYPE_VIS_ONLY unique_ptr<_Tp[], _Dp>
        -: 2733:{
        -: 2734:public:
        -: 2735:    typedef _Tp element_type;
        -: 2736:    typedef _Dp deleter_type;
        -: 2737:    typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2738:private:
        -: 2739:    __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2740:
        -: 2741:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2742:    unique_ptr(unique_ptr&);
        -: 2743:    template <class _Up>
        -: 2744:        unique_ptr(unique_ptr<_Up>&);
        -: 2745:    unique_ptr& operator=(unique_ptr&);
        -: 2746:    template <class _Up>
        -: 2747:        unique_ptr& operator=(unique_ptr<_Up>&);
        -: 2748:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2749:
        -: 2750:    struct __nat {int __for_bool_;};
        -: 2751:
        -: 2752:    typedef       typename remove_reference<deleter_type>::type& _Dp_reference;
        -: 2753:    typedef const typename remove_reference<deleter_type>::type& _Dp_const_reference;
        -: 2754:public:
        -: 2755:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT
        -: 2756:        : __ptr_(pointer())
        -: 2757:        {
        -: 2758:            static_assert(!is_pointer<deleter_type>::value,
        -: 2759:                "unique_ptr constructed with null function pointer deleter");
        -: 2760:        }
        -: 2761:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT
        -: 2762:        : __ptr_(pointer())
        -: 2763:        {
        -: 2764:            static_assert(!is_pointer<deleter_type>::value,
        -: 2765:                "unique_ptr constructed with null function pointer deleter");
        -: 2766:        }
        -: 2767:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2768:    template <class _Pp>
        -: 2769:    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(_Pp __p,
        -: 2770:            typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat()) _NOEXCEPT
        -: 2771:        : __ptr_(__p)
        -: 2772:        {
        -: 2773:            static_assert(!is_pointer<deleter_type>::value,
        -: 2774:                "unique_ptr constructed with null function pointer deleter");
        -: 2775:        }
        -: 2776:
        -: 2777:    template <class _Pp>
        -: 2778:    _LIBCPP_INLINE_VISIBILITY unique_ptr(_Pp __p, typename conditional<
        -: 2779:                                       is_reference<deleter_type>::value,
        -: 2780:                                       deleter_type,
        -: 2781:                                       typename add_lvalue_reference<const deleter_type>::type>::type __d,
        -: 2782:                                       typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat())
        -: 2783:             _NOEXCEPT
        -: 2784:        : __ptr_(__p, __d) {}
        -: 2785:
        -: 2786:    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, typename conditional<
        -: 2787:                                       is_reference<deleter_type>::value,
        -: 2788:                                       deleter_type,
        -: 2789:                                       typename add_lvalue_reference<const deleter_type>::type>::type __d)
        -: 2790:             _NOEXCEPT
        -: 2791:        : __ptr_(pointer(), __d) {}
        -: 2792:
        -: 2793:    template <class _Pp>
        -: 2794:    _LIBCPP_INLINE_VISIBILITY unique_ptr(_Pp __p,
        -: 2795:                                         typename remove_reference<deleter_type>::type&& __d,
        -: 2796:                                         typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat())
        -: 2797:             _NOEXCEPT
        -: 2798:        : __ptr_(__p, _VSTD::move(__d))
        -: 2799:        {
        -: 2800:            static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -: 2801:        }
        -: 2802:
        -: 2803:    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, typename remove_reference<deleter_type>::type&& __d)
        -: 2804:             _NOEXCEPT
        -: 2805:        : __ptr_(pointer(), _VSTD::move(__d))
        -: 2806:        {
        -: 2807:            static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -: 2808:        }
        -: 2809:
        -: 2810:    _LIBCPP_INLINE_VISIBILITY unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2811:        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}
        -: 2812:
        -: 2813:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT
        -: 2814:        {
        -: 2815:            reset(__u.release());
        -: 2816:            __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2817:            return *this;
        -: 2818:        }
        -: 2819:
        -: 2820:    template <class _Up, class _Ep>
        -: 2821:        _LIBCPP_INLINE_VISIBILITY
        -: 2822:        unique_ptr(unique_ptr<_Up, _Ep>&& __u,
        -: 2823:                   typename enable_if
        -: 2824:                            <
        -: 2825:                                is_array<_Up>::value &&
        -: 2826:                                __same_or_less_cv_qualified<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value
        -: 2827:                                && is_convertible<_Ep, deleter_type>::value &&
        -: 2828:                                (
        -: 2829:                                    !is_reference<deleter_type>::value ||
        -: 2830:                                    is_same<deleter_type, _Ep>::value
        -: 2831:                                ),
        -: 2832:                                __nat
        -: 2833:                            >::type = __nat()
        -: 2834:                  ) _NOEXCEPT
        -: 2835:        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}
        -: 2836:
        -: 2837:
        -: 2838:        template <class _Up, class _Ep>
        -: 2839:            _LIBCPP_INLINE_VISIBILITY
        -: 2840:            typename enable_if
        -: 2841:            <
        -: 2842:                is_array<_Up>::value &&
        -: 2843:                __same_or_less_cv_qualified<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&
        -: 2844:                is_assignable<deleter_type&, _Ep&&>::value,
        -: 2845:                unique_ptr&
        -: 2846:            >::type
        -: 2847:            operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2848:            {
        -: 2849:                reset(__u.release());
        -: 2850:                __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2851:                return *this;
        -: 2852:            }
        -: 2853:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2854:
        -: 2855:    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(pointer __p)
        -: 2856:        : __ptr_(__p)
        -: 2857:        {
        -: 2858:            static_assert(!is_pointer<deleter_type>::value,
        -: 2859:                "unique_ptr constructed with null function pointer deleter");
        -: 2860:        }
        -: 2861:
        -: 2862:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, deleter_type __d)
        -: 2863:        : __ptr_(__p, _VSTD::forward<deleter_type>(__d)) {}
        -: 2864:
        -: 2865:    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, deleter_type __d)
        -: 2866:        : __ptr_(pointer(), _VSTD::forward<deleter_type>(__d)) {}
        -: 2867:
        -: 2868:    _LIBCPP_INLINE_VISIBILITY operator __rv<unique_ptr>()
        -: 2869:    {
        -: 2870:        return __rv<unique_ptr>(*this);
        -: 2871:    }
        -: 2872:
        -: 2873:    _LIBCPP_INLINE_VISIBILITY unique_ptr(__rv<unique_ptr> __u)
        -: 2874:        : __ptr_(__u->release(), _VSTD::forward<deleter_type>(__u->get_deleter())) {}
        -: 2875:
        -: 2876:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(__rv<unique_ptr> __u)
        -: 2877:    {
        -: 2878:        reset(__u->release());
        -: 2879:        __ptr_.second() = _VSTD::forward<deleter_type>(__u->get_deleter());
        -: 2880:        return *this;
        -: 2881:    }
        -: 2882:
        -: 2883:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2884:    _LIBCPP_INLINE_VISIBILITY ~unique_ptr() {reset();}
        -: 2885:
        -: 2886:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(nullptr_t) _NOEXCEPT
        -: 2887:    {
        -: 2888:        reset();
        -: 2889:        return *this;
        -: 2890:    }
        -: 2891:
        -: 2892:    _LIBCPP_INLINE_VISIBILITY typename add_lvalue_reference<_Tp>::type operator[](size_t __i) const
        -: 2893:        {return __ptr_.first()[__i];}
        -: 2894:    _LIBCPP_INLINE_VISIBILITY pointer get() const _NOEXCEPT {return __ptr_.first();}
        -: 2895:    _LIBCPP_INLINE_VISIBILITY       _Dp_reference get_deleter() _NOEXCEPT
        -: 2896:        {return __ptr_.second();}
        -: 2897:    _LIBCPP_INLINE_VISIBILITY _Dp_const_reference get_deleter() const _NOEXCEPT
        -: 2898:        {return __ptr_.second();}
        -: 2899:    _LIBCPP_INLINE_VISIBILITY
        -: 2900:        _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT
        -: 2901:        {return __ptr_.first() != nullptr;}
        -: 2902:
        -: 2903:    _LIBCPP_INLINE_VISIBILITY pointer release() _NOEXCEPT
        -: 2904:    {
        -: 2905:        pointer __t = __ptr_.first();
        -: 2906:        __ptr_.first() = pointer();
        -: 2907:        return __t;
        -: 2908:    }
        -: 2909:
        -: 2910:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2911:    template <class _Pp>
        -: 2912:    _LIBCPP_INLINE_VISIBILITY
        -: 2913:    typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, void>::type
        -: 2914:    reset(_Pp __p) _NOEXCEPT
        -: 2915:    {
        -: 2916:        pointer __tmp = __ptr_.first();
        -: 2917:        __ptr_.first() = __p;
        -: 2918:        if (__tmp)
        -: 2919:            __ptr_.second()(__tmp);
        -: 2920:    }
        -: 2921:    _LIBCPP_INLINE_VISIBILITY void reset(nullptr_t) _NOEXCEPT
        -: 2922:    {
        -: 2923:        pointer __tmp = __ptr_.first();
        -: 2924:        __ptr_.first() = nullptr;
        -: 2925:        if (__tmp)
        -: 2926:            __ptr_.second()(__tmp);
        -: 2927:    }
        -: 2928:    _LIBCPP_INLINE_VISIBILITY void reset() _NOEXCEPT
        -: 2929:    {
        -: 2930:        pointer __tmp = __ptr_.first();
        -: 2931:        __ptr_.first() = nullptr;
        -: 2932:        if (__tmp)
        -: 2933:            __ptr_.second()(__tmp);
        -: 2934:    }
        -: 2935:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2936:    _LIBCPP_INLINE_VISIBILITY void reset(pointer __p = pointer())
        -: 2937:    {
        -: 2938:        pointer __tmp = __ptr_.first();
        -: 2939:        __ptr_.first() = __p;
        -: 2940:        if (__tmp)
        -: 2941:            __ptr_.second()(__tmp);
        -: 2942:    }
        -: 2943:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2944:
        -: 2945:    _LIBCPP_INLINE_VISIBILITY void swap(unique_ptr& __u) {__ptr_.swap(__u.__ptr_);}
        -: 2946:private:
        -: 2947:
        -: 2948:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2949:    template <class _Up>
        -: 2950:        explicit unique_ptr(_Up);
        -: 2951:    template <class _Up>
        -: 2952:        unique_ptr(_Up __u,
        -: 2953:                   typename conditional<
        -: 2954:                                       is_reference<deleter_type>::value,
        -: 2955:                                       deleter_type,
        -: 2956:                                       typename add_lvalue_reference<const deleter_type>::type>::type,
        -: 2957:                   typename enable_if
        -: 2958:                      <
        -: 2959:                         is_convertible<_Up, pointer>::value,
        -: 2960:                         __nat
        -: 2961:                      >::type = __nat());
        -: 2962:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2963:};
        -: 2964:
        -: 2965:template <class _Tp, class _Dp>
        -: 2966:inline _LIBCPP_INLINE_VISIBILITY
        -: 2967:void
        -: 2968:swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {__x.swap(__y);}
        -: 2969:
        -: 2970:template <class _T1, class _D1, class _T2, class _D2>
        -: 2971:inline _LIBCPP_INLINE_VISIBILITY
        -: 2972:bool
        -: 2973:operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __x.get() == __y.get();}
        -: 2974:
        -: 2975:template <class _T1, class _D1, class _T2, class _D2>
        -: 2976:inline _LIBCPP_INLINE_VISIBILITY
        -: 2977:bool
        -: 2978:operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x == __y);}
        -: 2979:
        -: 2980:template <class _T1, class _D1, class _T2, class _D2>
        -: 2981:inline _LIBCPP_INLINE_VISIBILITY
        -: 2982:bool
        -: 2983:operator< (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y)
        -: 2984:{
        -: 2985:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2986:    typedef typename unique_ptr<_T2, _D2>::pointer _P2;
        -: 2987:    typedef typename common_type<_P1, _P2>::type _Vp;
        -: 2988:    return less<_Vp>()(__x.get(), __y.get());
        -: 2989:}
        -: 2990:
        -: 2991:template <class _T1, class _D1, class _T2, class _D2>
        -: 2992:inline _LIBCPP_INLINE_VISIBILITY
        -: 2993:bool
        -: 2994:operator> (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __y < __x;}
        -: 2995:
        -: 2996:template <class _T1, class _D1, class _T2, class _D2>
        -: 2997:inline _LIBCPP_INLINE_VISIBILITY
        -: 2998:bool
        -: 2999:operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__y < __x);}
        -: 3000:
        -: 3001:template <class _T1, class _D1, class _T2, class _D2>
        -: 3002:inline _LIBCPP_INLINE_VISIBILITY
        -: 3003:bool
        -: 3004:operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x < __y);}
        -: 3005:
        -: 3006:template <class _T1, class _D1>
        -: 3007:inline _LIBCPP_INLINE_VISIBILITY
        -: 3008:bool
        -: 3009:operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 3010:{
        -: 3011:    return !__x;
        -: 3012:}
        -: 3013:
        -: 3014:template <class _T1, class _D1>
        -: 3015:inline _LIBCPP_INLINE_VISIBILITY
        -: 3016:bool
        -: 3017:operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 3018:{
        -: 3019:    return !__x;
        -: 3020:}
        -: 3021:
        -: 3022:template <class _T1, class _D1>
        -: 3023:inline _LIBCPP_INLINE_VISIBILITY
        -: 3024:bool
        -: 3025:operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 3026:{
        -: 3027:    return static_cast<bool>(__x);
        -: 3028:}
        -: 3029:
        -: 3030:template <class _T1, class _D1>
        -: 3031:inline _LIBCPP_INLINE_VISIBILITY
        -: 3032:bool
        -: 3033:operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 3034:{
        -: 3035:    return static_cast<bool>(__x);
        -: 3036:}
        -: 3037:
        -: 3038:template <class _T1, class _D1>
        -: 3039:inline _LIBCPP_INLINE_VISIBILITY
        -: 3040:bool
        -: 3041:operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3042:{
        -: 3043:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 3044:    return less<_P1>()(__x.get(), nullptr);
        -: 3045:}
        -: 3046:
        -: 3047:template <class _T1, class _D1>
        -: 3048:inline _LIBCPP_INLINE_VISIBILITY
        -: 3049:bool
        -: 3050:operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3051:{
        -: 3052:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 3053:    return less<_P1>()(nullptr, __x.get());
        -: 3054:}
        -: 3055:
        -: 3056:template <class _T1, class _D1>
        -: 3057:inline _LIBCPP_INLINE_VISIBILITY
        -: 3058:bool
        -: 3059:operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3060:{
        -: 3061:    return nullptr < __x;
        -: 3062:}
        -: 3063:
        -: 3064:template <class _T1, class _D1>
        -: 3065:inline _LIBCPP_INLINE_VISIBILITY
        -: 3066:bool
        -: 3067:operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3068:{
        -: 3069:    return __x < nullptr;
        -: 3070:}
        -: 3071:
        -: 3072:template <class _T1, class _D1>
        -: 3073:inline _LIBCPP_INLINE_VISIBILITY
        -: 3074:bool
        -: 3075:operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3076:{
        -: 3077:    return !(nullptr < __x);
        -: 3078:}
        -: 3079:
        -: 3080:template <class _T1, class _D1>
        -: 3081:inline _LIBCPP_INLINE_VISIBILITY
        -: 3082:bool
        -: 3083:operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3084:{
        -: 3085:    return !(__x < nullptr);
        -: 3086:}
        -: 3087:
        -: 3088:template <class _T1, class _D1>
        -: 3089:inline _LIBCPP_INLINE_VISIBILITY
        -: 3090:bool
        -: 3091:operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3092:{
        -: 3093:    return !(__x < nullptr);
        -: 3094:}
        -: 3095:
        -: 3096:template <class _T1, class _D1>
        -: 3097:inline _LIBCPP_INLINE_VISIBILITY
        -: 3098:bool
        -: 3099:operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3100:{
        -: 3101:    return !(nullptr < __x);
        -: 3102:}
        -: 3103:
        -: 3104:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3105:
        -: 3106:template <class _Tp, class _Dp>
        -: 3107:inline _LIBCPP_INLINE_VISIBILITY
        -: 3108:unique_ptr<_Tp, _Dp>
        -: 3109:move(unique_ptr<_Tp, _Dp>& __t)
        -: 3110:{
        -: 3111:    return unique_ptr<_Tp, _Dp>(__rv<unique_ptr<_Tp, _Dp> >(__t));
        -: 3112:}
        -: 3113:
        -: 3114:#endif
        -: 3115:
        -: 3116:#if _LIBCPP_STD_VER > 11
        -: 3117:
        -: 3118:template<class _Tp>
        -: 3119:struct __unique_if
        -: 3120:{
        -: 3121:    typedef unique_ptr<_Tp> __unique_single;
        -: 3122:};
        -: 3123:
        -: 3124:template<class _Tp>
        -: 3125:struct __unique_if<_Tp[]>
        -: 3126:{
        -: 3127:    typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
        -: 3128:};
        -: 3129:
        -: 3130:template<class _Tp, size_t _Np>
        -: 3131:struct __unique_if<_Tp[_Np]>
        -: 3132:{
        -: 3133:    typedef void __unique_array_known_bound;
        -: 3134:};
        -: 3135:
        -: 3136:template<class _Tp, class... _Args>
        -: 3137:inline _LIBCPP_INLINE_VISIBILITY
        -: 3138:typename __unique_if<_Tp>::__unique_single
        -: 3139:make_unique(_Args&&... __args)
        -: 3140:{
        -: 3141:    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
        -: 3142:}
        -: 3143:
        -: 3144:template<class _Tp>
        -: 3145:inline _LIBCPP_INLINE_VISIBILITY
        -: 3146:typename __unique_if<_Tp>::__unique_array_unknown_bound
        -: 3147:make_unique(size_t __n)
        -: 3148:{
        -: 3149:    typedef typename remove_extent<_Tp>::type _Up;
        -: 3150:    return unique_ptr<_Tp>(new _Up[__n]());
        -: 3151:}
        -: 3152:
        -: 3153:template<class _Tp, class... _Args>
        -: 3154:    typename __unique_if<_Tp>::__unique_array_known_bound
        -: 3155:    make_unique(_Args&&...) = delete;
        -: 3156:
        -: 3157:#endif  // _LIBCPP_STD_VER > 11
        -: 3158:
        -: 3159:template <class _Tp> struct hash;
        -: 3160:
        -: 3161:template <class _Size>
        -: 3162:inline _LIBCPP_INLINE_VISIBILITY
        -: 3163:_Size
        -: 3164:__loadword(const void* __p)
        -: 3165:{
        -: 3166:    _Size __r;
        -: 3167:    std::memcpy(&__r, __p, sizeof(__r));
        -: 3168:    return __r;
        -: 3169:}
        -: 3170:
        -: 3171:// We use murmur2 when size_t is 32 bits, and cityhash64 when size_t
        -: 3172:// is 64 bits.  This is because cityhash64 uses 64bit x 64bit
        -: 3173:// multiplication, which can be very slow on 32-bit systems.
        -: 3174:template <class _Size, size_t = sizeof(_Size)*__CHAR_BIT__>
        -: 3175:struct __murmur2_or_cityhash;
        -: 3176:
        -: 3177:template <class _Size>
        -: 3178:struct __murmur2_or_cityhash<_Size, 32>
        -: 3179:{
        -: 3180:    _Size operator()(const void* __key, _Size __len);
        -: 3181:};
        -: 3182:
        -: 3183:// murmur2
        -: 3184:template <class _Size>
        -: 3185:_Size
        -: 3186:__murmur2_or_cityhash<_Size, 32>::operator()(const void* __key, _Size __len)
        -: 3187:{
        -: 3188:    const _Size __m = 0x5bd1e995;
        -: 3189:    const _Size __r = 24;
        -: 3190:    _Size __h = __len;
        -: 3191:    const unsigned char* __data = static_cast<const unsigned char*>(__key);
        -: 3192:    for (; __len >= 4; __data += 4, __len -= 4)
        -: 3193:    {
        -: 3194:        _Size __k = __loadword<_Size>(__data);
        -: 3195:        __k *= __m;
        -: 3196:        __k ^= __k >> __r;
        -: 3197:        __k *= __m;
        -: 3198:        __h *= __m;
        -: 3199:        __h ^= __k;
        -: 3200:    }
        -: 3201:    switch (__len)
        -: 3202:    {
        -: 3203:    case 3:
        -: 3204:        __h ^= __data[2] << 16;
        -: 3205:    case 2:
        -: 3206:        __h ^= __data[1] << 8;
        -: 3207:    case 1:
        -: 3208:        __h ^= __data[0];
        -: 3209:        __h *= __m;
        -: 3210:    }
        -: 3211:    __h ^= __h >> 13;
        -: 3212:    __h *= __m;
        -: 3213:    __h ^= __h >> 15;
        -: 3214:    return __h;
        -: 3215:}
        -: 3216:
        -: 3217:template <class _Size>
        -: 3218:struct __murmur2_or_cityhash<_Size, 64>
        -: 3219:{
        -: 3220:    _Size operator()(const void* __key, _Size __len);
        -: 3221:
        -: 3222: private:
        -: 3223:  // Some primes between 2^63 and 2^64.
        -: 3224:  static const _Size __k0 = 0xc3a5c85c97cb3127ULL;
        -: 3225:  static const _Size __k1 = 0xb492b66fbe98f273ULL;
        -: 3226:  static const _Size __k2 = 0x9ae16a3b2f90404fULL;
        -: 3227:  static const _Size __k3 = 0xc949d7c7509e6557ULL;
        -: 3228:
        -: 3229:  static _Size __rotate(_Size __val, int __shift) {
        -: 3230:    return __shift == 0 ? __val : ((__val >> __shift) | (__val << (64 - __shift)));
        -: 3231:  }
        -: 3232:
        -: 3233:  static _Size __rotate_by_at_least_1(_Size __val, int __shift) {
        -: 3234:    return (__val >> __shift) | (__val << (64 - __shift));
        -: 3235:  }
        -: 3236:
        -: 3237:  static _Size __shift_mix(_Size __val) {
        -: 3238:    return __val ^ (__val >> 47);
        -: 3239:  }
        -: 3240:
        -: 3241:  static _Size __hash_len_16(_Size __u, _Size __v) {
        -: 3242:    const _Size __mul = 0x9ddfea08eb382d69ULL;
        -: 3243:    _Size __a = (__u ^ __v) * __mul;
        -: 3244:    __a ^= (__a >> 47);
        -: 3245:    _Size __b = (__v ^ __a) * __mul;
        -: 3246:    __b ^= (__b >> 47);
        -: 3247:    __b *= __mul;
        -: 3248:    return __b;
        -: 3249:  }
        -: 3250:
        -: 3251:  static _Size __hash_len_0_to_16(const char* __s, _Size __len) {
        -: 3252:    if (__len > 8) {
        -: 3253:      const _Size __a = __loadword<_Size>(__s);
        -: 3254:      const _Size __b = __loadword<_Size>(__s + __len - 8);
        -: 3255:      return __hash_len_16(__a, __rotate_by_at_least_1(__b + __len, __len)) ^ __b;
        -: 3256:    }
        -: 3257:    if (__len >= 4) {
        -: 3258:      const uint32_t __a = __loadword<uint32_t>(__s);
        -: 3259:      const uint32_t __b = __loadword<uint32_t>(__s + __len - 4);
        -: 3260:      return __hash_len_16(__len + (__a << 3), __b);
        -: 3261:    }
        -: 3262:    if (__len > 0) {
        -: 3263:      const unsigned char __a = __s[0];
        -: 3264:      const unsigned char __b = __s[__len >> 1];
        -: 3265:      const unsigned char __c = __s[__len - 1];
        -: 3266:      const uint32_t __y = static_cast<uint32_t>(__a) +
        -: 3267:                           (static_cast<uint32_t>(__b) << 8);
        -: 3268:      const uint32_t __z = __len + (static_cast<uint32_t>(__c) << 2);
        -: 3269:      return __shift_mix(__y * __k2 ^ __z * __k3) * __k2;
        -: 3270:    }
        -: 3271:    return __k2;
        -: 3272:  }
        -: 3273:
        -: 3274:  static _Size __hash_len_17_to_32(const char *__s, _Size __len) {
        -: 3275:    const _Size __a = __loadword<_Size>(__s) * __k1;
        -: 3276:    const _Size __b = __loadword<_Size>(__s + 8);
        -: 3277:    const _Size __c = __loadword<_Size>(__s + __len - 8) * __k2;
        -: 3278:    const _Size __d = __loadword<_Size>(__s + __len - 16) * __k0;
        -: 3279:    return __hash_len_16(__rotate(__a - __b, 43) + __rotate(__c, 30) + __d,
        -: 3280:                         __a + __rotate(__b ^ __k3, 20) - __c + __len);
        -: 3281:  }
        -: 3282:
        -: 3283:  // Return a 16-byte hash for 48 bytes.  Quick and dirty.
        -: 3284:  // Callers do best to use "random-looking" values for a and b.
        -: 3285:  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
        -: 3286:      _Size __w, _Size __x, _Size __y, _Size __z, _Size __a, _Size __b) {
        -: 3287:    __a += __w;
        -: 3288:    __b = __rotate(__b + __a + __z, 21);
        -: 3289:    const _Size __c = __a;
        -: 3290:    __a += __x;
        -: 3291:    __a += __y;
        -: 3292:    __b += __rotate(__a, 44);
        -: 3293:    return pair<_Size, _Size>(__a + __z, __b + __c);
        -: 3294:  }
        -: 3295:
        -: 3296:  // Return a 16-byte hash for s[0] ... s[31], a, and b.  Quick and dirty.
        -: 3297:  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
        -: 3298:      const char* __s, _Size __a, _Size __b) {
        -: 3299:    return __weak_hash_len_32_with_seeds(__loadword<_Size>(__s),
        -: 3300:                                         __loadword<_Size>(__s + 8),
        -: 3301:                                         __loadword<_Size>(__s + 16),
        -: 3302:                                         __loadword<_Size>(__s + 24),
        -: 3303:                                         __a,
        -: 3304:                                         __b);
        -: 3305:  }
        -: 3306:
        -: 3307:  // Return an 8-byte hash for 33 to 64 bytes.
        -: 3308:  static _Size __hash_len_33_to_64(const char *__s, size_t __len) {
        -: 3309:    _Size __z = __loadword<_Size>(__s + 24);
        -: 3310:    _Size __a = __loadword<_Size>(__s) +
        -: 3311:                (__len + __loadword<_Size>(__s + __len - 16)) * __k0;
        -: 3312:    _Size __b = __rotate(__a + __z, 52);
        -: 3313:    _Size __c = __rotate(__a, 37);
        -: 3314:    __a += __loadword<_Size>(__s + 8);
        -: 3315:    __c += __rotate(__a, 7);
        -: 3316:    __a += __loadword<_Size>(__s + 16);
        -: 3317:    _Size __vf = __a + __z;
        -: 3318:    _Size __vs = __b + __rotate(__a, 31) + __c;
        -: 3319:    __a = __loadword<_Size>(__s + 16) + __loadword<_Size>(__s + __len - 32);
        -: 3320:    __z += __loadword<_Size>(__s + __len - 8);
        -: 3321:    __b = __rotate(__a + __z, 52);
        -: 3322:    __c = __rotate(__a, 37);
        -: 3323:    __a += __loadword<_Size>(__s + __len - 24);
        -: 3324:    __c += __rotate(__a, 7);
        -: 3325:    __a += __loadword<_Size>(__s + __len - 16);
        -: 3326:    _Size __wf = __a + __z;
        -: 3327:    _Size __ws = __b + __rotate(__a, 31) + __c;
        -: 3328:    _Size __r = __shift_mix((__vf + __ws) * __k2 + (__wf + __vs) * __k0);
        -: 3329:    return __shift_mix(__r * __k0 + __vs) * __k2;
        -: 3330:  }
        -: 3331:};
        -: 3332:
        -: 3333:// cityhash64
        -: 3334:template <class _Size>
        -: 3335:_Size
        -: 3336:__murmur2_or_cityhash<_Size, 64>::operator()(const void* __key, _Size __len)
        -: 3337:{
        -: 3338:  const char* __s = static_cast<const char*>(__key);
        -: 3339:  if (__len <= 32) {
        -: 3340:    if (__len <= 16) {
        -: 3341:      return __hash_len_0_to_16(__s, __len);
        -: 3342:    } else {
        -: 3343:      return __hash_len_17_to_32(__s, __len);
        -: 3344:    }
        -: 3345:  } else if (__len <= 64) {
        -: 3346:    return __hash_len_33_to_64(__s, __len);
        -: 3347:  }
        -: 3348:
        -: 3349:  // For strings over 64 bytes we hash the end first, and then as we
        -: 3350:  // loop we keep 56 bytes of state: v, w, x, y, and z.
        -: 3351:  _Size __x = __loadword<_Size>(__s + __len - 40);
        -: 3352:  _Size __y = __loadword<_Size>(__s + __len - 16) +
        -: 3353:              __loadword<_Size>(__s + __len - 56);
        -: 3354:  _Size __z = __hash_len_16(__loadword<_Size>(__s + __len - 48) + __len,
        -: 3355:                          __loadword<_Size>(__s + __len - 24));
        -: 3356:  pair<_Size, _Size> __v = __weak_hash_len_32_with_seeds(__s + __len - 64, __len, __z);
        -: 3357:  pair<_Size, _Size> __w = __weak_hash_len_32_with_seeds(__s + __len - 32, __y + __k1, __x);
        -: 3358:  __x = __x * __k1 + __loadword<_Size>(__s);
        -: 3359:
        -: 3360:  // Decrease len to the nearest multiple of 64, and operate on 64-byte chunks.
        -: 3361:  __len = (__len - 1) & ~static_cast<_Size>(63);
        -: 3362:  do {
        -: 3363:    __x = __rotate(__x + __y + __v.first + __loadword<_Size>(__s + 8), 37) * __k1;
        -: 3364:    __y = __rotate(__y + __v.second + __loadword<_Size>(__s + 48), 42) * __k1;
        -: 3365:    __x ^= __w.second;
        -: 3366:    __y += __v.first + __loadword<_Size>(__s + 40);
        -: 3367:    __z = __rotate(__z + __w.first, 33) * __k1;
        -: 3368:    __v = __weak_hash_len_32_with_seeds(__s, __v.second * __k1, __x + __w.first);
        -: 3369:    __w = __weak_hash_len_32_with_seeds(__s + 32, __z + __w.second,
        -: 3370:                                        __y + __loadword<_Size>(__s + 16));
        -: 3371:    std::swap(__z, __x);
        -: 3372:    __s += 64;
        -: 3373:    __len -= 64;
        -: 3374:  } while (__len != 0);
        -: 3375:  return __hash_len_16(
        -: 3376:      __hash_len_16(__v.first, __w.first) + __shift_mix(__y) * __k1 + __z,
        -: 3377:      __hash_len_16(__v.second, __w.second) + __x);
        -: 3378:}
        -: 3379:
        -: 3380:template <class _Tp, size_t = sizeof(_Tp) / sizeof(size_t)>
        -: 3381:struct __scalar_hash;
        -: 3382:
        -: 3383:template <class _Tp>
        -: 3384:struct __scalar_hash<_Tp, 0>
        -: 3385:    : public unary_function<_Tp, size_t>
        -: 3386:{
        -: 3387:    _LIBCPP_INLINE_VISIBILITY
        -: 3388:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3389:    {
        -: 3390:        union
        -: 3391:        {
        -: 3392:            _Tp    __t;
        -: 3393:            size_t __a;
        -: 3394:        } __u;
        -: 3395:        __u.__a = 0;
        -: 3396:        __u.__t = __v;
        -: 3397:        return __u.__a;
        -: 3398:    }
        -: 3399:};
        -: 3400:
        -: 3401:template <class _Tp>
        -: 3402:struct __scalar_hash<_Tp, 1>
        -: 3403:    : public unary_function<_Tp, size_t>
        -: 3404:{
        -: 3405:    _LIBCPP_INLINE_VISIBILITY
        -: 3406:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3407:    {
        -: 3408:        union
        -: 3409:        {
        -: 3410:            _Tp    __t;
        -: 3411:            size_t __a;
        -: 3412:        } __u;
        -: 3413:        __u.__t = __v;
        -: 3414:        return __u.__a;
        -: 3415:    }
        -: 3416:};
        -: 3417:
        -: 3418:template <class _Tp>
        -: 3419:struct __scalar_hash<_Tp, 2>
        -: 3420:    : public unary_function<_Tp, size_t>
        -: 3421:{
        -: 3422:    _LIBCPP_INLINE_VISIBILITY
        -: 3423:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3424:    {
        -: 3425:        union
        -: 3426:        {
        -: 3427:            _Tp __t;
        -: 3428:            struct
        -: 3429:            {
        -: 3430:                size_t __a;
        -: 3431:                size_t __b;
        -: 3432:            } __s;
        -: 3433:        } __u;
        -: 3434:        __u.__t = __v;
        -: 3435:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3436:    }
        -: 3437:};
        -: 3438:
        -: 3439:template <class _Tp>
        -: 3440:struct __scalar_hash<_Tp, 3>
        -: 3441:    : public unary_function<_Tp, size_t>
        -: 3442:{
        -: 3443:    _LIBCPP_INLINE_VISIBILITY
        -: 3444:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3445:    {
        -: 3446:        union
        -: 3447:        {
        -: 3448:            _Tp __t;
        -: 3449:            struct
        -: 3450:            {
        -: 3451:                size_t __a;
        -: 3452:                size_t __b;
        -: 3453:                size_t __c;
        -: 3454:            } __s;
        -: 3455:        } __u;
        -: 3456:        __u.__t = __v;
        -: 3457:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3458:    }
        -: 3459:};
        -: 3460:
        -: 3461:template <class _Tp>
        -: 3462:struct __scalar_hash<_Tp, 4>
        -: 3463:    : public unary_function<_Tp, size_t>
        -: 3464:{
        -: 3465:    _LIBCPP_INLINE_VISIBILITY
        -: 3466:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3467:    {
        -: 3468:        union
        -: 3469:        {
        -: 3470:            _Tp __t;
        -: 3471:            struct
        -: 3472:            {
        -: 3473:                size_t __a;
        -: 3474:                size_t __b;
        -: 3475:                size_t __c;
        -: 3476:                size_t __d;
        -: 3477:            } __s;
        -: 3478:        } __u;
        -: 3479:        __u.__t = __v;
        -: 3480:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3481:    }
        -: 3482:};
        -: 3483:
        -: 3484:template<class _Tp>
        -: 3485:struct _LIBCPP_TYPE_VIS_ONLY hash<_Tp*>
        -: 3486:    : public unary_function<_Tp*, size_t>
        -: 3487:{
        -: 3488:    _LIBCPP_INLINE_VISIBILITY
        -: 3489:    size_t operator()(_Tp* __v) const _NOEXCEPT
        -: 3490:    {
        -: 3491:        union
        -: 3492:        {
        -: 3493:            _Tp* __t;
        -: 3494:            size_t __a;
        -: 3495:        } __u;
        -: 3496:        __u.__t = __v;
        -: 3497:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3498:    }
        -: 3499:};
        -: 3500:
        -: 3501:template <class _Tp, class _Dp>
        -: 3502:struct _LIBCPP_TYPE_VIS_ONLY hash<unique_ptr<_Tp, _Dp> >
        -: 3503:{
        -: 3504:    typedef unique_ptr<_Tp, _Dp> argument_type;
        -: 3505:    typedef size_t               result_type;
        -: 3506:    _LIBCPP_INLINE_VISIBILITY
        -: 3507:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 3508:    {
        -: 3509:        typedef typename argument_type::pointer pointer;
        -: 3510:        return hash<pointer>()(__ptr.get());
        -: 3511:    }
        -: 3512:};
        -: 3513:
        -: 3514:struct __destruct_n
        -: 3515:{
        -: 3516:private:
        -: 3517:    size_t size;
        -: 3518:
        -: 3519:    template <class _Tp>
        -: 3520:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp* __p, false_type) _NOEXCEPT
        -: 3521:        {for (size_t __i = 0; __i < size; ++__i, ++__p) __p->~_Tp();}
        -: 3522:
        -: 3523:    template <class _Tp>
        -: 3524:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp*, true_type) _NOEXCEPT
        -: 3525:        {}
        -: 3526:
        -: 3527:    _LIBCPP_INLINE_VISIBILITY void __incr(false_type) _NOEXCEPT
        -: 3528:        {++size;}
        -: 3529:    _LIBCPP_INLINE_VISIBILITY void __incr(true_type) _NOEXCEPT
        -: 3530:        {}
        -: 3531:
        -: 3532:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, false_type) _NOEXCEPT
        -: 3533:        {size = __s;}
        -: 3534:    _LIBCPP_INLINE_VISIBILITY void __set(size_t, true_type) _NOEXCEPT
        -: 3535:        {}
        -: 3536:public:
        -: 3537:    _LIBCPP_INLINE_VISIBILITY explicit __destruct_n(size_t __s) _NOEXCEPT
        -: 3538:        : size(__s) {}
        -: 3539:
        -: 3540:    template <class _Tp>
        -: 3541:    _LIBCPP_INLINE_VISIBILITY void __incr(_Tp*) _NOEXCEPT
        -: 3542:        {__incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3543:
        -: 3544:    template <class _Tp>
        -: 3545:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, _Tp*) _NOEXCEPT
        -: 3546:        {__set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3547:
        -: 3548:    template <class _Tp>
        -: 3549:    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) _NOEXCEPT
        -: 3550:        {__process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3551:};
        -: 3552:
        -: 3553:template <class _Alloc>
        -: 3554:class __allocator_destructor
        -: 3555:{
        -: 3556:    typedef allocator_traits<_Alloc> __alloc_traits;
        -: 3557:public:
        -: 3558:    typedef typename __alloc_traits::pointer pointer;
        -: 3559:    typedef typename __alloc_traits::size_type size_type;
        -: 3560:private:
        -: 3561:    _Alloc& __alloc_;
        -: 3562:    size_type __s_;
        -: 3563:public:
        -: 3564:    _LIBCPP_INLINE_VISIBILITY __allocator_destructor(_Alloc& __a, size_type __s)
        -: 3565:             _NOEXCEPT
        -: 3566:        : __alloc_(__a), __s_(__s) {}
        -: 3567:    _LIBCPP_INLINE_VISIBILITY
        -: 3568:    void operator()(pointer __p) _NOEXCEPT
        -: 3569:        {__alloc_traits::deallocate(__alloc_, __p, __s_);}
        -: 3570:};
        -: 3571:
        -: 3572:template <class _InputIterator, class _ForwardIterator>
        -: 3573:_ForwardIterator
        -: 3574:uninitialized_copy(_InputIterator __f, _InputIterator __l, _ForwardIterator __r)
        -: 3575:{
        -: 3576:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3577:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3578:    _ForwardIterator __s = __r;
        -: 3579:    try
        -: 3580:    {
        -: 3581:#endif
        -: 3582:        for (; __f != __l; ++__f, (void) ++__r)
        -: 3583:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 3584:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3585:    }
        -: 3586:    catch (...)
        -: 3587:    {
        -: 3588:        for (; __s != __r; ++__s)
        -: 3589:            __s->~value_type();
        -: 3590:        throw;
        -: 3591:    }
        -: 3592:#endif
        -: 3593:    return __r;
        -: 3594:}
        -: 3595:
        -: 3596:template <class _InputIterator, class _Size, class _ForwardIterator>
        -: 3597:_ForwardIterator
        -: 3598:uninitialized_copy_n(_InputIterator __f, _Size __n, _ForwardIterator __r)
        -: 3599:{
        -: 3600:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3601:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3602:    _ForwardIterator __s = __r;
        -: 3603:    try
        -: 3604:    {
        -: 3605:#endif
        -: 3606:        for (; __n > 0; ++__f, (void) ++__r, (void) --__n)
        -: 3607:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 3608:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3609:    }
        -: 3610:    catch (...)
        -: 3611:    {
        -: 3612:        for (; __s != __r; ++__s)
        -: 3613:            __s->~value_type();
        -: 3614:        throw;
        -: 3615:    }
        -: 3616:#endif
        -: 3617:    return __r;
        -: 3618:}
        -: 3619:
        -: 3620:template <class _ForwardIterator, class _Tp>
        -: 3621:void
        -: 3622:uninitialized_fill(_ForwardIterator __f, _ForwardIterator __l, const _Tp& __x)
        -: 3623:{
        -: 3624:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3625:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3626:    _ForwardIterator __s = __f;
        -: 3627:    try
        -: 3628:    {
        -: 3629:#endif
        -: 3630:        for (; __f != __l; ++__f)
        -: 3631:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 3632:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3633:    }
        -: 3634:    catch (...)
        -: 3635:    {
        -: 3636:        for (; __s != __f; ++__s)
        -: 3637:            __s->~value_type();
        -: 3638:        throw;
        -: 3639:    }
        -: 3640:#endif
        -: 3641:}
        -: 3642:
        -: 3643:template <class _ForwardIterator, class _Size, class _Tp>
        -: 3644:_ForwardIterator
        -: 3645:uninitialized_fill_n(_ForwardIterator __f, _Size __n, const _Tp& __x)
        -: 3646:{
        -: 3647:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3648:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3649:    _ForwardIterator __s = __f;
        -: 3650:    try
        -: 3651:    {
        -: 3652:#endif
        -: 3653:        for (; __n > 0; ++__f, (void) --__n)
        -: 3654:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 3655:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3656:    }
        -: 3657:    catch (...)
        -: 3658:    {
        -: 3659:        for (; __s != __f; ++__s)
        -: 3660:            __s->~value_type();
        -: 3661:        throw;
        -: 3662:    }
        -: 3663:#endif
        -: 3664:    return __f;
        -: 3665:}
        -: 3666:
        -: 3667:class _LIBCPP_EXCEPTION_ABI bad_weak_ptr
        -: 3668:    : public std::exception
        -: 3669:{
        -: 3670:public:
        -: 3671:    virtual ~bad_weak_ptr() _NOEXCEPT;
        -: 3672:    virtual const char* what() const  _NOEXCEPT;
        -: 3673:};
        -: 3674:
        -: 3675:template<class _Tp> class _LIBCPP_TYPE_VIS_ONLY weak_ptr;
        -: 3676:
        -: 3677:class _LIBCPP_TYPE_VIS __shared_count
        -: 3678:{
        -: 3679:    __shared_count(const __shared_count&);
        -: 3680:    __shared_count& operator=(const __shared_count&);
        -: 3681:
        -: 3682:protected:
        -: 3683:    long __shared_owners_;
        -: 3684:    virtual ~__shared_count();
        -: 3685:private:
        -: 3686:    virtual void __on_zero_shared() _NOEXCEPT = 0;
        -: 3687:
        -: 3688:public:
        -: 3689:    _LIBCPP_INLINE_VISIBILITY
        -: 3690:    explicit __shared_count(long __refs = 0) _NOEXCEPT
        -: 3691:        : __shared_owners_(__refs) {}
        -: 3692:
        -: 3693:    void __add_shared() _NOEXCEPT;
        -: 3694:    bool __release_shared() _NOEXCEPT;
        -: 3695:    _LIBCPP_INLINE_VISIBILITY
        -: 3696:    long use_count() const _NOEXCEPT {
        -: 3697:        return __libcpp_relaxed_load(&__shared_owners_) + 1;
        -: 3698:    }
        -: 3699:};
        -: 3700:
        -: 3701:class _LIBCPP_TYPE_VIS __shared_weak_count
        -: 3702:    : private __shared_count
        -: 3703:{
        -: 3704:    long __shared_weak_owners_;
        -: 3705:
        -: 3706:public:
        -: 3707:    _LIBCPP_INLINE_VISIBILITY
        -: 3708:    explicit __shared_weak_count(long __refs = 0) _NOEXCEPT
        -: 3709:        : __shared_count(__refs),
        -: 3710:          __shared_weak_owners_(__refs) {}
        -: 3711:protected:
        -: 3712:    virtual ~__shared_weak_count();
        -: 3713:
        -: 3714:public:
        -: 3715:    void __add_shared() _NOEXCEPT;
        -: 3716:    void __add_weak() _NOEXCEPT;
        -: 3717:    void __release_shared() _NOEXCEPT;
        -: 3718:    void __release_weak() _NOEXCEPT;
        -: 3719:    _LIBCPP_INLINE_VISIBILITY
        -: 3720:    long use_count() const _NOEXCEPT {return __shared_count::use_count();}
        -: 3721:    __shared_weak_count* lock() _NOEXCEPT;
        -: 3722:
        -: 3723:    // Define the function out only if we build static libc++ without RTTI.
        -: 3724:    // Otherwise we may break clients who need to compile their projects with
        -: 3725:    // -fno-rtti and yet link against a libc++.dylib compiled
        -: 3726:    // without -fno-rtti.
        -: 3727:#if !defined(_LIBCPP_NO_RTTI) || !defined(_LIBCPP_BUILD_STATIC)
        -: 3728:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3729:#endif
        -: 3730:private:
        -: 3731:    virtual void __on_zero_shared_weak() _NOEXCEPT = 0;
        -: 3732:};
        -: 3733:
        -: 3734:template <class _Tp, class _Dp, class _Alloc>
        -: 3735:class __shared_ptr_pointer
        -: 3736:    : public __shared_weak_count
        -: 3737:{
        -: 3738:    __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;
        -: 3739:public:
        -: 3740:    _LIBCPP_INLINE_VISIBILITY
        -: 3741:    __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
        -: 3742:        :  __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a)) {}
        -: 3743:
        -: 3744:#ifndef _LIBCPP_NO_RTTI
        -: 3745:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3746:#endif
        -: 3747:
        -: 3748:private:
        -: 3749:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3750:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3751:};
        -: 3752:
        -: 3753:#ifndef _LIBCPP_NO_RTTI
        -: 3754:
        -: 3755:template <class _Tp, class _Dp, class _Alloc>
        -: 3756:const void*
        -: 3757:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const _NOEXCEPT
        -: 3758:{
        -: 3759:    return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : 0;
        -: 3760:}
        -: 3761:
        -: 3762:#endif  // _LIBCPP_NO_RTTI
        -: 3763:
        -: 3764:template <class _Tp, class _Dp, class _Alloc>
        -: 3765:void
        -: 3766:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3767:{
        -: 3768:    __data_.first().second()(__data_.first().first());
        -: 3769:    __data_.first().second().~_Dp();
        -: 3770:}
        -: 3771:
        -: 3772:template <class _Tp, class _Dp, class _Alloc>
        -: 3773:void
        -: 3774:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3775:{
        -: 3776:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
        -: 3777:    typedef allocator_traits<_Al> _ATraits;
        -: 3778:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3779:
        -: 3780:    _Al __a(__data_.second());
        -: 3781:    __data_.second().~_Alloc();
        -: 3782:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3783:}
        -: 3784:
        -: 3785:template <class _Tp, class _Alloc>
        -: 3786:class __shared_ptr_emplace
        -: 3787:    : public __shared_weak_count
        -: 3788:{
        -: 3789:    __compressed_pair<_Alloc, _Tp> __data_;
        -: 3790:public:
        -: 3791:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 3792:
        -: 3793:    _LIBCPP_INLINE_VISIBILITY
        -: 3794:    __shared_ptr_emplace(_Alloc __a)
        -: 3795:        :  __data_(_VSTD::move(__a)) {}
        -: 3796:
        -: 3797:    template <class ..._Args>
        -: 3798:        _LIBCPP_INLINE_VISIBILITY
        -: 3799:        __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)
        -: 3800:            :  __data_(piecewise_construct, _VSTD::forward_as_tuple(__a),
        -: 3801:                   _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...)) {}
        -: 3802:
        -: 3803:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 3804:
        -: 3805:    _LIBCPP_INLINE_VISIBILITY
        -: 3806:    __shared_ptr_emplace(_Alloc __a)
        -: 3807:        :  __data_(__a) {}
        -: 3808:
        -: 3809:    template <class _A0>
        -: 3810:        _LIBCPP_INLINE_VISIBILITY
        -: 3811:        __shared_ptr_emplace(_Alloc __a, _A0& __a0)
        -: 3812:            :  __data_(__a, _Tp(__a0)) {}
        -: 3813:
        -: 3814:    template <class _A0, class _A1>
        -: 3815:        _LIBCPP_INLINE_VISIBILITY
        -: 3816:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1)
        -: 3817:            :  __data_(__a, _Tp(__a0, __a1)) {}
        -: 3818:
        -: 3819:    template <class _A0, class _A1, class _A2>
        -: 3820:        _LIBCPP_INLINE_VISIBILITY
        -: 3821:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 3822:            :  __data_(__a, _Tp(__a0, __a1, __a2)) {}
        -: 3823:
        -: 3824:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 3825:
        -: 3826:private:
        -: 3827:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3828:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3829:public:
        -: 3830:    _LIBCPP_INLINE_VISIBILITY
        -: 3831:    _Tp* get() _NOEXCEPT {return &__data_.second();}
        -: 3832:};
        -: 3833:
        -: 3834:template <class _Tp, class _Alloc>
        -: 3835:void
        -: 3836:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3837:{
        -: 3838:    __data_.second().~_Tp();
        -: 3839:}
        -: 3840:
        -: 3841:template <class _Tp, class _Alloc>
        -: 3842:void
        -: 3843:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3844:{
        -: 3845:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al;
        -: 3846:    typedef allocator_traits<_Al> _ATraits;
        -: 3847:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3848:    _Al __a(__data_.first());
        -: 3849:    __data_.first().~_Alloc();
        -: 3850:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3851:}
        -: 3852:
        -: 3853:template<class _Tp> class _LIBCPP_TYPE_VIS_ONLY enable_shared_from_this;
        -: 3854:
        -: 3855:template<class _Tp>
        -: 3856:class _LIBCPP_TYPE_VIS_ONLY shared_ptr
        -: 3857:{
        -: 3858:public:
        -: 3859:    typedef _Tp element_type;
        -: 3860:private:
        -: 3861:    element_type*      __ptr_;
        -: 3862:    __shared_weak_count* __cntrl_;
        -: 3863:
        -: 3864:    struct __nat {int __for_bool_;};
        -: 3865:public:
        -: 3866:    _LIBCPP_INLINE_VISIBILITY
        -: 3867:    _LIBCPP_CONSTEXPR shared_ptr() _NOEXCEPT;
        -: 3868:    _LIBCPP_INLINE_VISIBILITY
        -: 3869:    _LIBCPP_CONSTEXPR shared_ptr(nullptr_t) _NOEXCEPT;
        -: 3870:    template<class _Yp>
        -: 3871:        explicit shared_ptr(_Yp* __p,
        -: 3872:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3873:    template<class _Yp, class _Dp>
        -: 3874:        shared_ptr(_Yp* __p, _Dp __d,
        -: 3875:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3876:    template<class _Yp, class _Dp, class _Alloc>
        -: 3877:        shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 3878:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3879:    template <class _Dp> shared_ptr(nullptr_t __p, _Dp __d);
        -: 3880:    template <class _Dp, class _Alloc> shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a);
        -: 3881:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) _NOEXCEPT;
        -: 3882:    _LIBCPP_INLINE_VISIBILITY
        -: 3883:    shared_ptr(const shared_ptr& __r) _NOEXCEPT;
        -: 3884:    template<class _Yp>
        -: 3885:        _LIBCPP_INLINE_VISIBILITY
        -: 3886:        shared_ptr(const shared_ptr<_Yp>& __r,
        -: 3887:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type = __nat())
        -: 3888:                       _NOEXCEPT;
        -: 3889:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3890:    _LIBCPP_INLINE_VISIBILITY
        -: 3891:    shared_ptr(shared_ptr&& __r) _NOEXCEPT;
        -: 3892:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY  shared_ptr(shared_ptr<_Yp>&& __r,
        -: 3893:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type = __nat())
        -: 3894:                       _NOEXCEPT;
        -: 3895:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3896:    template<class _Yp> explicit shared_ptr(const weak_ptr<_Yp>& __r,
        -: 3897:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type= __nat());
        -: 3898:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3899:    template<class _Yp>
        -: 3900:        shared_ptr(auto_ptr<_Yp>&& __r,
        -: 3901:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3902:#else
        -: 3903:    template<class _Yp>
        -: 3904:        shared_ptr(auto_ptr<_Yp> __r,
        -: 3905:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3906:#endif
        -: 3907:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3908:    template <class _Yp, class _Dp>
        -: 3909:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3910:                   typename enable_if
        -: 3911:                   <
        -: 3912:                       !is_lvalue_reference<_Dp>::value &&
        -: 3913:                       !is_array<_Yp>::value &&
        -: 3914:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3915:                       __nat
        -: 3916:                   >::type = __nat());
        -: 3917:    template <class _Yp, class _Dp>
        -: 3918:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3919:                   typename enable_if
        -: 3920:                   <
        -: 3921:                       is_lvalue_reference<_Dp>::value &&
        -: 3922:                       !is_array<_Yp>::value &&
        -: 3923:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3924:                       __nat
        -: 3925:                   >::type = __nat());
        -: 3926:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3927:    template <class _Yp, class _Dp>
        -: 3928:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3929:                   typename enable_if
        -: 3930:                   <
        -: 3931:                       !is_lvalue_reference<_Dp>::value &&
        -: 3932:                       !is_array<_Yp>::value &&
        -: 3933:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3934:                       __nat
        -: 3935:                   >::type = __nat());
        -: 3936:    template <class _Yp, class _Dp>
        -: 3937:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3938:                   typename enable_if
        -: 3939:                   <
        -: 3940:                       is_lvalue_reference<_Dp>::value &&
        -: 3941:                       !is_array<_Yp>::value &&
        -: 3942:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3943:                       __nat
        -: 3944:                   >::type = __nat());
        -: 3945:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3946:
        -: 3947:    ~shared_ptr();
        -: 3948:
        -: 3949:    _LIBCPP_INLINE_VISIBILITY
        -: 3950:    shared_ptr& operator=(const shared_ptr& __r) _NOEXCEPT;
        -: 3951:    template<class _Yp>
        -: 3952:        typename enable_if
        -: 3953:        <
        -: 3954:            is_convertible<_Yp*, element_type*>::value,
        -: 3955:            shared_ptr&
        -: 3956:        >::type
        -: 3957:        _LIBCPP_INLINE_VISIBILITY
        -: 3958:        operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT;
        -: 3959:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3960:    _LIBCPP_INLINE_VISIBILITY
        -: 3961:    shared_ptr& operator=(shared_ptr&& __r) _NOEXCEPT;
        -: 3962:    template<class _Yp>
        -: 3963:        typename enable_if
        -: 3964:        <
        -: 3965:            is_convertible<_Yp*, element_type*>::value,
        -: 3966:            shared_ptr<_Tp>&
        -: 3967:        >::type
        -: 3968:        _LIBCPP_INLINE_VISIBILITY
        -: 3969:        operator=(shared_ptr<_Yp>&& __r);
        -: 3970:    template<class _Yp>
        -: 3971:        typename enable_if
        -: 3972:        <
        -: 3973:            !is_array<_Yp>::value &&
        -: 3974:            is_convertible<_Yp*, element_type*>::value,
        -: 3975:            shared_ptr
        -: 3976:        >::type&
        -: 3977:        _LIBCPP_INLINE_VISIBILITY
        -: 3978:        operator=(auto_ptr<_Yp>&& __r);
        -: 3979:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3980:    template<class _Yp>
        -: 3981:        typename enable_if
        -: 3982:        <
        -: 3983:            !is_array<_Yp>::value &&
        -: 3984:            is_convertible<_Yp*, element_type*>::value,
        -: 3985:            shared_ptr&
        -: 3986:        >::type
        -: 3987:        operator=(auto_ptr<_Yp> __r);
        -: 3988:#endif
        -: 3989:    template <class _Yp, class _Dp>
        -: 3990:        typename enable_if
        -: 3991:        <
        -: 3992:            !is_array<_Yp>::value &&
        -: 3993:            is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3994:            shared_ptr&
        -: 3995:        >::type
        -: 3996:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3997:        _LIBCPP_INLINE_VISIBILITY
        -: 3998:        operator=(unique_ptr<_Yp, _Dp>&& __r);
        -: 3999:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4000:        operator=(unique_ptr<_Yp, _Dp> __r);
        -: 4001:#endif
        -: 4002:
        -: 4003:    _LIBCPP_INLINE_VISIBILITY
        -: 4004:    void swap(shared_ptr& __r) _NOEXCEPT;
        -: 4005:    _LIBCPP_INLINE_VISIBILITY
        -: 4006:    void reset() _NOEXCEPT;
        -: 4007:    template<class _Yp>
        -: 4008:        typename enable_if
        -: 4009:        <
        -: 4010:            is_convertible<_Yp*, element_type*>::value,
        -: 4011:            void
        -: 4012:        >::type
        -: 4013:        _LIBCPP_INLINE_VISIBILITY
        -: 4014:        reset(_Yp* __p);
        -: 4015:    template<class _Yp, class _Dp>
        -: 4016:        typename enable_if
        -: 4017:        <
        -: 4018:            is_convertible<_Yp*, element_type*>::value,
        -: 4019:            void
        -: 4020:        >::type
        -: 4021:        _LIBCPP_INLINE_VISIBILITY
        -: 4022:        reset(_Yp* __p, _Dp __d);
        -: 4023:    template<class _Yp, class _Dp, class _Alloc>
        -: 4024:        typename enable_if
        -: 4025:        <
        -: 4026:            is_convertible<_Yp*, element_type*>::value,
        -: 4027:            void
        -: 4028:        >::type
        -: 4029:        _LIBCPP_INLINE_VISIBILITY
        -: 4030:        reset(_Yp* __p, _Dp __d, _Alloc __a);
        -: 4031:
        -: 4032:    _LIBCPP_INLINE_VISIBILITY
        -: 4033:    element_type* get() const _NOEXCEPT {return __ptr_;}
        -: 4034:    _LIBCPP_INLINE_VISIBILITY
        -: 4035:    typename add_lvalue_reference<element_type>::type operator*() const _NOEXCEPT
        -: 4036:        {return *__ptr_;}
        -: 4037:    _LIBCPP_INLINE_VISIBILITY
        -: 4038:    element_type* operator->() const _NOEXCEPT {return __ptr_;}
        -: 4039:    _LIBCPP_INLINE_VISIBILITY
        -: 4040:    long use_count() const _NOEXCEPT {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 4041:    _LIBCPP_INLINE_VISIBILITY
        -: 4042:    bool unique() const _NOEXCEPT {return use_count() == 1;}
        -: 4043:    _LIBCPP_INLINE_VISIBILITY
        -: 4044:    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {return get() != 0;}
        -: 4045:    template <class _Up>
        -: 4046:        _LIBCPP_INLINE_VISIBILITY
        -: 4047:        bool owner_before(shared_ptr<_Up> const& __p) const
        -: 4048:        {return __cntrl_ < __p.__cntrl_;}
        -: 4049:    template <class _Up>
        -: 4050:        _LIBCPP_INLINE_VISIBILITY
        -: 4051:        bool owner_before(weak_ptr<_Up> const& __p) const
        -: 4052:        {return __cntrl_ < __p.__cntrl_;}
        -: 4053:    _LIBCPP_INLINE_VISIBILITY
        -: 4054:    bool
        -: 4055:    __owner_equivalent(const shared_ptr& __p) const
        -: 4056:        {return __cntrl_ == __p.__cntrl_;}
        -: 4057:
        -: 4058:#ifndef _LIBCPP_NO_RTTI
        -: 4059:    template <class _Dp>
        -: 4060:        _LIBCPP_INLINE_VISIBILITY
        -: 4061:        _Dp* __get_deleter() const _NOEXCEPT
        -: 4062:            {return (_Dp*)(__cntrl_ ? __cntrl_->__get_deleter(typeid(_Dp)) : 0);}
        -: 4063:#endif  // _LIBCPP_NO_RTTI
        -: 4064:
        -: 4065:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4066:
        -: 4067:    template<class ..._Args>
        -: 4068:        static
        -: 4069:        shared_ptr<_Tp>
        -: 4070:        make_shared(_Args&& ...__args);
        -: 4071:
        -: 4072:    template<class _Alloc, class ..._Args>
        -: 4073:        static
        -: 4074:        shared_ptr<_Tp>
        -: 4075:        allocate_shared(const _Alloc& __a, _Args&& ...__args);
        -: 4076:
        -: 4077:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4078:
        -: 4079:    static shared_ptr<_Tp> make_shared();
        -: 4080:
        -: 4081:    template<class _A0>
        -: 4082:        static shared_ptr<_Tp> make_shared(_A0&);
        -: 4083:
        -: 4084:    template<class _A0, class _A1>
        -: 4085:        static shared_ptr<_Tp> make_shared(_A0&, _A1&);
        -: 4086:
        -: 4087:    template<class _A0, class _A1, class _A2>
        -: 4088:        static shared_ptr<_Tp> make_shared(_A0&, _A1&, _A2&);
        -: 4089:
        -: 4090:    template<class _Alloc>
        -: 4091:        static shared_ptr<_Tp>
        -: 4092:        allocate_shared(const _Alloc& __a);
        -: 4093:
        -: 4094:    template<class _Alloc, class _A0>
        -: 4095:        static shared_ptr<_Tp>
        -: 4096:        allocate_shared(const _Alloc& __a, _A0& __a0);
        -: 4097:
        -: 4098:    template<class _Alloc, class _A0, class _A1>
        -: 4099:        static shared_ptr<_Tp>
        -: 4100:        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1);
        -: 4101:
        -: 4102:    template<class _Alloc, class _A0, class _A1, class _A2>
        -: 4103:        static shared_ptr<_Tp>
        -: 4104:        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2);
        -: 4105:
        -: 4106:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4107:
        -: 4108:private:
        -: 4109:
        -: 4110:    template <class _Yp, class _OrigPtr>
        -: 4111:        _LIBCPP_INLINE_VISIBILITY
        -: 4112:        void
        -: 4113:        __enable_weak_this(const enable_shared_from_this<_Yp>* __e,
        -: 4114:                           _OrigPtr* __ptr) _NOEXCEPT
        -: 4115:        {
        -: 4116:            typedef typename remove_cv<_Yp>::type _RawYp;
        -: 4117:            if (__e)
        -: 4118:            {
        -: 4119:                __e->__weak_this_ = shared_ptr<_RawYp>(*this,
        -: 4120:                    const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));
        -: 4121:            }
        -: 4122:        }
        -: 4123:
        -: 4124:    _LIBCPP_INLINE_VISIBILITY
        -: 4125:    void __enable_weak_this(const volatile void*, const volatile void*) _NOEXCEPT {}
        -: 4126:
        -: 4127:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY shared_ptr;
        -: 4128:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY weak_ptr;
        -: 4129:};
        -: 4130:
        -: 4131:template<class _Tp>
        -: 4132:inline
        -: 4133:_LIBCPP_CONSTEXPR
        -: 4134:shared_ptr<_Tp>::shared_ptr() _NOEXCEPT
        -: 4135:    : __ptr_(0),
        -: 4136:      __cntrl_(0)
        -: 4137:{
        -: 4138:}
        -: 4139:
        -: 4140:template<class _Tp>
        -: 4141:inline
        -: 4142:_LIBCPP_CONSTEXPR
        -: 4143:shared_ptr<_Tp>::shared_ptr(nullptr_t) _NOEXCEPT
        -: 4144:    : __ptr_(0),
        -: 4145:      __cntrl_(0)
        -: 4146:{
        -: 4147:}
        -: 4148:
        -: 4149:template<class _Tp>
        -: 4150:template<class _Yp>
        -: 4151:shared_ptr<_Tp>::shared_ptr(_Yp* __p,
        -: 4152:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4153:    : __ptr_(__p)
        -: 4154:{
        -: 4155:    unique_ptr<_Yp> __hold(__p);
        -: 4156:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 4157:    __cntrl_ = new _CntrlBlk(__p, default_delete<_Yp>(), allocator<_Yp>());
        -: 4158:    __hold.release();
        -: 4159:    __enable_weak_this(__p, __p);
        -: 4160:}
        -: 4161:
        -: 4162:template<class _Tp>
        -: 4163:template<class _Yp, class _Dp>
        -: 4164:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d,
        -: 4165:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4166:    : __ptr_(__p)
        -: 4167:{
        -: 4168:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4169:    try
        -: 4170:    {
        -: 4171:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4172:        typedef __shared_ptr_pointer<_Yp*, _Dp, allocator<_Yp> > _CntrlBlk;
        -: 4173:        __cntrl_ = new _CntrlBlk(__p, __d, allocator<_Yp>());
        -: 4174:        __enable_weak_this(__p, __p);
        -: 4175:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4176:    }
        -: 4177:    catch (...)
        -: 4178:    {
        -: 4179:        __d(__p);
        -: 4180:        throw;
        -: 4181:    }
        -: 4182:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4183:}
        -: 4184:
        -: 4185:template<class _Tp>
        -: 4186:template<class _Dp>
        -: 4187:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d)
        -: 4188:    : __ptr_(0)
        -: 4189:{
        -: 4190:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4191:    try
        -: 4192:    {
        -: 4193:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4194:        typedef __shared_ptr_pointer<nullptr_t, _Dp, allocator<_Tp> > _CntrlBlk;
        -: 4195:        __cntrl_ = new _CntrlBlk(__p, __d, allocator<_Tp>());
        -: 4196:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4197:    }
        -: 4198:    catch (...)
        -: 4199:    {
        -: 4200:        __d(__p);
        -: 4201:        throw;
        -: 4202:    }
        -: 4203:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4204:}
        -: 4205:
        -: 4206:template<class _Tp>
        -: 4207:template<class _Yp, class _Dp, class _Alloc>
        -: 4208:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 4209:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4210:    : __ptr_(__p)
        -: 4211:{
        -: 4212:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4213:    try
        -: 4214:    {
        -: 4215:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4216:        typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
        -: 4217:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4218:        typedef __allocator_destructor<_A2> _D2;
        -: 4219:        _A2 __a2(__a);
        -: 4220:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4221:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4222:            _CntrlBlk(__p, __d, __a);
        -: 4223:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4224:        __enable_weak_this(__p, __p);
        -: 4225:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4226:    }
        -: 4227:    catch (...)
        -: 4228:    {
        -: 4229:        __d(__p);
        -: 4230:        throw;
        -: 4231:    }
        -: 4232:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4233:}
        -: 4234:
        -: 4235:template<class _Tp>
        -: 4236:template<class _Dp, class _Alloc>
        -: 4237:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a)
        -: 4238:    : __ptr_(0)
        -: 4239:{
        -: 4240:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4241:    try
        -: 4242:    {
        -: 4243:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4244:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
        -: 4245:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4246:        typedef __allocator_destructor<_A2> _D2;
        -: 4247:        _A2 __a2(__a);
        -: 4248:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4249:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4250:            _CntrlBlk(__p, __d, __a);
        -: 4251:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4252:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4253:    }
        -: 4254:    catch (...)
        -: 4255:    {
        -: 4256:        __d(__p);
        -: 4257:        throw;
        -: 4258:    }
        -: 4259:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4260:}
        -: 4261:
        -: 4262:template<class _Tp>
        -: 4263:template<class _Yp>
        -: 4264:inline
        -: 4265:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT
        -: 4266:    : __ptr_(__p),
        -: 4267:      __cntrl_(__r.__cntrl_)
        -: 4268:{
        -: 4269:    if (__cntrl_)
        -: 4270:        __cntrl_->__add_shared();
        -: 4271:}
        -: 4272:
        -: 4273:template<class _Tp>
        -: 4274:inline
        -: 4275:shared_ptr<_Tp>::shared_ptr(const shared_ptr& __r) _NOEXCEPT
        -: 4276:    : __ptr_(__r.__ptr_),
        -: 4277:      __cntrl_(__r.__cntrl_)
        -: 4278:{
        -: 4279:    if (__cntrl_)
        -: 4280:        __cntrl_->__add_shared();
        -: 4281:}
        -: 4282:
        -: 4283:template<class _Tp>
        -: 4284:template<class _Yp>
        -: 4285:inline
        -: 4286:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r,
        -: 4287:                            typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type)
        -: 4288:         _NOEXCEPT
        -: 4289:    : __ptr_(__r.__ptr_),
        -: 4290:      __cntrl_(__r.__cntrl_)
        -: 4291:{
        -: 4292:    if (__cntrl_)
        -: 4293:        __cntrl_->__add_shared();
        -: 4294:}
        -: 4295:
        -: 4296:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4297:
        -: 4298:template<class _Tp>
        -: 4299:inline
        -: 4300:shared_ptr<_Tp>::shared_ptr(shared_ptr&& __r) _NOEXCEPT
        -: 4301:    : __ptr_(__r.__ptr_),
        -: 4302:      __cntrl_(__r.__cntrl_)
        -: 4303:{
        -: 4304:    __r.__ptr_ = 0;
        -: 4305:    __r.__cntrl_ = 0;
        -: 4306:}
        -: 4307:
        -: 4308:template<class _Tp>
        -: 4309:template<class _Yp>
        -: 4310:inline
        -: 4311:shared_ptr<_Tp>::shared_ptr(shared_ptr<_Yp>&& __r,
        -: 4312:                            typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type)
        -: 4313:         _NOEXCEPT
        -: 4314:    : __ptr_(__r.__ptr_),
        -: 4315:      __cntrl_(__r.__cntrl_)
        -: 4316:{
        -: 4317:    __r.__ptr_ = 0;
        -: 4318:    __r.__cntrl_ = 0;
        -: 4319:}
        -: 4320:
        -: 4321:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4322:
        -: 4323:template<class _Tp>
        -: 4324:template<class _Yp>
        -: 4325:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4326:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp>&& __r,
        -: 4327:#else
        -: 4328:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp> __r,
        -: 4329:#endif
        -: 4330:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4331:    : __ptr_(__r.get())
        -: 4332:{
        -: 4333:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 4334:    __cntrl_ = new _CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>());
        -: 4335:    __enable_weak_this(__r.get(), __r.get());
        -: 4336:    __r.release();
        -: 4337:}
        -: 4338:
        -: 4339:template<class _Tp>
        -: 4340:template <class _Yp, class _Dp>
        -: 4341:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4342:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4343:#else
        -: 4344:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4345:#endif
        -: 4346:                            typename enable_if
        -: 4347:                            <
        -: 4348:                                !is_lvalue_reference<_Dp>::value &&
        -: 4349:                                !is_array<_Yp>::value &&
        -: 4350:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4351:                                __nat
        -: 4352:                            >::type)
        -: 4353:    : __ptr_(__r.get())
        -: 4354:{
        -: 4355:#if _LIBCPP_STD_VER > 11
        -: 4356:    if (__ptr_ == nullptr)
        -: 4357:        __cntrl_ = nullptr;
        -: 4358:    else
        -: 4359:#endif
        -: 4360:    {
        -: 4361:        typedef __shared_ptr_pointer<_Yp*, _Dp, allocator<_Yp> > _CntrlBlk;
        -: 4362:        __cntrl_ = new _CntrlBlk(__r.get(), __r.get_deleter(), allocator<_Yp>());
        -: 4363:        __enable_weak_this(__r.get(), __r.get());
        -: 4364:    }
        -: 4365:    __r.release();
        -: 4366:}
        -: 4367:
        -: 4368:template<class _Tp>
        -: 4369:template <class _Yp, class _Dp>
        -: 4370:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4371:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4372:#else
        -: 4373:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4374:#endif
        -: 4375:                            typename enable_if
        -: 4376:                            <
        -: 4377:                                is_lvalue_reference<_Dp>::value &&
        -: 4378:                                !is_array<_Yp>::value &&
        -: 4379:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4380:                                __nat
        -: 4381:                            >::type)
        -: 4382:    : __ptr_(__r.get())
        -: 4383:{
        -: 4384:#if _LIBCPP_STD_VER > 11
        -: 4385:    if (__ptr_ == nullptr)
        -: 4386:        __cntrl_ = nullptr;
        -: 4387:    else
        -: 4388:#endif
        -: 4389:    {
        -: 4390:        typedef __shared_ptr_pointer<_Yp*,
        -: 4391:                                     reference_wrapper<typename remove_reference<_Dp>::type>,
        -: 4392:                                     allocator<_Yp> > _CntrlBlk;
        -: 4393:        __cntrl_ = new _CntrlBlk(__r.get(), ref(__r.get_deleter()), allocator<_Yp>());
        -: 4394:        __enable_weak_this(__r.get(), __r.get());
        -: 4395:    }
        -: 4396:    __r.release();
        -: 4397:}
        -: 4398:
        -: 4399:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4400:
        -: 4401:template<class _Tp>
        -: 4402:template<class ..._Args>
        -: 4403:shared_ptr<_Tp>
        -: 4404:shared_ptr<_Tp>::make_shared(_Args&& ...__args)
        -: 4405:{
        -: 4406:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4407:    typedef allocator<_CntrlBlk> _A2;
        -: 4408:    typedef __allocator_destructor<_A2> _D2;
        -: 4409:    _A2 __a2;
        -: 4410:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4411:    ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...);
        -: 4412:    shared_ptr<_Tp> __r;
        -: 4413:    __r.__ptr_ = __hold2.get()->get();
        -: 4414:    __r.__cntrl_ = __hold2.release();
        -: 4415:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4416:    return __r;
        -: 4417:}
        -: 4418:
        -: 4419:template<class _Tp>
        -: 4420:template<class _Alloc, class ..._Args>
        -: 4421:shared_ptr<_Tp>
        -: 4422:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4423:{
        -: 4424:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4425:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4426:    typedef __allocator_destructor<_A2> _D2;
        -: 4427:    _A2 __a2(__a);
        -: 4428:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4429:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4430:        _CntrlBlk(__a, _VSTD::forward<_Args>(__args)...);
        -: 4431:    shared_ptr<_Tp> __r;
        -: 4432:    __r.__ptr_ = __hold2.get()->get();
        -: 4433:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4434:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4435:    return __r;
        -: 4436:}
        -: 4437:
        -: 4438:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4439:
        -: 4440:template<class _Tp>
        -: 4441:shared_ptr<_Tp>
        -: 4442:shared_ptr<_Tp>::make_shared()
        -: 4443:{
        -: 4444:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4445:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4446:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4447:    _Alloc2 __alloc2;
        -: 4448:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4449:    ::new(__hold2.get()) _CntrlBlk(__alloc2);
        -: 4450:    shared_ptr<_Tp> __r;
        -: 4451:    __r.__ptr_ = __hold2.get()->get();
        -: 4452:    __r.__cntrl_ = __hold2.release();
        -: 4453:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4454:    return __r;
        -: 4455:}
        -: 4456:
        -: 4457:template<class _Tp>
        -: 4458:template<class _A0>
        -: 4459:shared_ptr<_Tp>
        -: 4460:shared_ptr<_Tp>::make_shared(_A0& __a0)
        -: 4461:{
        -: 4462:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4463:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4464:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4465:    _Alloc2 __alloc2;
        -: 4466:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4467:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0);
        -: 4468:    shared_ptr<_Tp> __r;
        -: 4469:    __r.__ptr_ = __hold2.get()->get();
        -: 4470:    __r.__cntrl_ = __hold2.release();
        -: 4471:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4472:    return __r;
        -: 4473:}
        -: 4474:
        -: 4475:template<class _Tp>
        -: 4476:template<class _A0, class _A1>
        -: 4477:shared_ptr<_Tp>
        -: 4478:shared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1)
        -: 4479:{
        -: 4480:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4481:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4482:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4483:    _Alloc2 __alloc2;
        -: 4484:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4485:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1);
        -: 4486:    shared_ptr<_Tp> __r;
        -: 4487:    __r.__ptr_ = __hold2.get()->get();
        -: 4488:    __r.__cntrl_ = __hold2.release();
        -: 4489:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4490:    return __r;
        -: 4491:}
        -: 4492:
        -: 4493:template<class _Tp>
        -: 4494:template<class _A0, class _A1, class _A2>
        -: 4495:shared_ptr<_Tp>
        -: 4496:shared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1, _A2& __a2)
        -: 4497:{
        -: 4498:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4499:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4500:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4501:    _Alloc2 __alloc2;
        -: 4502:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4503:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1, __a2);
        -: 4504:    shared_ptr<_Tp> __r;
        -: 4505:    __r.__ptr_ = __hold2.get()->get();
        -: 4506:    __r.__cntrl_ = __hold2.release();
        -: 4507:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4508:    return __r;
        -: 4509:}
        -: 4510:
        -: 4511:template<class _Tp>
        -: 4512:template<class _Alloc>
        -: 4513:shared_ptr<_Tp>
        -: 4514:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a)
        -: 4515:{
        -: 4516:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4517:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4518:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4519:    _Alloc2 __alloc2(__a);
        -: 4520:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4521:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4522:        _CntrlBlk(__a);
        -: 4523:    shared_ptr<_Tp> __r;
        -: 4524:    __r.__ptr_ = __hold2.get()->get();
        -: 4525:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4526:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4527:    return __r;
        -: 4528:}
        -: 4529:
        -: 4530:template<class _Tp>
        -: 4531:template<class _Alloc, class _A0>
        -: 4532:shared_ptr<_Tp>
        -: 4533:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0)
        -: 4534:{
        -: 4535:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4536:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4537:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4538:    _Alloc2 __alloc2(__a);
        -: 4539:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4540:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4541:        _CntrlBlk(__a, __a0);
        -: 4542:    shared_ptr<_Tp> __r;
        -: 4543:    __r.__ptr_ = __hold2.get()->get();
        -: 4544:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4545:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4546:    return __r;
        -: 4547:}
        -: 4548:
        -: 4549:template<class _Tp>
        -: 4550:template<class _Alloc, class _A0, class _A1>
        -: 4551:shared_ptr<_Tp>
        -: 4552:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)
        -: 4553:{
        -: 4554:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4555:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4556:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4557:    _Alloc2 __alloc2(__a);
        -: 4558:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4559:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4560:        _CntrlBlk(__a, __a0, __a1);
        -: 4561:    shared_ptr<_Tp> __r;
        -: 4562:    __r.__ptr_ = __hold2.get()->get();
        -: 4563:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4564:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4565:    return __r;
        -: 4566:}
        -: 4567:
        -: 4568:template<class _Tp>
        -: 4569:template<class _Alloc, class _A0, class _A1, class _A2>
        -: 4570:shared_ptr<_Tp>
        -: 4571:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 4572:{
        -: 4573:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4574:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4575:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4576:    _Alloc2 __alloc2(__a);
        -: 4577:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4578:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4579:        _CntrlBlk(__a, __a0, __a1, __a2);
        -: 4580:    shared_ptr<_Tp> __r;
        -: 4581:    __r.__ptr_ = __hold2.get()->get();
        -: 4582:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4583:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4584:    return __r;
        -: 4585:}
        -: 4586:
        -: 4587:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4588:
        -: 4589:template<class _Tp>
        -: 4590:shared_ptr<_Tp>::~shared_ptr()
        -: 4591:{
        -: 4592:    if (__cntrl_)
        -: 4593:        __cntrl_->__release_shared();
        -: 4594:}
        -: 4595:
        -: 4596:template<class _Tp>
        -: 4597:inline
        -: 4598:shared_ptr<_Tp>&
        -: 4599:shared_ptr<_Tp>::operator=(const shared_ptr& __r) _NOEXCEPT
        -: 4600:{
        -: 4601:    shared_ptr(__r).swap(*this);
        -: 4602:    return *this;
        -: 4603:}
        -: 4604:
        -: 4605:template<class _Tp>
        -: 4606:template<class _Yp>
        -: 4607:inline
        -: 4608:typename enable_if
        -: 4609:<
        -: 4610:    is_convertible<_Yp*, _Tp*>::value,
        -: 4611:    shared_ptr<_Tp>&
        -: 4612:>::type
        -: 4613:shared_ptr<_Tp>::operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT
        -: 4614:{
        -: 4615:    shared_ptr(__r).swap(*this);
        -: 4616:    return *this;
        -: 4617:}
        -: 4618:
        -: 4619:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4620:
        -: 4621:template<class _Tp>
        -: 4622:inline
        -: 4623:shared_ptr<_Tp>&
        -: 4624:shared_ptr<_Tp>::operator=(shared_ptr&& __r) _NOEXCEPT
        -: 4625:{
        -: 4626:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4627:    return *this;
        -: 4628:}
        -: 4629:
        -: 4630:template<class _Tp>
        -: 4631:template<class _Yp>
        -: 4632:inline
        -: 4633:typename enable_if
        -: 4634:<
        -: 4635:    is_convertible<_Yp*, _Tp*>::value,
        -: 4636:    shared_ptr<_Tp>&
        -: 4637:>::type
        -: 4638:shared_ptr<_Tp>::operator=(shared_ptr<_Yp>&& __r)
        -: 4639:{
        -: 4640:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4641:    return *this;
        -: 4642:}
        -: 4643:
        -: 4644:template<class _Tp>
        -: 4645:template<class _Yp>
        -: 4646:inline
        -: 4647:typename enable_if
        -: 4648:<
        -: 4649:    !is_array<_Yp>::value &&
        -: 4650:    is_convertible<_Yp*, _Tp*>::value,
        -: 4651:    shared_ptr<_Tp>
        -: 4652:>::type&
        -: 4653:shared_ptr<_Tp>::operator=(auto_ptr<_Yp>&& __r)
        -: 4654:{
        -: 4655:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4656:    return *this;
        -: 4657:}
        -: 4658:
        -: 4659:template<class _Tp>
        -: 4660:template <class _Yp, class _Dp>
        -: 4661:inline
        -: 4662:typename enable_if
        -: 4663:<
        -: 4664:    !is_array<_Yp>::value &&
        -: 4665:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, _Tp*>::value,
        -: 4666:    shared_ptr<_Tp>&
        -: 4667:>::type
        -: 4668:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp>&& __r)
        -: 4669:{
        -: 4670:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4671:    return *this;
        -: 4672:}
        -: 4673:
        -: 4674:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4675:
        -: 4676:template<class _Tp>
        -: 4677:template<class _Yp>
        -: 4678:inline _LIBCPP_INLINE_VISIBILITY
        -: 4679:typename enable_if
        -: 4680:<
        -: 4681:    !is_array<_Yp>::value &&
        -: 4682:    is_convertible<_Yp*, _Tp*>::value,
        -: 4683:    shared_ptr<_Tp>&
        -: 4684:>::type
        -: 4685:shared_ptr<_Tp>::operator=(auto_ptr<_Yp> __r)
        -: 4686:{
        -: 4687:    shared_ptr(__r).swap(*this);
        -: 4688:    return *this;
        -: 4689:}
        -: 4690:
        -: 4691:template<class _Tp>
        -: 4692:template <class _Yp, class _Dp>
        -: 4693:inline _LIBCPP_INLINE_VISIBILITY
        -: 4694:typename enable_if
        -: 4695:<
        -: 4696:    !is_array<_Yp>::value &&
        -: 4697:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, _Tp*>::value,
        -: 4698:    shared_ptr<_Tp>&
        -: 4699:>::type
        -: 4700:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp> __r)
        -: 4701:{
        -: 4702:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4703:    return *this;
        -: 4704:}
        -: 4705:
        -: 4706:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4707:
        -: 4708:template<class _Tp>
        -: 4709:inline
        -: 4710:void
        -: 4711:shared_ptr<_Tp>::swap(shared_ptr& __r) _NOEXCEPT
        -: 4712:{
        -: 4713:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 4714:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 4715:}
        -: 4716:
        -: 4717:template<class _Tp>
        -: 4718:inline
        -: 4719:void
        -: 4720:shared_ptr<_Tp>::reset() _NOEXCEPT
        -: 4721:{
        -: 4722:    shared_ptr().swap(*this);
        -: 4723:}
        -: 4724:
        -: 4725:template<class _Tp>
        -: 4726:template<class _Yp>
        -: 4727:inline
        -: 4728:typename enable_if
        -: 4729:<
        -: 4730:    is_convertible<_Yp*, _Tp*>::value,
        -: 4731:    void
        -: 4732:>::type
        -: 4733:shared_ptr<_Tp>::reset(_Yp* __p)
        -: 4734:{
        -: 4735:    shared_ptr(__p).swap(*this);
        -: 4736:}
        -: 4737:
        -: 4738:template<class _Tp>
        -: 4739:template<class _Yp, class _Dp>
        -: 4740:inline
        -: 4741:typename enable_if
        -: 4742:<
        -: 4743:    is_convertible<_Yp*, _Tp*>::value,
        -: 4744:    void
        -: 4745:>::type
        -: 4746:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d)
        -: 4747:{
        -: 4748:    shared_ptr(__p, __d).swap(*this);
        -: 4749:}
        -: 4750:
        -: 4751:template<class _Tp>
        -: 4752:template<class _Yp, class _Dp, class _Alloc>
        -: 4753:inline
        -: 4754:typename enable_if
        -: 4755:<
        -: 4756:    is_convertible<_Yp*, _Tp*>::value,
        -: 4757:    void
        -: 4758:>::type
        -: 4759:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d, _Alloc __a)
        -: 4760:{
        -: 4761:    shared_ptr(__p, __d, __a).swap(*this);
        -: 4762:}
        -: 4763:
        -: 4764:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4765:
        -: 4766:template<class _Tp, class ..._Args>
        -: 4767:inline _LIBCPP_INLINE_VISIBILITY
        -: 4768:typename enable_if
        -: 4769:<
        -: 4770:    !is_array<_Tp>::value,
        -: 4771:    shared_ptr<_Tp>
        -: 4772:>::type
        -: 4773:make_shared(_Args&& ...__args)
        -: 4774:{
        -: 4775:    return shared_ptr<_Tp>::make_shared(_VSTD::forward<_Args>(__args)...);
        -: 4776:}
        -: 4777:
        -: 4778:template<class _Tp, class _Alloc, class ..._Args>
        -: 4779:inline _LIBCPP_INLINE_VISIBILITY
        -: 4780:typename enable_if
        -: 4781:<
        -: 4782:    !is_array<_Tp>::value,
        -: 4783:    shared_ptr<_Tp>
        -: 4784:>::type
        -: 4785:allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4786:{
        -: 4787:    return shared_ptr<_Tp>::allocate_shared(__a, _VSTD::forward<_Args>(__args)...);
        -: 4788:}
        -: 4789:
        -: 4790:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4791:
        -: 4792:template<class _Tp>
        -: 4793:inline _LIBCPP_INLINE_VISIBILITY
        -: 4794:shared_ptr<_Tp>
        -: 4795:make_shared()
        -: 4796:{
        -: 4797:    return shared_ptr<_Tp>::make_shared();
        -: 4798:}
        -: 4799:
        -: 4800:template<class _Tp, class _A0>
        -: 4801:inline _LIBCPP_INLINE_VISIBILITY
        -: 4802:shared_ptr<_Tp>
        -: 4803:make_shared(_A0& __a0)
        -: 4804:{
        -: 4805:    return shared_ptr<_Tp>::make_shared(__a0);
        -: 4806:}
        -: 4807:
        -: 4808:template<class _Tp, class _A0, class _A1>
        -: 4809:inline _LIBCPP_INLINE_VISIBILITY
        -: 4810:shared_ptr<_Tp>
        -: 4811:make_shared(_A0& __a0, _A1& __a1)
        -: 4812:{
        -: 4813:    return shared_ptr<_Tp>::make_shared(__a0, __a1);
        -: 4814:}
        -: 4815:
        -: 4816:template<class _Tp, class _A0, class _A1, class _A2>
        -: 4817:inline _LIBCPP_INLINE_VISIBILITY
        -: 4818:shared_ptr<_Tp>
        -: 4819:make_shared(_A0& __a0, _A1& __a1, _A2& __a2)
        -: 4820:{
        -: 4821:    return shared_ptr<_Tp>::make_shared(__a0, __a1, __a2);
        -: 4822:}
        -: 4823:
        -: 4824:template<class _Tp, class _Alloc>
        -: 4825:inline _LIBCPP_INLINE_VISIBILITY
        -: 4826:shared_ptr<_Tp>
        -: 4827:allocate_shared(const _Alloc& __a)
        -: 4828:{
        -: 4829:    return shared_ptr<_Tp>::allocate_shared(__a);
        -: 4830:}
        -: 4831:
        -: 4832:template<class _Tp, class _Alloc, class _A0>
        -: 4833:inline _LIBCPP_INLINE_VISIBILITY
        -: 4834:shared_ptr<_Tp>
        -: 4835:allocate_shared(const _Alloc& __a, _A0& __a0)
        -: 4836:{
        -: 4837:    return shared_ptr<_Tp>::allocate_shared(__a, __a0);
        -: 4838:}
        -: 4839:
        -: 4840:template<class _Tp, class _Alloc, class _A0, class _A1>
        -: 4841:inline _LIBCPP_INLINE_VISIBILITY
        -: 4842:shared_ptr<_Tp>
        -: 4843:allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)
        -: 4844:{
        -: 4845:    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1);
        -: 4846:}
        -: 4847:
        -: 4848:template<class _Tp, class _Alloc, class _A0, class _A1, class _A2>
        -: 4849:inline _LIBCPP_INLINE_VISIBILITY
        -: 4850:shared_ptr<_Tp>
        -: 4851:allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 4852:{
        -: 4853:    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1, __a2);
        -: 4854:}
        -: 4855:
        -: 4856:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4857:
        -: 4858:template<class _Tp, class _Up>
        -: 4859:inline _LIBCPP_INLINE_VISIBILITY
        -: 4860:bool
        -: 4861:operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4862:{
        -: 4863:    return __x.get() == __y.get();
        -: 4864:}
        -: 4865:
        -: 4866:template<class _Tp, class _Up>
        -: 4867:inline _LIBCPP_INLINE_VISIBILITY
        -: 4868:bool
        -: 4869:operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4870:{
        -: 4871:    return !(__x == __y);
        -: 4872:}
        -: 4873:
        -: 4874:template<class _Tp, class _Up>
        -: 4875:inline _LIBCPP_INLINE_VISIBILITY
        -: 4876:bool
        -: 4877:operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4878:{
        -: 4879:    typedef typename common_type<_Tp*, _Up*>::type _Vp;
        -: 4880:    return less<_Vp>()(__x.get(), __y.get());
        -: 4881:}
        -: 4882:
        -: 4883:template<class _Tp, class _Up>
        -: 4884:inline _LIBCPP_INLINE_VISIBILITY
        -: 4885:bool
        -: 4886:operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4887:{
        -: 4888:    return __y < __x;
        -: 4889:}
        -: 4890:
        -: 4891:template<class _Tp, class _Up>
        -: 4892:inline _LIBCPP_INLINE_VISIBILITY
        -: 4893:bool
        -: 4894:operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4895:{
        -: 4896:    return !(__y < __x);
        -: 4897:}
        -: 4898:
        -: 4899:template<class _Tp, class _Up>
        -: 4900:inline _LIBCPP_INLINE_VISIBILITY
        -: 4901:bool
        -: 4902:operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4903:{
        -: 4904:    return !(__x < __y);
        -: 4905:}
        -: 4906:
        -: 4907:template<class _Tp>
        -: 4908:inline _LIBCPP_INLINE_VISIBILITY
        -: 4909:bool
        -: 4910:operator==(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4911:{
        -: 4912:    return !__x;
        -: 4913:}
        -: 4914:
        -: 4915:template<class _Tp>
        -: 4916:inline _LIBCPP_INLINE_VISIBILITY
        -: 4917:bool
        -: 4918:operator==(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4919:{
        -: 4920:    return !__x;
        -: 4921:}
        -: 4922:
        -: 4923:template<class _Tp>
        -: 4924:inline _LIBCPP_INLINE_VISIBILITY
        -: 4925:bool
        -: 4926:operator!=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4927:{
        -: 4928:    return static_cast<bool>(__x);
        -: 4929:}
        -: 4930:
        -: 4931:template<class _Tp>
        -: 4932:inline _LIBCPP_INLINE_VISIBILITY
        -: 4933:bool
        -: 4934:operator!=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4935:{
        -: 4936:    return static_cast<bool>(__x);
        -: 4937:}
        -: 4938:
        -: 4939:template<class _Tp>
        -: 4940:inline _LIBCPP_INLINE_VISIBILITY
        -: 4941:bool
        -: 4942:operator<(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4943:{
        -: 4944:    return less<_Tp*>()(__x.get(), nullptr);
        -: 4945:}
        -: 4946:
        -: 4947:template<class _Tp>
        -: 4948:inline _LIBCPP_INLINE_VISIBILITY
        -: 4949:bool
        -: 4950:operator<(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4951:{
        -: 4952:    return less<_Tp*>()(nullptr, __x.get());
        -: 4953:}
        -: 4954:
        -: 4955:template<class _Tp>
        -: 4956:inline _LIBCPP_INLINE_VISIBILITY
        -: 4957:bool
        -: 4958:operator>(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4959:{
        -: 4960:    return nullptr < __x;
        -: 4961:}
        -: 4962:
        -: 4963:template<class _Tp>
        -: 4964:inline _LIBCPP_INLINE_VISIBILITY
        -: 4965:bool
        -: 4966:operator>(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4967:{
        -: 4968:    return __x < nullptr;
        -: 4969:}
        -: 4970:
        -: 4971:template<class _Tp>
        -: 4972:inline _LIBCPP_INLINE_VISIBILITY
        -: 4973:bool
        -: 4974:operator<=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4975:{
        -: 4976:    return !(nullptr < __x);
        -: 4977:}
        -: 4978:
        -: 4979:template<class _Tp>
        -: 4980:inline _LIBCPP_INLINE_VISIBILITY
        -: 4981:bool
        -: 4982:operator<=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4983:{
        -: 4984:    return !(__x < nullptr);
        -: 4985:}
        -: 4986:
        -: 4987:template<class _Tp>
        -: 4988:inline _LIBCPP_INLINE_VISIBILITY
        -: 4989:bool
        -: 4990:operator>=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4991:{
        -: 4992:    return !(__x < nullptr);
        -: 4993:}
        -: 4994:
        -: 4995:template<class _Tp>
        -: 4996:inline _LIBCPP_INLINE_VISIBILITY
        -: 4997:bool
        -: 4998:operator>=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4999:{
        -: 5000:    return !(nullptr < __x);
        -: 5001:}
        -: 5002:
        -: 5003:template<class _Tp>
        -: 5004:inline _LIBCPP_INLINE_VISIBILITY
        -: 5005:void
        -: 5006:swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) _NOEXCEPT
        -: 5007:{
        -: 5008:    __x.swap(__y);
        -: 5009:}
        -: 5010:
        -: 5011:template<class _Tp, class _Up>
        -: 5012:inline _LIBCPP_INLINE_VISIBILITY
        -: 5013:typename enable_if
        -: 5014:<
        -: 5015:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 5016:    shared_ptr<_Tp>
        -: 5017:>::type
        -: 5018:static_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 5019:{
        -: 5020:    return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get()));
        -: 5021:}
        -: 5022:
        -: 5023:template<class _Tp, class _Up>
        -: 5024:inline _LIBCPP_INLINE_VISIBILITY
        -: 5025:typename enable_if
        -: 5026:<
        -: 5027:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 5028:    shared_ptr<_Tp>
        -: 5029:>::type
        -: 5030:dynamic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 5031:{
        -: 5032:    _Tp* __p = dynamic_cast<_Tp*>(__r.get());
        -: 5033:    return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
        -: 5034:}
        -: 5035:
        -: 5036:template<class _Tp, class _Up>
        -: 5037:typename enable_if
        -: 5038:<
        -: 5039:    is_array<_Tp>::value == is_array<_Up>::value,
        -: 5040:    shared_ptr<_Tp>
        -: 5041:>::type
        -: 5042:const_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 5043:{
        -: 5044:    typedef typename remove_extent<_Tp>::type _RTp;
        -: 5045:    return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
        -: 5046:}
        -: 5047:
        -: 5048:#ifndef _LIBCPP_NO_RTTI
        -: 5049:
        -: 5050:template<class _Dp, class _Tp>
        -: 5051:inline _LIBCPP_INLINE_VISIBILITY
        -: 5052:_Dp*
        -: 5053:get_deleter(const shared_ptr<_Tp>& __p) _NOEXCEPT
        -: 5054:{
        -: 5055:    return __p.template __get_deleter<_Dp>();
        -: 5056:}
        -: 5057:
        -: 5058:#endif  // _LIBCPP_NO_RTTI
        -: 5059:
        -: 5060:template<class _Tp>
        -: 5061:class _LIBCPP_TYPE_VIS_ONLY weak_ptr
        -: 5062:{
        -: 5063:public:
        -: 5064:    typedef _Tp element_type;
        -: 5065:private:
        -: 5066:    element_type*        __ptr_;
        -: 5067:    __shared_weak_count* __cntrl_;
        -: 5068:
        -: 5069:public:
        -: 5070:    _LIBCPP_INLINE_VISIBILITY
        -: 5071:    _LIBCPP_CONSTEXPR weak_ptr() _NOEXCEPT;
        -: 5072:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(shared_ptr<_Yp> const& __r,
        -: 5073:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 5074:                        _NOEXCEPT;
        -: 5075:    _LIBCPP_INLINE_VISIBILITY
        -: 5076:    weak_ptr(weak_ptr const& __r) _NOEXCEPT;
        -: 5077:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp> const& __r,
        -: 5078:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 5079:                         _NOEXCEPT;
        -: 5080:
        -: 5081:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5082:    _LIBCPP_INLINE_VISIBILITY
        -: 5083:    weak_ptr(weak_ptr&& __r) _NOEXCEPT;
        -: 5084:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp>&& __r,
        -: 5085:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 5086:                         _NOEXCEPT;
        -: 5087:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5088:    ~weak_ptr();
        -: 5089:
        -: 5090:    _LIBCPP_INLINE_VISIBILITY
        -: 5091:    weak_ptr& operator=(weak_ptr const& __r) _NOEXCEPT;
        -: 5092:    template<class _Yp>
        -: 5093:        typename enable_if
        -: 5094:        <
        -: 5095:            is_convertible<_Yp*, element_type*>::value,
        -: 5096:            weak_ptr&
        -: 5097:        >::type
        -: 5098:        _LIBCPP_INLINE_VISIBILITY
        -: 5099:        operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 5100:
        -: 5101:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5102:
        -: 5103:    _LIBCPP_INLINE_VISIBILITY
        -: 5104:    weak_ptr& operator=(weak_ptr&& __r) _NOEXCEPT;
        -: 5105:    template<class _Yp>
        -: 5106:        typename enable_if
        -: 5107:        <
        -: 5108:            is_convertible<_Yp*, element_type*>::value,
        -: 5109:            weak_ptr&
        -: 5110:        >::type
        -: 5111:        _LIBCPP_INLINE_VISIBILITY
        -: 5112:        operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT;
        -: 5113:
        -: 5114:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5115:
        -: 5116:    template<class _Yp>
        -: 5117:        typename enable_if
        -: 5118:        <
        -: 5119:            is_convertible<_Yp*, element_type*>::value,
        -: 5120:            weak_ptr&
        -: 5121:        >::type
        -: 5122:        _LIBCPP_INLINE_VISIBILITY
        -: 5123:        operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 5124:
        -: 5125:    _LIBCPP_INLINE_VISIBILITY
        -: 5126:    void swap(weak_ptr& __r) _NOEXCEPT;
        -: 5127:    _LIBCPP_INLINE_VISIBILITY
        -: 5128:    void reset() _NOEXCEPT;
        -: 5129:
        -: 5130:    _LIBCPP_INLINE_VISIBILITY
        -: 5131:    long use_count() const _NOEXCEPT
        -: 5132:        {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 5133:    _LIBCPP_INLINE_VISIBILITY
        -: 5134:    bool expired() const _NOEXCEPT
        -: 5135:        {return __cntrl_ == 0 || __cntrl_->use_count() == 0;}
        -: 5136:    shared_ptr<_Tp> lock() const _NOEXCEPT;
        -: 5137:    template<class _Up>
        -: 5138:        _LIBCPP_INLINE_VISIBILITY
        -: 5139:        bool owner_before(const shared_ptr<_Up>& __r) const
        -: 5140:        {return __cntrl_ < __r.__cntrl_;}
        -: 5141:    template<class _Up>
        -: 5142:        _LIBCPP_INLINE_VISIBILITY
        -: 5143:        bool owner_before(const weak_ptr<_Up>& __r) const
        -: 5144:        {return __cntrl_ < __r.__cntrl_;}
        -: 5145:
        -: 5146:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY weak_ptr;
        -: 5147:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY shared_ptr;
        -: 5148:};
        -: 5149:
        -: 5150:template<class _Tp>
        -: 5151:inline
        -: 5152:_LIBCPP_CONSTEXPR
        -: 5153:weak_ptr<_Tp>::weak_ptr() _NOEXCEPT
        -: 5154:    : __ptr_(0),
        -: 5155:      __cntrl_(0)
        -: 5156:{
        -: 5157:}
        -: 5158:
        -: 5159:template<class _Tp>
        -: 5160:inline
        -: 5161:weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) _NOEXCEPT
        -: 5162:    : __ptr_(__r.__ptr_),
        -: 5163:      __cntrl_(__r.__cntrl_)
        -: 5164:{
        -: 5165:    if (__cntrl_)
        -: 5166:        __cntrl_->__add_weak();
        -: 5167:}
        -: 5168:
        -: 5169:template<class _Tp>
        -: 5170:template<class _Yp>
        -: 5171:inline
        -: 5172:weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r,
        -: 5173:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5174:                         _NOEXCEPT
        -: 5175:    : __ptr_(__r.__ptr_),
        -: 5176:      __cntrl_(__r.__cntrl_)
        -: 5177:{
        -: 5178:    if (__cntrl_)
        -: 5179:        __cntrl_->__add_weak();
        -: 5180:}
        -: 5181:
        -: 5182:template<class _Tp>
        -: 5183:template<class _Yp>
        -: 5184:inline
        -: 5185:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r,
        -: 5186:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5187:         _NOEXCEPT
        -: 5188:    : __ptr_(__r.__ptr_),
        -: 5189:      __cntrl_(__r.__cntrl_)
        -: 5190:{
        -: 5191:    if (__cntrl_)
        -: 5192:        __cntrl_->__add_weak();
        -: 5193:}
        -: 5194:
        -: 5195:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5196:
        -: 5197:template<class _Tp>
        -: 5198:inline
        -: 5199:weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) _NOEXCEPT
        -: 5200:    : __ptr_(__r.__ptr_),
        -: 5201:      __cntrl_(__r.__cntrl_)
        -: 5202:{
        -: 5203:    __r.__ptr_ = 0;
        -: 5204:    __r.__cntrl_ = 0;
        -: 5205:}
        -: 5206:
        -: 5207:template<class _Tp>
        -: 5208:template<class _Yp>
        -: 5209:inline
        -: 5210:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r,
        -: 5211:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5212:         _NOEXCEPT
        -: 5213:    : __ptr_(__r.__ptr_),
        -: 5214:      __cntrl_(__r.__cntrl_)
        -: 5215:{
        -: 5216:    __r.__ptr_ = 0;
        -: 5217:    __r.__cntrl_ = 0;
        -: 5218:}
        -: 5219:
        -: 5220:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5221:
        -: 5222:template<class _Tp>
        -: 5223:weak_ptr<_Tp>::~weak_ptr()
        -: 5224:{
        -: 5225:    if (__cntrl_)
        -: 5226:        __cntrl_->__release_weak();
        -: 5227:}
        -: 5228:
        -: 5229:template<class _Tp>
        -: 5230:inline
        -: 5231:weak_ptr<_Tp>&
        -: 5232:weak_ptr<_Tp>::operator=(weak_ptr const& __r) _NOEXCEPT
        -: 5233:{
        -: 5234:    weak_ptr(__r).swap(*this);
        -: 5235:    return *this;
        -: 5236:}
        -: 5237:
        -: 5238:template<class _Tp>
        -: 5239:template<class _Yp>
        -: 5240:inline
        -: 5241:typename enable_if
        -: 5242:<
        -: 5243:    is_convertible<_Yp*, _Tp*>::value,
        -: 5244:    weak_ptr<_Tp>&
        -: 5245:>::type
        -: 5246:weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT
        -: 5247:{
        -: 5248:    weak_ptr(__r).swap(*this);
        -: 5249:    return *this;
        -: 5250:}
        -: 5251:
        -: 5252:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5253:
        -: 5254:template<class _Tp>
        -: 5255:inline
        -: 5256:weak_ptr<_Tp>&
        -: 5257:weak_ptr<_Tp>::operator=(weak_ptr&& __r) _NOEXCEPT
        -: 5258:{
        -: 5259:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 5260:    return *this;
        -: 5261:}
        -: 5262:
        -: 5263:template<class _Tp>
        -: 5264:template<class _Yp>
        -: 5265:inline
        -: 5266:typename enable_if
        -: 5267:<
        -: 5268:    is_convertible<_Yp*, _Tp*>::value,
        -: 5269:    weak_ptr<_Tp>&
        -: 5270:>::type
        -: 5271:weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT
        -: 5272:{
        -: 5273:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 5274:    return *this;
        -: 5275:}
        -: 5276:
        -: 5277:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5278:
        -: 5279:template<class _Tp>
        -: 5280:template<class _Yp>
        -: 5281:inline
        -: 5282:typename enable_if
        -: 5283:<
        -: 5284:    is_convertible<_Yp*, _Tp*>::value,
        -: 5285:    weak_ptr<_Tp>&
        -: 5286:>::type
        -: 5287:weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT
        -: 5288:{
        -: 5289:    weak_ptr(__r).swap(*this);
        -: 5290:    return *this;
        -: 5291:}
        -: 5292:
        -: 5293:template<class _Tp>
        -: 5294:inline
        -: 5295:void
        -: 5296:weak_ptr<_Tp>::swap(weak_ptr& __r) _NOEXCEPT
        -: 5297:{
        -: 5298:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 5299:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 5300:}
        -: 5301:
        -: 5302:template<class _Tp>
        -: 5303:inline _LIBCPP_INLINE_VISIBILITY
        -: 5304:void
        -: 5305:swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) _NOEXCEPT
        -: 5306:{
        -: 5307:    __x.swap(__y);
        -: 5308:}
        -: 5309:
        -: 5310:template<class _Tp>
        -: 5311:inline
        -: 5312:void
        -: 5313:weak_ptr<_Tp>::reset() _NOEXCEPT
        -: 5314:{
        -: 5315:    weak_ptr().swap(*this);
        -: 5316:}
        -: 5317:
        -: 5318:template<class _Tp>
        -: 5319:template<class _Yp>
        -: 5320:shared_ptr<_Tp>::shared_ptr(const weak_ptr<_Yp>& __r,
        -: 5321:                            typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type)
        -: 5322:    : __ptr_(__r.__ptr_),
        -: 5323:      __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)
        -: 5324:{
        -: 5325:    if (__cntrl_ == 0)
        -: 5326:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 5327:        throw bad_weak_ptr();
        -: 5328:#else
        -: 5329:        assert(!"bad_weak_ptr");
        -: 5330:#endif
        -: 5331:}
        -: 5332:
        -: 5333:template<class _Tp>
        -: 5334:shared_ptr<_Tp>
        -: 5335:weak_ptr<_Tp>::lock() const _NOEXCEPT
        -: 5336:{
        -: 5337:    shared_ptr<_Tp> __r;
        -: 5338:    __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
        -: 5339:    if (__r.__cntrl_)
        -: 5340:        __r.__ptr_ = __ptr_;
        -: 5341:    return __r;
        -: 5342:}
        -: 5343:
        -: 5344:template <class _Tp> struct owner_less;
        -: 5345:
        -: 5346:template <class _Tp>
        -: 5347:struct _LIBCPP_TYPE_VIS_ONLY owner_less<shared_ptr<_Tp> >
        -: 5348:    : binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool>
        -: 5349:{
        -: 5350:    typedef bool result_type;
        -: 5351:    _LIBCPP_INLINE_VISIBILITY
        -: 5352:    bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const
        -: 5353:        {return __x.owner_before(__y);}
        -: 5354:    _LIBCPP_INLINE_VISIBILITY
        -: 5355:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const
        -: 5356:        {return __x.owner_before(__y);}
        -: 5357:    _LIBCPP_INLINE_VISIBILITY
        -: 5358:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const
        -: 5359:        {return __x.owner_before(__y);}
        -: 5360:};
        -: 5361:
        -: 5362:template <class _Tp>
        -: 5363:struct _LIBCPP_TYPE_VIS_ONLY owner_less<weak_ptr<_Tp> >
        -: 5364:    : binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool>
        -: 5365:{
        -: 5366:    typedef bool result_type;
        -: 5367:    _LIBCPP_INLINE_VISIBILITY
        -: 5368:    bool operator()(  weak_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const
        -: 5369:        {return __x.owner_before(__y);}
        -: 5370:    _LIBCPP_INLINE_VISIBILITY
        -: 5371:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const
        -: 5372:        {return __x.owner_before(__y);}
        -: 5373:    _LIBCPP_INLINE_VISIBILITY
        -: 5374:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const
        -: 5375:        {return __x.owner_before(__y);}
        -: 5376:};
        -: 5377:
        -: 5378:template<class _Tp>
        -: 5379:class _LIBCPP_TYPE_VIS_ONLY enable_shared_from_this
        -: 5380:{
        -: 5381:    mutable weak_ptr<_Tp> __weak_this_;
        -: 5382:protected:
        -: 5383:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 5384:    enable_shared_from_this() _NOEXCEPT {}
        -: 5385:    _LIBCPP_INLINE_VISIBILITY
        -: 5386:    enable_shared_from_this(enable_shared_from_this const&) _NOEXCEPT {}
        -: 5387:    _LIBCPP_INLINE_VISIBILITY
        -: 5388:    enable_shared_from_this& operator=(enable_shared_from_this const&) _NOEXCEPT
        -: 5389:        {return *this;}
        -: 5390:    _LIBCPP_INLINE_VISIBILITY
        -: 5391:    ~enable_shared_from_this() {}
        -: 5392:public:
        -: 5393:    _LIBCPP_INLINE_VISIBILITY
        -: 5394:    shared_ptr<_Tp> shared_from_this()
        -: 5395:        {return shared_ptr<_Tp>(__weak_this_);}
        -: 5396:    _LIBCPP_INLINE_VISIBILITY
        -: 5397:    shared_ptr<_Tp const> shared_from_this() const
        -: 5398:        {return shared_ptr<const _Tp>(__weak_this_);}
        -: 5399:
        -: 5400:    template <class _Up> friend class shared_ptr;
        -: 5401:};
        -: 5402:
        -: 5403:template <class _Tp>
        -: 5404:struct _LIBCPP_TYPE_VIS_ONLY hash<shared_ptr<_Tp> >
        -: 5405:{
        -: 5406:    typedef shared_ptr<_Tp>      argument_type;
        -: 5407:    typedef size_t               result_type;
        -: 5408:    _LIBCPP_INLINE_VISIBILITY
        -: 5409:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 5410:    {
        -: 5411:        return hash<_Tp*>()(__ptr.get());
        -: 5412:    }
        -: 5413:};
        -: 5414:
        -: 5415:template<class _CharT, class _Traits, class _Yp>
        -: 5416:inline _LIBCPP_INLINE_VISIBILITY
        -: 5417:basic_ostream<_CharT, _Traits>&
        -: 5418:operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);
        -: 5419:
        -: 5420:#if __has_feature(cxx_atomic) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 5421:
        -: 5422:class _LIBCPP_TYPE_VIS __sp_mut
        -: 5423:{
        -: 5424:    void* __lx;
        -: 5425:public:
        -: 5426:    void lock() _NOEXCEPT;
        -: 5427:    void unlock() _NOEXCEPT;
        -: 5428:
        -: 5429:private:
        -: 5430:    _LIBCPP_CONSTEXPR __sp_mut(void*) _NOEXCEPT;
        -: 5431:    __sp_mut(const __sp_mut&);
        -: 5432:    __sp_mut& operator=(const __sp_mut&);
        -: 5433:
        -: 5434:    friend _LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);
        -: 5435:};
        -: 5436:
        -: 5437:_LIBCPP_FUNC_VIS _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5438:__sp_mut& __get_sp_mut(const void*);
        -: 5439:
        -: 5440:template <class _Tp>
        -: 5441:inline _LIBCPP_INLINE_VISIBILITY
        -: 5442:bool
        -: 5443:atomic_is_lock_free(const shared_ptr<_Tp>*)
        -: 5444:{
        -: 5445:    return false;
        -: 5446:}
        -: 5447:
        -: 5448:template <class _Tp>
        -: 5449:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5450:shared_ptr<_Tp>
        -: 5451:atomic_load(const shared_ptr<_Tp>* __p)
        -: 5452:{
        -: 5453:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5454:    __m.lock();
        -: 5455:    shared_ptr<_Tp> __q = *__p;
        -: 5456:    __m.unlock();
        -: 5457:    return __q;
        -: 5458:}
        -: 5459:  
        -: 5460:template <class _Tp>
        -: 5461:inline _LIBCPP_INLINE_VISIBILITY
        -: 5462:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5463:shared_ptr<_Tp>
        -: 5464:atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
        -: 5465:{
        -: 5466:    return atomic_load(__p);
        -: 5467:}
        -: 5468:
        -: 5469:template <class _Tp>
        -: 5470:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5471:void
        -: 5472:atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5473:{
        -: 5474:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5475:    __m.lock();
        -: 5476:    __p->swap(__r);
        -: 5477:    __m.unlock();
        -: 5478:}
        -: 5479:
        -: 5480:template <class _Tp>
        -: 5481:inline _LIBCPP_INLINE_VISIBILITY
        -: 5482:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5483:void
        -: 5484:atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5485:{
        -: 5486:    atomic_store(__p, __r);
        -: 5487:}
        -: 5488:
        -: 5489:template <class _Tp>
        -: 5490:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5491:shared_ptr<_Tp>
        -: 5492:atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5493:{
        -: 5494:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5495:    __m.lock();
        -: 5496:    __p->swap(__r);
        -: 5497:    __m.unlock();
        -: 5498:    return __r;
        -: 5499:}
        -: 5500:  
        -: 5501:template <class _Tp>
        -: 5502:inline _LIBCPP_INLINE_VISIBILITY
        -: 5503:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5504:shared_ptr<_Tp>
        -: 5505:atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5506:{
        -: 5507:    return atomic_exchange(__p, __r);
        -: 5508:}
        -: 5509:
        -: 5510:template <class _Tp>
        -: 5511:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5512:bool
        -: 5513:atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5514:{
        -: 5515:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5516:    __m.lock();
        -: 5517:    if (__p->__owner_equivalent(*__v))
        -: 5518:    {
        -: 5519:        *__p = __w;
        -: 5520:        __m.unlock();
        -: 5521:        return true;
        -: 5522:    }
        -: 5523:    *__v = *__p;
        -: 5524:    __m.unlock();
        -: 5525:    return false;
        -: 5526:}
        -: 5527:
        -: 5528:template <class _Tp>
        -: 5529:inline _LIBCPP_INLINE_VISIBILITY
        -: 5530:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5531:bool
        -: 5532:atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5533:{
        -: 5534:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5535:}
        -: 5536:
        -: 5537:template <class _Tp>
        -: 5538:inline _LIBCPP_INLINE_VISIBILITY
        -: 5539:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5540:bool
        -: 5541:atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5542:                                        shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5543:{
        -: 5544:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5545:}
        -: 5546:
        -: 5547:template <class _Tp>
        -: 5548:inline _LIBCPP_INLINE_VISIBILITY
        -: 5549:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5550:bool
        -: 5551:atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5552:                                      shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5553:{
        -: 5554:    return atomic_compare_exchange_weak(__p, __v, __w);
        -: 5555:}
        -: 5556:
        -: 5557:#endif  // __has_feature(cxx_atomic) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 5558:
        -: 5559://enum class
        -: 5560:struct _LIBCPP_TYPE_VIS pointer_safety
        -: 5561:{
        -: 5562:    enum __lx
        -: 5563:    {
        -: 5564:        relaxed,
        -: 5565:        preferred,
        -: 5566:        strict
        -: 5567:    };
        -: 5568:
        -: 5569:    __lx __v_;
        -: 5570:
        -: 5571:    _LIBCPP_INLINE_VISIBILITY
        -: 5572:    pointer_safety(__lx __v) : __v_(__v) {}
        -: 5573:    _LIBCPP_INLINE_VISIBILITY
        -: 5574:    operator int() const {return __v_;}
        -: 5575:};
        -: 5576:
        -: 5577:_LIBCPP_FUNC_VIS void declare_reachable(void* __p);
        -: 5578:_LIBCPP_FUNC_VIS void declare_no_pointers(char* __p, size_t __n);
        -: 5579:_LIBCPP_FUNC_VIS void undeclare_no_pointers(char* __p, size_t __n);
        -: 5580:_LIBCPP_FUNC_VIS pointer_safety get_pointer_safety() _NOEXCEPT;
        -: 5581:_LIBCPP_FUNC_VIS void* __undeclare_reachable(void* __p);
        -: 5582:
        -: 5583:template <class _Tp>
        -: 5584:inline _LIBCPP_INLINE_VISIBILITY
        -: 5585:_Tp*
        -: 5586:undeclare_reachable(_Tp* __p)
        -: 5587:{
        -: 5588:    return static_cast<_Tp*>(__undeclare_reachable(__p));
        -: 5589:}
        -: 5590:
        -: 5591:_LIBCPP_FUNC_VIS void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);
        -: 5592:
        -: 5593:// --- Helper for container swap --
        -: 5594:template <typename _Alloc>
        -: 5595:_LIBCPP_INLINE_VISIBILITY
        -: 5596:void __swap_allocator(_Alloc & __a1, _Alloc & __a2)
        -: 5597:#if _LIBCPP_STD_VER >= 14
        -: 5598:    _NOEXCEPT
        -: 5599:#else
        -: 5600:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 5601:#endif
        -: 5602:{
        -: 5603:    __swap_allocator(__a1, __a2, 
        -: 5604:      integral_constant<bool, _VSTD::allocator_traits<_Alloc>::propagate_on_container_swap::value>());
        -: 5605:}
        -: 5606:
        -: 5607:template <typename _Alloc>
        -: 5608:_LIBCPP_INLINE_VISIBILITY
        -: 5609:void __swap_allocator(_Alloc & __a1, _Alloc & __a2, true_type)
        -: 5610:#if _LIBCPP_STD_VER >= 14
        -: 5611:    _NOEXCEPT
        -: 5612:#else
        -: 5613:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 5614:#endif
        -: 5615:{
        -: 5616:    using _VSTD::swap;
        -: 5617:    swap(__a1, __a2);
        -: 5618:}
        -: 5619:
        -: 5620:template <typename _Alloc>
        -: 5621:_LIBCPP_INLINE_VISIBILITY
        -: 5622:void __swap_allocator(_Alloc &, _Alloc &, false_type) _NOEXCEPT {}
        -: 5623:
        -: 5624:
        -: 5625:_LIBCPP_END_NAMESPACE_STD
        -: 5626:
        -: 5627:#endif  // _LIBCPP_MEMORY
