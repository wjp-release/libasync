        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/vector
        -:    0:Graph:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/ChaseLevDequeTOT.cc.gcno
        -:    0:Data:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/ChaseLevDequeTOT.cc.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===------------------------------ vector --------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is dual licensed under the MIT and the University of Illinois Open
        -:    7:// Source Licenses. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_VECTOR
        -:   12:#define _LIBCPP_VECTOR
        -:   13:
        -:   14:/*
        -:   15:    vector synopsis
        -:   16:
        -:   17:namespace std
        -:   18:{
        -:   19:
        -:   20:template <class T, class Allocator = allocator<T> >
        -:   21:class vector
        -:   22:{
        -:   23:public:
        -:   24:    typedef T                                        value_type;
        -:   25:    typedef Allocator                                allocator_type;
        -:   26:    typedef typename allocator_type::reference       reference;
        -:   27:    typedef typename allocator_type::const_reference const_reference;
        -:   28:    typedef implementation-defined                   iterator;
        -:   29:    typedef implementation-defined                   const_iterator;
        -:   30:    typedef typename allocator_type::size_type       size_type;
        -:   31:    typedef typename allocator_type::difference_type difference_type;
        -:   32:    typedef typename allocator_type::pointer         pointer;
        -:   33:    typedef typename allocator_type::const_pointer   const_pointer;
        -:   34:    typedef std::reverse_iterator<iterator>          reverse_iterator;
        -:   35:    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;
        -:   36:
        -:   37:    vector()
        -:   38:        noexcept(is_nothrow_default_constructible<allocator_type>::value);
        -:   39:    explicit vector(const allocator_type&);
        -:   40:    explicit vector(size_type n);
        -:   41:    explicit vector(size_type n, const allocator_type&); // C++14
        -:   42:    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());
        -:   43:    template <class InputIterator>
        -:   44:        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());
        -:   45:    vector(const vector& x);
        -:   46:    vector(vector&& x)
        -:   47:        noexcept(is_nothrow_move_constructible<allocator_type>::value);
        -:   48:    vector(initializer_list<value_type> il);
        -:   49:    vector(initializer_list<value_type> il, const allocator_type& a);
        -:   50:    ~vector();
        -:   51:    vector& operator=(const vector& x);
        -:   52:    vector& operator=(vector&& x)
        -:   53:        noexcept(
        -:   54:             allocator_type::propagate_on_container_move_assignment::value &&
        -:   55:             is_nothrow_move_assignable<allocator_type>::value);
        -:   56:    vector& operator=(initializer_list<value_type> il);
        -:   57:    template <class InputIterator>
        -:   58:        void assign(InputIterator first, InputIterator last);
        -:   59:    void assign(size_type n, const value_type& u);
        -:   60:    void assign(initializer_list<value_type> il);
        -:   61:
        -:   62:    allocator_type get_allocator() const noexcept;
        -:   63:
        -:   64:    iterator               begin() noexcept;
        -:   65:    const_iterator         begin()   const noexcept;
        -:   66:    iterator               end() noexcept;
        -:   67:    const_iterator         end()     const noexcept;
        -:   68:
        -:   69:    reverse_iterator       rbegin() noexcept;
        -:   70:    const_reverse_iterator rbegin()  const noexcept;
        -:   71:    reverse_iterator       rend() noexcept;
        -:   72:    const_reverse_iterator rend()    const noexcept;
        -:   73:
        -:   74:    const_iterator         cbegin()  const noexcept;
        -:   75:    const_iterator         cend()    const noexcept;
        -:   76:    const_reverse_iterator crbegin() const noexcept;
        -:   77:    const_reverse_iterator crend()   const noexcept;
        -:   78:
        -:   79:    size_type size() const noexcept;
        -:   80:    size_type max_size() const noexcept;
        -:   81:    size_type capacity() const noexcept;
        -:   82:    bool empty() const noexcept;
        -:   83:    void reserve(size_type n);
        -:   84:    void shrink_to_fit() noexcept;
        -:   85:
        -:   86:    reference       operator[](size_type n);
        -:   87:    const_reference operator[](size_type n) const;
        -:   88:    reference       at(size_type n);
        -:   89:    const_reference at(size_type n) const;
        -:   90:
        -:   91:    reference       front();
        -:   92:    const_reference front() const;
        -:   93:    reference       back();
        -:   94:    const_reference back() const;
        -:   95:
        -:   96:    value_type*       data() noexcept;
        -:   97:    const value_type* data() const noexcept;
        -:   98:
        -:   99:    void push_back(const value_type& x);
        -:  100:    void push_back(value_type&& x);
        -:  101:    template <class... Args>
        -:  102:        void emplace_back(Args&&... args);
        -:  103:    void pop_back();
        -:  104:
        -:  105:    template <class... Args> iterator emplace(const_iterator position, Args&&... args);
        -:  106:    iterator insert(const_iterator position, const value_type& x);
        -:  107:    iterator insert(const_iterator position, value_type&& x);
        -:  108:    iterator insert(const_iterator position, size_type n, const value_type& x);
        -:  109:    template <class InputIterator>
        -:  110:        iterator insert(const_iterator position, InputIterator first, InputIterator last);
        -:  111:    iterator insert(const_iterator position, initializer_list<value_type> il);
        -:  112:
        -:  113:    iterator erase(const_iterator position);
        -:  114:    iterator erase(const_iterator first, const_iterator last);
        -:  115:
        -:  116:    void clear() noexcept;
        -:  117:
        -:  118:    void resize(size_type sz);
        -:  119:    void resize(size_type sz, const value_type& c);
        -:  120:
        -:  121:    void swap(vector&)
        -:  122:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  123:                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17
        -:  124:
        -:  125:    bool __invariants() const;
        -:  126:};
        -:  127:
        -:  128:template <class Allocator = allocator<T> >
        -:  129:class vector<bool, Allocator>
        -:  130:{
        -:  131:public:
        -:  132:    typedef bool                                     value_type;
        -:  133:    typedef Allocator                                allocator_type;
        -:  134:    typedef implementation-defined                   iterator;
        -:  135:    typedef implementation-defined                   const_iterator;
        -:  136:    typedef typename allocator_type::size_type       size_type;
        -:  137:    typedef typename allocator_type::difference_type difference_type;
        -:  138:    typedef iterator                                 pointer;
        -:  139:    typedef const_iterator                           const_pointer;
        -:  140:    typedef std::reverse_iterator<iterator>          reverse_iterator;
        -:  141:    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;
        -:  142:
        -:  143:    class reference
        -:  144:    {
        -:  145:    public:
        -:  146:        reference(const reference&) noexcept;
        -:  147:        operator bool() const noexcept;
        -:  148:        reference& operator=(const bool x) noexcept;
        -:  149:        reference& operator=(const reference& x) noexcept;
        -:  150:        iterator operator&() const noexcept;
        -:  151:        void flip() noexcept;
        -:  152:    };
        -:  153:
        -:  154:    class const_reference
        -:  155:    {
        -:  156:    public:
        -:  157:        const_reference(const reference&) noexcept;
        -:  158:        operator bool() const noexcept;
        -:  159:        const_iterator operator&() const noexcept;
        -:  160:    };
        -:  161:
        -:  162:    vector()
        -:  163:        noexcept(is_nothrow_default_constructible<allocator_type>::value);
        -:  164:    explicit vector(const allocator_type&);
        -:  165:    explicit vector(size_type n, const allocator_type& a = allocator_type()); // C++14
        -:  166:    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());
        -:  167:    template <class InputIterator>
        -:  168:        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());
        -:  169:    vector(const vector& x);
        -:  170:    vector(vector&& x)
        -:  171:        noexcept(is_nothrow_move_constructible<allocator_type>::value);
        -:  172:    vector(initializer_list<value_type> il);
        -:  173:    vector(initializer_list<value_type> il, const allocator_type& a);
        -:  174:    ~vector();
        -:  175:    vector& operator=(const vector& x);
        -:  176:    vector& operator=(vector&& x)
        -:  177:        noexcept(
        -:  178:             allocator_type::propagate_on_container_move_assignment::value &&
        -:  179:             is_nothrow_move_assignable<allocator_type>::value);
        -:  180:    vector& operator=(initializer_list<value_type> il);
        -:  181:    template <class InputIterator>
        -:  182:        void assign(InputIterator first, InputIterator last);
        -:  183:    void assign(size_type n, const value_type& u);
        -:  184:    void assign(initializer_list<value_type> il);
        -:  185:
        -:  186:    allocator_type get_allocator() const noexcept;
        -:  187:
        -:  188:    iterator               begin() noexcept;
        -:  189:    const_iterator         begin()   const noexcept;
        -:  190:    iterator               end() noexcept;
        -:  191:    const_iterator         end()     const noexcept;
        -:  192:
        -:  193:    reverse_iterator       rbegin() noexcept;
        -:  194:    const_reverse_iterator rbegin()  const noexcept;
        -:  195:    reverse_iterator       rend() noexcept;
        -:  196:    const_reverse_iterator rend()    const noexcept;
        -:  197:
        -:  198:    const_iterator         cbegin()  const noexcept;
        -:  199:    const_iterator         cend()    const noexcept;
        -:  200:    const_reverse_iterator crbegin() const noexcept;
        -:  201:    const_reverse_iterator crend()   const noexcept;
        -:  202:
        -:  203:    size_type size() const noexcept;
        -:  204:    size_type max_size() const noexcept;
        -:  205:    size_type capacity() const noexcept;
        -:  206:    bool empty() const noexcept;
        -:  207:    void reserve(size_type n);
        -:  208:    void shrink_to_fit() noexcept;
        -:  209:
        -:  210:    reference       operator[](size_type n);
        -:  211:    const_reference operator[](size_type n) const;
        -:  212:    reference       at(size_type n);
        -:  213:    const_reference at(size_type n) const;
        -:  214:
        -:  215:    reference       front();
        -:  216:    const_reference front() const;
        -:  217:    reference       back();
        -:  218:    const_reference back() const;
        -:  219:
        -:  220:    void push_back(const value_type& x);
        -:  221:    template <class... Args> void emplace_back(Args&&... args);  // C++14
        -:  222:    void pop_back();
        -:  223:
        -:  224:    template <class... Args> iterator emplace(const_iterator position, Args&&... args);  // C++14
        -:  225:    iterator insert(const_iterator position, const value_type& x);
        -:  226:    iterator insert(const_iterator position, size_type n, const value_type& x);
        -:  227:    template <class InputIterator>
        -:  228:        iterator insert(const_iterator position, InputIterator first, InputIterator last);
        -:  229:    iterator insert(const_iterator position, initializer_list<value_type> il);
        -:  230:
        -:  231:    iterator erase(const_iterator position);
        -:  232:    iterator erase(const_iterator first, const_iterator last);
        -:  233:
        -:  234:    void clear() noexcept;
        -:  235:
        -:  236:    void resize(size_type sz);
        -:  237:    void resize(size_type sz, value_type x);
        -:  238:
        -:  239:    void swap(vector&)
        -:  240:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  241:                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17
        -:  242:    void flip() noexcept;
        -:  243:
        -:  244:    bool __invariants() const;
        -:  245:};
        -:  246:
        -:  247:template <class Allocator> struct hash<std::vector<bool, Allocator>>;
        -:  248:
        -:  249:template <class T, class Allocator> bool operator==(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  250:template <class T, class Allocator> bool operator< (const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  251:template <class T, class Allocator> bool operator!=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  252:template <class T, class Allocator> bool operator> (const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  253:template <class T, class Allocator> bool operator>=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  254:template <class T, class Allocator> bool operator<=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  255:
        -:  256:template <class T, class Allocator>
        -:  257:void swap(vector<T,Allocator>& x, vector<T,Allocator>& y)
        -:  258:    noexcept(noexcept(x.swap(y)));
        -:  259:
        -:  260:}  // std
        -:  261:
        -:  262:*/
        -:  263:
        -:  264:#include <__config>
        -:  265:#include <__bit_reference>
        -:  266:#include <type_traits>
        -:  267:#include <climits>
        -:  268:#include <limits>
        -:  269:#include <initializer_list>
        -:  270:#include <memory>
        -:  271:#include <stdexcept>
        -:  272:#include <algorithm>
        -:  273:#include <cstring>
        -:  274:#include <__split_buffer>
        -:  275:#include <__functional_base>
        -:  276:
        -:  277:#include <__undef_min_max>
        -:  278:
        -:  279:#include <__debug>
        -:  280:
        -:  281:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  282:#pragma GCC system_header
        -:  283:#endif
        -:  284:
        -:  285:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  286:
        -:  287:template <bool>
        -:  288:class __vector_base_common
        -:  289:{
        -:  290:protected:
        2:  291:    _LIBCPP_ALWAYS_INLINE __vector_base_common() {}
        -:  292:    void __throw_length_error() const;
        -:  293:    void __throw_out_of_range() const;
        -:  294:};
        -:  295:
        -:  296:template <bool __b>
        -:  297:void
        -:  298:__vector_base_common<__b>::__throw_length_error() const
        -:  299:{
        -:  300:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  301:    throw length_error("vector");
        -:  302:#else
        -:  303:    assert(!"vector length_error");
        -:  304:#endif
        -:  305:}
        -:  306:
        -:  307:template <bool __b>
        -:  308:void
        -:  309:__vector_base_common<__b>::__throw_out_of_range() const
        -:  310:{
        -:  311:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  312:    throw out_of_range("vector");
        -:  313:#else
        -:  314:    assert(!"vector out_of_range");
        -:  315:#endif
        -:  316:}
        -:  317:
        -:  318:#ifdef _LIBCPP_MSVC
        -:  319:#pragma warning( push )
        -:  320:#pragma warning( disable: 4231 )
        -:  321:#endif // _LIBCPP_MSVC
        -:  322:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_TYPE_VIS __vector_base_common<true>)
        -:  323:#ifdef _LIBCPP_MSVC
        -:  324:#pragma warning( pop )
        -:  325:#endif // _LIBCPP_MSVC
        -:  326:
        -:  327:template <class _Tp, class _Allocator>
        -:  328:class __vector_base
        -:  329:    : protected __vector_base_common<true>
        -:  330:{
        -:  331:protected:
        -:  332:    typedef _Tp                                      value_type;
        -:  333:    typedef _Allocator                               allocator_type;
        -:  334:    typedef allocator_traits<allocator_type>         __alloc_traits;
        -:  335:    typedef value_type&                              reference;
        -:  336:    typedef const value_type&                        const_reference;
        -:  337:    typedef typename __alloc_traits::size_type       size_type;
        -:  338:    typedef typename __alloc_traits::difference_type difference_type;
        -:  339:    typedef typename __alloc_traits::pointer         pointer;
        -:  340:    typedef typename __alloc_traits::const_pointer   const_pointer;
        -:  341:    typedef pointer                                  iterator;
        -:  342:    typedef const_pointer                            const_iterator;
        -:  343:
        -:  344:    pointer                                         __begin_;
        -:  345:    pointer                                         __end_;
        -:  346:    __compressed_pair<pointer, allocator_type> __end_cap_;
        -:  347:
        -:  348:    _LIBCPP_INLINE_VISIBILITY
        -:  349:    allocator_type& __alloc() _NOEXCEPT
       52:  350:        {return __end_cap_.second();}
        -:  351:    _LIBCPP_INLINE_VISIBILITY
        -:  352:    const allocator_type& __alloc() const _NOEXCEPT
       10:  353:        {return __end_cap_.second();}
        -:  354:    _LIBCPP_INLINE_VISIBILITY
        -:  355:    pointer& __end_cap() _NOEXCEPT
       30:  356:        {return __end_cap_.first();}
        -:  357:    _LIBCPP_INLINE_VISIBILITY
        -:  358:    const pointer& __end_cap() const _NOEXCEPT
       52:  359:        {return __end_cap_.first();}
        -:  360:
        -:  361:    _LIBCPP_INLINE_VISIBILITY
        2:  362:    __vector_base()
        -:  363:        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);
        -:  364:    _LIBCPP_INLINE_VISIBILITY __vector_base(const allocator_type& __a);
        -:  365:    ~__vector_base();
        -:  366:
        -:  367:    _LIBCPP_INLINE_VISIBILITY
        2:  368:    void clear() _NOEXCEPT {__destruct_at_end(__begin_);}
        -:  369:    _LIBCPP_INLINE_VISIBILITY
        -:  370:    size_type capacity() const _NOEXCEPT
       52:  371:        {return static_cast<size_type>(__end_cap() - __begin_);}
        -:  372:
        -:  373:    _LIBCPP_INLINE_VISIBILITY
        -:  374:    void __destruct_at_end(pointer __new_last) _NOEXCEPT;
        -:  375:
        -:  376:    _LIBCPP_INLINE_VISIBILITY
        -:  377:    void __copy_assign_alloc(const __vector_base& __c)
        -:  378:        {__copy_assign_alloc(__c, integral_constant<bool,
        -:  379:                      __alloc_traits::propagate_on_container_copy_assignment::value>());}
        -:  380:
        -:  381:    _LIBCPP_INLINE_VISIBILITY
        -:  382:    void __move_assign_alloc(__vector_base& __c)
        -:  383:        _NOEXCEPT_(
        -:  384:            !__alloc_traits::propagate_on_container_move_assignment::value ||
        -:  385:            is_nothrow_move_assignable<allocator_type>::value)
        -:  386:        {__move_assign_alloc(__c, integral_constant<bool,
        -:  387:                      __alloc_traits::propagate_on_container_move_assignment::value>());}
        -:  388:private:
        -:  389:    _LIBCPP_INLINE_VISIBILITY
        -:  390:    void __copy_assign_alloc(const __vector_base& __c, true_type)
        -:  391:        {
        -:  392:            if (__alloc() != __c.__alloc())
        -:  393:            {
        -:  394:                clear();
        -:  395:                __alloc_traits::deallocate(__alloc(), __begin_, capacity());
        -:  396:                __begin_ = __end_ = __end_cap() = nullptr;
        -:  397:            }
        -:  398:            __alloc() = __c.__alloc();
        -:  399:        }
        -:  400:
        -:  401:    _LIBCPP_INLINE_VISIBILITY
        -:  402:    void __copy_assign_alloc(const __vector_base&, false_type)
        -:  403:        {}
        -:  404:
        -:  405:    _LIBCPP_INLINE_VISIBILITY
        -:  406:    void __move_assign_alloc(__vector_base& __c, true_type)
        -:  407:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -:  408:        {
        -:  409:            __alloc() = _VSTD::move(__c.__alloc());
        -:  410:        }
        -:  411:
        -:  412:    _LIBCPP_INLINE_VISIBILITY
        -:  413:    void __move_assign_alloc(__vector_base&, false_type)
        -:  414:        _NOEXCEPT
        -:  415:        {}
        -:  416:};
        -:  417:
        -:  418:template <class _Tp, class _Allocator>
        -:  419:inline _LIBCPP_INLINE_VISIBILITY
        -:  420:void
        -:  421:__vector_base<_Tp, _Allocator>::__destruct_at_end(pointer __new_last) _NOEXCEPT
        -:  422:{
       44:  423:    while (__new_last != __end_)
       20:  424:        __alloc_traits::destroy(__alloc(), _VSTD::__to_raw_pointer(--__end_));
        2:  425:}
        -:  426:
        -:  427:template <class _Tp, class _Allocator>
        -:  428:inline _LIBCPP_INLINE_VISIBILITY
        -:  429:__vector_base<_Tp, _Allocator>::__vector_base()
        -:  430:        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
        2:  431:    : __begin_(nullptr),
        2:  432:      __end_(nullptr),
        2:  433:      __end_cap_(nullptr)
        2:  434:{
        2:  435:}
        -:  436:
        -:  437:template <class _Tp, class _Allocator>
        -:  438:inline _LIBCPP_INLINE_VISIBILITY
        -:  439:__vector_base<_Tp, _Allocator>::__vector_base(const allocator_type& __a)
        -:  440:    : __begin_(nullptr),
        -:  441:      __end_(nullptr),
        -:  442:      __end_cap_(nullptr, __a)
        -:  443:{
        -:  444:}
        -:  445:
        -:  446:template <class _Tp, class _Allocator>
        -:  447:__vector_base<_Tp, _Allocator>::~__vector_base()
        -:  448:{
        2:  449:    if (__begin_ != nullptr)
        -:  450:    {
        2:  451:        clear();
        2:  452:        __alloc_traits::deallocate(__alloc(), __begin_, capacity());
        2:  453:    }
        2:  454:}
        -:  455:
        -:  456:template <class _Tp, class _Allocator = allocator<_Tp> >
        -:  457:class _LIBCPP_TYPE_VIS_ONLY vector
        -:  458:    : private __vector_base<_Tp, _Allocator>
        -:  459:{
        -:  460:private:
        -:  461:    typedef __vector_base<_Tp, _Allocator>           __base;
        -:  462:    typedef allocator<_Tp>                           __default_allocator_type;
        -:  463:public:
        -:  464:    typedef vector                                   __self;
        -:  465:    typedef _Tp                                      value_type;
        -:  466:    typedef _Allocator                               allocator_type;
        -:  467:    typedef typename __base::__alloc_traits          __alloc_traits;
        -:  468:    typedef typename __base::reference               reference;
        -:  469:    typedef typename __base::const_reference         const_reference;
        -:  470:    typedef typename __base::size_type               size_type;
        -:  471:    typedef typename __base::difference_type         difference_type;
        -:  472:    typedef typename __base::pointer                 pointer;
        -:  473:    typedef typename __base::const_pointer           const_pointer;
        -:  474:    typedef __wrap_iter<pointer>                     iterator;
        -:  475:    typedef __wrap_iter<const_pointer>               const_iterator;
        -:  476:    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;
        -:  477:    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;
        -:  478:
        -:  479:    static_assert((is_same<typename allocator_type::value_type, value_type>::value),
        -:  480:                  "Allocator::value_type must be same type as value_type");
        -:  481:
        -:  482:    _LIBCPP_INLINE_VISIBILITY
        2:  483:    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
        4:  484:        {
        -:  485:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  486:            __get_db()->__insert_c(this);
        -:  487:#endif
        4:  488:        }
        -:  489:    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)
        -:  490:#if _LIBCPP_STD_VER <= 14
        -:  491:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -:  492:#else
        -:  493:        _NOEXCEPT
        -:  494:#endif
        -:  495:        : __base(__a)
        -:  496:    {
        -:  497:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  498:        __get_db()->__insert_c(this);
        -:  499:#endif
        -:  500:    }
        -:  501:    explicit vector(size_type __n);
        -:  502:#if _LIBCPP_STD_VER > 11
        -:  503:    explicit vector(size_type __n, const allocator_type& __a);
        -:  504:#endif
        -:  505:    vector(size_type __n, const_reference __x);
        -:  506:    vector(size_type __n, const_reference __x, const allocator_type& __a);
        -:  507:    template <class _InputIterator>
        -:  508:        vector(_InputIterator __first,
        -:  509:               typename enable_if<__is_input_iterator  <_InputIterator>::value &&
        -:  510:                                 !__is_forward_iterator<_InputIterator>::value &&
        -:  511:                                 is_constructible<
        -:  512:                                    value_type,
        -:  513:                                    typename iterator_traits<_InputIterator>::reference>::value,
        -:  514:                                 _InputIterator>::type __last);
        -:  515:    template <class _InputIterator>
        -:  516:        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -:  517:               typename enable_if<__is_input_iterator  <_InputIterator>::value &&
        -:  518:                                 !__is_forward_iterator<_InputIterator>::value &&
        -:  519:                                 is_constructible<
        -:  520:                                    value_type,
        -:  521:                                    typename iterator_traits<_InputIterator>::reference>::value>::type* = 0);
        -:  522:    template <class _ForwardIterator>
        -:  523:        vector(_ForwardIterator __first,
        -:  524:               typename enable_if<__is_forward_iterator<_ForwardIterator>::value &&
        -:  525:                                 is_constructible<
        -:  526:                                    value_type,
        -:  527:                                    typename iterator_traits<_ForwardIterator>::reference>::value,
        -:  528:                                 _ForwardIterator>::type __last);
        -:  529:    template <class _ForwardIterator>
        -:  530:        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -:  531:               typename enable_if<__is_forward_iterator<_ForwardIterator>::value &&
        -:  532:                                 is_constructible<
        -:  533:                                    value_type,
        -:  534:                                    typename iterator_traits<_ForwardIterator>::reference>::value>::type* = 0);
        -:  535:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -:  536:    _LIBCPP_INLINE_VISIBILITY
        -:  537:    vector(initializer_list<value_type> __il);
        -:  538:    _LIBCPP_INLINE_VISIBILITY
        -:  539:    vector(initializer_list<value_type> __il, const allocator_type& __a);
        -:  540:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -:  541:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  542:    _LIBCPP_INLINE_VISIBILITY
        -:  543:    ~vector()
        -:  544:    {
        -:  545:        __get_db()->__erase_c(this);
        -:  546:    }
        -:  547:#endif
        -:  548:
        -:  549:    vector(const vector& __x);
        -:  550:    vector(const vector& __x, const allocator_type& __a);
        -:  551:    _LIBCPP_INLINE_VISIBILITY
        -:  552:    vector& operator=(const vector& __x);
        -:  553:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  554:    _LIBCPP_INLINE_VISIBILITY
        -:  555:    vector(vector&& __x)
        -:  556:#if _LIBCPP_STD_VER > 14
        -:  557:        _NOEXCEPT;
        -:  558:#else
        -:  559:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);
        -:  560:#endif
        -:  561:    _LIBCPP_INLINE_VISIBILITY
        -:  562:    vector(vector&& __x, const allocator_type& __a);
        -:  563:    _LIBCPP_INLINE_VISIBILITY
        -:  564:    vector& operator=(vector&& __x)
        -:  565:        _NOEXCEPT_(
        -:  566:             __alloc_traits::propagate_on_container_move_assignment::value &&
        -:  567:             is_nothrow_move_assignable<allocator_type>::value);
        -:  568:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  569:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -:  570:    _LIBCPP_INLINE_VISIBILITY
        -:  571:    vector& operator=(initializer_list<value_type> __il)
        -:  572:        {assign(__il.begin(), __il.end()); return *this;}
        -:  573:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -:  574:
        -:  575:    template <class _InputIterator>
        -:  576:        typename enable_if
        -:  577:        <
        -:  578:             __is_input_iterator  <_InputIterator>::value &&
        -:  579:            !__is_forward_iterator<_InputIterator>::value &&
        -:  580:            is_constructible<
        -:  581:                 value_type,
        -:  582:                 typename iterator_traits<_InputIterator>::reference>::value,
        -:  583:            void
        -:  584:        >::type
        -:  585:        assign(_InputIterator __first, _InputIterator __last);
        -:  586:    template <class _ForwardIterator>
        -:  587:        typename enable_if
        -:  588:        <
        -:  589:            __is_forward_iterator<_ForwardIterator>::value &&
        -:  590:            is_constructible<
        -:  591:                 value_type,
        -:  592:                 typename iterator_traits<_ForwardIterator>::reference>::value,
        -:  593:            void
        -:  594:        >::type
        -:  595:        assign(_ForwardIterator __first, _ForwardIterator __last);
        -:  596:
        -:  597:    void assign(size_type __n, const_reference __u);
        -:  598:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -:  599:    _LIBCPP_INLINE_VISIBILITY
        -:  600:    void assign(initializer_list<value_type> __il)
        -:  601:        {assign(__il.begin(), __il.end());}
        -:  602:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -:  603:
        -:  604:    _LIBCPP_INLINE_VISIBILITY
        -:  605:    allocator_type get_allocator() const _NOEXCEPT
        -:  606:        {return this->__alloc();}
        -:  607:
        -:  608:    _LIBCPP_INLINE_VISIBILITY iterator               begin() _NOEXCEPT;
        -:  609:    _LIBCPP_INLINE_VISIBILITY const_iterator         begin()   const _NOEXCEPT;
        -:  610:    _LIBCPP_INLINE_VISIBILITY iterator               end() _NOEXCEPT;
        -:  611:    _LIBCPP_INLINE_VISIBILITY const_iterator         end()     const _NOEXCEPT;
        -:  612:
        -:  613:    _LIBCPP_INLINE_VISIBILITY
        -:  614:    reverse_iterator       rbegin() _NOEXCEPT
        -:  615:        {return       reverse_iterator(end());}
        -:  616:    _LIBCPP_INLINE_VISIBILITY
        -:  617:    const_reverse_iterator rbegin()  const _NOEXCEPT
        -:  618:        {return const_reverse_iterator(end());}
        -:  619:    _LIBCPP_INLINE_VISIBILITY
        -:  620:    reverse_iterator       rend() _NOEXCEPT
        -:  621:        {return       reverse_iterator(begin());}
        -:  622:    _LIBCPP_INLINE_VISIBILITY
        -:  623:    const_reverse_iterator rend()    const _NOEXCEPT
        -:  624:        {return const_reverse_iterator(begin());}
        -:  625:
        -:  626:    _LIBCPP_INLINE_VISIBILITY
        -:  627:    const_iterator         cbegin()  const _NOEXCEPT
        -:  628:        {return begin();}
        -:  629:    _LIBCPP_INLINE_VISIBILITY
        -:  630:    const_iterator         cend()    const _NOEXCEPT
        -:  631:        {return end();}
        -:  632:    _LIBCPP_INLINE_VISIBILITY
        -:  633:    const_reverse_iterator crbegin() const _NOEXCEPT
        -:  634:        {return rbegin();}
        -:  635:    _LIBCPP_INLINE_VISIBILITY
        -:  636:    const_reverse_iterator crend()   const _NOEXCEPT
        -:  637:        {return rend();}
        -:  638:
        -:  639:    _LIBCPP_INLINE_VISIBILITY
        -:  640:    size_type size() const _NOEXCEPT
       62:  641:        {return static_cast<size_type>(this->__end_ - this->__begin_);}
        -:  642:    _LIBCPP_INLINE_VISIBILITY
        -:  643:    size_type capacity() const _NOEXCEPT
       50:  644:        {return __base::capacity();}
        -:  645:    _LIBCPP_INLINE_VISIBILITY
        -:  646:    bool empty() const _NOEXCEPT
        -:  647:        {return this->__begin_ == this->__end_;}
        -:  648:    size_type max_size() const _NOEXCEPT;
        -:  649:    void reserve(size_type __n);
        -:  650:    void shrink_to_fit() _NOEXCEPT;
        -:  651:
        -:  652:    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n);
        -:  653:    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const;
        -:  654:    reference       at(size_type __n);
        -:  655:    const_reference at(size_type __n) const;
        -:  656:
        -:  657:    _LIBCPP_INLINE_VISIBILITY reference       front()
        -:  658:    {
        -:  659:        _LIBCPP_ASSERT(!empty(), "front() called for empty vector");
        -:  660:        return *this->__begin_;
        -:  661:    }
        -:  662:    _LIBCPP_INLINE_VISIBILITY const_reference front() const
        -:  663:    {
        -:  664:        _LIBCPP_ASSERT(!empty(), "front() called for empty vector");
        -:  665:        return *this->__begin_;
        -:  666:    }
        -:  667:    _LIBCPP_INLINE_VISIBILITY reference       back()
        -:  668:    {
        -:  669:        _LIBCPP_ASSERT(!empty(), "back() called for empty vector");
        -:  670:        return *(this->__end_ - 1);
        -:  671:    }
        -:  672:    _LIBCPP_INLINE_VISIBILITY const_reference back()  const
        -:  673:    {
        -:  674:        _LIBCPP_ASSERT(!empty(), "back() called for empty vector");
        -:  675:        return *(this->__end_ - 1);
        -:  676:    }
        -:  677:
        -:  678:    _LIBCPP_INLINE_VISIBILITY
        -:  679:    value_type*       data() _NOEXCEPT
        -:  680:        {return _VSTD::__to_raw_pointer(this->__begin_);}
        -:  681:    _LIBCPP_INLINE_VISIBILITY
        -:  682:    const value_type* data() const _NOEXCEPT
       80:  683:        {return _VSTD::__to_raw_pointer(this->__begin_);}
        -:  684:
        -:  685:    _LIBCPP_INLINE_VISIBILITY void push_back(const_reference __x);
        -:  686:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  687:    _LIBCPP_INLINE_VISIBILITY void push_back(value_type&& __x);
        -:  688:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  689:    template <class... _Args>
        -:  690:        _LIBCPP_INLINE_VISIBILITY
        -:  691:        void emplace_back(_Args&&... __args);
        -:  692:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  693:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  694:    _LIBCPP_INLINE_VISIBILITY
        -:  695:    void pop_back();
        -:  696:
        -:  697:    iterator insert(const_iterator __position, const_reference __x);
        -:  698:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  699:    iterator insert(const_iterator __position, value_type&& __x);
        -:  700:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  701:    template <class... _Args>
        -:  702:        iterator emplace(const_iterator __position, _Args&&... __args);
        -:  703:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  704:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  705:    iterator insert(const_iterator __position, size_type __n, const_reference __x);
        -:  706:    template <class _InputIterator>
        -:  707:        typename enable_if
        -:  708:        <
        -:  709:             __is_input_iterator  <_InputIterator>::value &&
        -:  710:            !__is_forward_iterator<_InputIterator>::value &&
        -:  711:            is_constructible<
        -:  712:                 value_type,
        -:  713:                 typename iterator_traits<_InputIterator>::reference>::value,
        -:  714:            iterator
        -:  715:        >::type
        -:  716:        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
        -:  717:    template <class _ForwardIterator>
        -:  718:        typename enable_if
        -:  719:        <
        -:  720:            __is_forward_iterator<_ForwardIterator>::value &&
        -:  721:            is_constructible<
        -:  722:                 value_type,
        -:  723:                 typename iterator_traits<_ForwardIterator>::reference>::value,
        -:  724:            iterator
        -:  725:        >::type
        -:  726:        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);
        -:  727:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -:  728:    _LIBCPP_INLINE_VISIBILITY
        -:  729:    iterator insert(const_iterator __position, initializer_list<value_type> __il)
        -:  730:        {return insert(__position, __il.begin(), __il.end());}
        -:  731:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -:  732:
        -:  733:    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);
        -:  734:    iterator erase(const_iterator __first, const_iterator __last);
        -:  735:
        -:  736:    _LIBCPP_INLINE_VISIBILITY
        -:  737:    void clear() _NOEXCEPT
        -:  738:    {
        -:  739:        size_type __old_size = size();
        -:  740:        __base::clear();
        -:  741:        __annotate_shrink(__old_size);
        -:  742:        __invalidate_all_iterators();
        -:  743:    }
        -:  744:
        -:  745:    void resize(size_type __sz);
        -:  746:    void resize(size_type __sz, const_reference __x);
        -:  747:
        -:  748:    void swap(vector&)
        -:  749:#if _LIBCPP_STD_VER >= 14
        -:  750:        _NOEXCEPT;
        -:  751:#else
        -:  752:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value || 
        -:  753:                    __is_nothrow_swappable<allocator_type>::value);
        -:  754:#endif
        -:  755:
        -:  756:    bool __invariants() const;
        -:  757:
        -:  758:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  759:
        -:  760:    bool __dereferenceable(const const_iterator* __i) const;
        -:  761:    bool __decrementable(const const_iterator* __i) const;
        -:  762:    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;
        -:  763:    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;
        -:  764:
        -:  765:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -:  766:
        -:  767:private:
        -:  768:    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();
        -:  769:    void allocate(size_type __n);
        -:  770:    void deallocate() _NOEXCEPT;
        -:  771:    _LIBCPP_INLINE_VISIBILITY size_type __recommend(size_type __new_size) const;
        -:  772:    void __construct_at_end(size_type __n);
        -:  773:    _LIBCPP_INLINE_VISIBILITY
        -:  774:    void __construct_at_end(size_type __n, const_reference __x);
        -:  775:    template <class _ForwardIterator>
        -:  776:        typename enable_if
        -:  777:        <
        -:  778:            __is_forward_iterator<_ForwardIterator>::value,
        -:  779:            void
        -:  780:        >::type
        -:  781:        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n);
        -:  782:    void __append(size_type __n);
        -:  783:    void __append(size_type __n, const_reference __x);
        -:  784:    _LIBCPP_INLINE_VISIBILITY
        -:  785:    iterator       __make_iter(pointer __p) _NOEXCEPT;
        -:  786:    _LIBCPP_INLINE_VISIBILITY
        -:  787:    const_iterator __make_iter(const_pointer __p) const _NOEXCEPT;
        -:  788:    void __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v);
        -:  789:    pointer __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p);
        -:  790:    void __move_range(pointer __from_s, pointer __from_e, pointer __to);
        -:  791:    void __move_assign(vector& __c, true_type)
        -:  792:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);
        -:  793:    void __move_assign(vector& __c, false_type);
        -:  794:    _LIBCPP_INLINE_VISIBILITY
        -:  795:    void __destruct_at_end(pointer __new_last) _NOEXCEPT
        -:  796:    {
        -:  797:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  798:        __c_node* __c = __get_db()->__find_c_and_lock(this);
        -:  799:        for (__i_node** __p = __c->end_; __p != __c->beg_; )
        -:  800:        {
        -:  801:            --__p;
        -:  802:            const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);
        -:  803:            if (__i->base() > __new_last)
        -:  804:            {
        -:  805:                (*__p)->__c_ = nullptr;
        -:  806:                if (--__c->end_ != __p)
        -:  807:                    memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));
        -:  808:            }
        -:  809:        }
        -:  810:        __get_db()->unlock();
        -:  811:#endif
        -:  812:        size_type __old_size = size();
        -:  813:        __base::__destruct_at_end(__new_last);
        -:  814:        __annotate_shrink(__old_size);
        -:  815:    }
        -:  816:    template <class _Up>
        -:  817:        void
        -:  818:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  819:        __push_back_slow_path(_Up&& __x);
        -:  820:#else
        -:  821:        __push_back_slow_path(_Up& __x);
        -:  822:#endif
        -:  823:#if !defined(_LIBCPP_HAS_NO_VARIADICS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -:  824:    template <class... _Args>
        -:  825:        void
        -:  826:        __emplace_back_slow_path(_Args&&... __args);
        -:  827:#endif
        -:  828:    // The following functions are no-ops outside of AddressSanitizer mode.
        -:  829:    // We call annotatations only for the default Allocator because other allocators
        -:  830:    // may not meet the AddressSanitizer alignment constraints.
        -:  831:    // See the documentation for __sanitizer_annotate_contiguous_container for more details.
        -:  832:    void __annotate_contiguous_container
        -:  833:    (const void *__beg, const void *__end, const void *__old_mid, const void *__new_mid) const
        -:  834:    {
        -:  835:#ifndef _LIBCPP_HAS_NO_ASAN
        -:  836:      if (__beg && is_same<allocator_type, __default_allocator_type>::value)
        -:  837:        __sanitizer_annotate_contiguous_container(__beg, __end, __old_mid, __new_mid);
        -:  838:#endif
       20:  839:    }
        -:  840:
        -:  841:    void __annotate_new(size_type __current_size) const
        -:  842:    {
       20:  843:      __annotate_contiguous_container(data(), data() + capacity(),
       10:  844:                                      data() + capacity(), data() + __current_size);
       10:  845:    }
        -:  846:    void __annotate_delete() const
        -:  847:    {
       20:  848:      __annotate_contiguous_container(data(), data() + capacity(),
       10:  849:                                      data() + size(), data() + capacity());
       10:  850:    }
        -:  851:    void __annotate_increase(size_type __n) const
        -:  852:    {
        -:  853:      __annotate_contiguous_container(data(), data() + capacity(),
        -:  854:                                      data() + size(), data() + size() + __n);
        -:  855:    }
        -:  856:    void __annotate_shrink(size_type __old_size) const
        -:  857:    {
        -:  858:      __annotate_contiguous_container(data(), data() + capacity(),
        -:  859:                                      data() + __old_size, data() + size());
        -:  860:    }
        -:  861:#ifndef _LIBCPP_HAS_NO_ASAN
        -:  862:    // The annotation for size increase should happen before the actual increase,
        -:  863:    // but if an exception is thrown after that the annotation has to be undone.
        -:  864:    struct __RAII_IncreaseAnnotator {
        -:  865:      __RAII_IncreaseAnnotator(const vector &__v, size_type __n = 1)
        -:  866:        : __commit(false), __v(__v), __old_size(__v.size() + __n) {
        -:  867:        __v.__annotate_increase(__n);
        -:  868:      }
        -:  869:      void __done() { __commit = true; }
        -:  870:      ~__RAII_IncreaseAnnotator() {
        -:  871:        if (__commit) return;
        -:  872:        __v.__annotate_shrink(__old_size);
        -:  873:      }
        -:  874:      bool __commit;
        -:  875:      const vector &__v;
        -:  876:      size_type __old_size;
        -:  877:    };
        -:  878:#else
        -:  879:    struct __RAII_IncreaseAnnotator {
       20:  880:      inline __RAII_IncreaseAnnotator(const vector &, size_type __n = 1) {}
       10:  881:      inline void __done() {}
        -:  882:    };
        -:  883:#endif
        -:  884:
        -:  885:};
        -:  886:
        -:  887:template <class _Tp, class _Allocator>
        -:  888:void
        -:  889:vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v)
        -:  890:{
       10:  891:    __annotate_delete();
       10:  892:    __alloc_traits::__construct_backward(this->__alloc(), this->__begin_, this->__end_, __v.__begin_);
       10:  893:    _VSTD::swap(this->__begin_, __v.__begin_);
       10:  894:    _VSTD::swap(this->__end_, __v.__end_);
       10:  895:    _VSTD::swap(this->__end_cap(), __v.__end_cap());
       10:  896:    __v.__first_ = __v.__begin_;
       10:  897:    __annotate_new(size());
       10:  898:    __invalidate_all_iterators();
       10:  899:}
        -:  900:
        -:  901:template <class _Tp, class _Allocator>
        -:  902:typename vector<_Tp, _Allocator>::pointer
        -:  903:vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p)
        -:  904:{
        -:  905:    __annotate_delete();
        -:  906:    pointer __r = __v.__begin_;
        -:  907:    __alloc_traits::__construct_backward(this->__alloc(), this->__begin_, __p, __v.__begin_);
        -:  908:    __alloc_traits::__construct_forward(this->__alloc(), __p, this->__end_, __v.__end_);
        -:  909:    _VSTD::swap(this->__begin_, __v.__begin_);
        -:  910:    _VSTD::swap(this->__end_, __v.__end_);
        -:  911:    _VSTD::swap(this->__end_cap(), __v.__end_cap());
        -:  912:    __v.__first_ = __v.__begin_;
        -:  913:    __annotate_new(size());
        -:  914:    __invalidate_all_iterators();
        -:  915:    return __r;
        -:  916:}
        -:  917:
        -:  918://  Allocate space for __n objects
        -:  919://  throws length_error if __n > max_size()
        -:  920://  throws (probably bad_alloc) if memory run out
        -:  921://  Precondition:  __begin_ == __end_ == __end_cap() == 0
        -:  922://  Precondition:  __n > 0
        -:  923://  Postcondition:  capacity() == __n
        -:  924://  Postcondition:  size() == 0
        -:  925:template <class _Tp, class _Allocator>
        -:  926:void
        -:  927:vector<_Tp, _Allocator>::allocate(size_type __n)
        -:  928:{
        -:  929:    if (__n > max_size())
        -:  930:        this->__throw_length_error();
        -:  931:    this->__begin_ = this->__end_ = __alloc_traits::allocate(this->__alloc(), __n);
        -:  932:    this->__end_cap() = this->__begin_ + __n;
        -:  933:    __annotate_new(0);
        -:  934:}
        -:  935:
        -:  936:template <class _Tp, class _Allocator>
        -:  937:void
        -:  938:vector<_Tp, _Allocator>::deallocate() _NOEXCEPT
        -:  939:{
        -:  940:    if (this->__begin_ != nullptr)
        -:  941:    {
        -:  942:        clear();
        -:  943:        __alloc_traits::deallocate(this->__alloc(), this->__begin_, capacity());
        -:  944:        this->__begin_ = this->__end_ = this->__end_cap() = nullptr;
        -:  945:    }
        -:  946:}
        -:  947:
        -:  948:template <class _Tp, class _Allocator>
        -:  949:typename vector<_Tp, _Allocator>::size_type
        -:  950:vector<_Tp, _Allocator>::max_size() const _NOEXCEPT
        -:  951:{
       20:  952:    return _VSTD::min<size_type>(__alloc_traits::max_size(this->__alloc()), numeric_limits<size_type>::max() / 2);  // end() >= begin(), always
        -:  953:}
        -:  954:
        -:  955://  Precondition:  __new_size > capacity()
        -:  956:template <class _Tp, class _Allocator>
        -:  957:inline _LIBCPP_INLINE_VISIBILITY
        -:  958:typename vector<_Tp, _Allocator>::size_type
        -:  959:vector<_Tp, _Allocator>::__recommend(size_type __new_size) const
        -:  960:{
       10:  961:    const size_type __ms = max_size();
       10:  962:    if (__new_size > __ms)
    #####:  963:        this->__throw_length_error();
       10:  964:    const size_type __cap = capacity();
       10:  965:    if (__cap >= __ms / 2)
    #####:  966:        return __ms;
       10:  967:    return _VSTD::max<size_type>(2*__cap, __new_size);
       10:  968:}
        -:  969:
        -:  970://  Default constructs __n objects starting at __end_
        -:  971://  throws if construction throws
        -:  972://  Precondition:  __n > 0
        -:  973://  Precondition:  size() + __n <= capacity()
        -:  974://  Postcondition:  size() == size() + __n
        -:  975:template <class _Tp, class _Allocator>
        -:  976:void
        -:  977:vector<_Tp, _Allocator>::__construct_at_end(size_type __n)
        -:  978:{
        -:  979:    allocator_type& __a = this->__alloc();
        -:  980:    do
        -:  981:    {
        -:  982:        __RAII_IncreaseAnnotator __annotator(*this);
        -:  983:        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_));
        -:  984:        ++this->__end_;
        -:  985:        --__n;
        -:  986:        __annotator.__done();
        -:  987:    } while (__n > 0);
        -:  988:}
        -:  989:
        -:  990://  Copy constructs __n objects starting at __end_ from __x
        -:  991://  throws if construction throws
        -:  992://  Precondition:  __n > 0
        -:  993://  Precondition:  size() + __n <= capacity()
        -:  994://  Postcondition:  size() == old size() + __n
        -:  995://  Postcondition:  [i] == __x for all i in [size() - __n, __n)
        -:  996:template <class _Tp, class _Allocator>
        -:  997:inline
        -:  998:void
        -:  999:vector<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x)
        -: 1000:{
        -: 1001:    allocator_type& __a = this->__alloc();
        -: 1002:    do
        -: 1003:    {
        -: 1004:        __RAII_IncreaseAnnotator __annotator(*this);
        -: 1005:        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_), __x);
        -: 1006:        ++this->__end_;
        -: 1007:        --__n;
        -: 1008:        __annotator.__done();
        -: 1009:    } while (__n > 0);
        -: 1010:}
        -: 1011:
        -: 1012:template <class _Tp, class _Allocator>
        -: 1013:template <class _ForwardIterator>
        -: 1014:typename enable_if
        -: 1015:<
        -: 1016:    __is_forward_iterator<_ForwardIterator>::value,
        -: 1017:    void
        -: 1018:>::type
        -: 1019:vector<_Tp, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n)
        -: 1020:{
        -: 1021:    allocator_type& __a = this->__alloc();
        -: 1022:    __RAII_IncreaseAnnotator __annotator(*this, __n);
        -: 1023:    __alloc_traits::__construct_range_forward(__a, __first, __last, this->__end_);
        -: 1024:    __annotator.__done();
        -: 1025:}
        -: 1026:
        -: 1027://  Default constructs __n objects starting at __end_
        -: 1028://  throws if construction throws
        -: 1029://  Postcondition:  size() == size() + __n
        -: 1030://  Exception safety: strong.
        -: 1031:template <class _Tp, class _Allocator>
        -: 1032:void
        -: 1033:vector<_Tp, _Allocator>::__append(size_type __n)
        -: 1034:{
        -: 1035:    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
        -: 1036:        this->__construct_at_end(__n);
        -: 1037:    else
        -: 1038:    {
        -: 1039:        allocator_type& __a = this->__alloc();
        -: 1040:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
        -: 1041:        __v.__construct_at_end(__n);
        -: 1042:        __swap_out_circular_buffer(__v);
        -: 1043:    }
        -: 1044:}
        -: 1045:
        -: 1046://  Default constructs __n objects starting at __end_
        -: 1047://  throws if construction throws
        -: 1048://  Postcondition:  size() == size() + __n
        -: 1049://  Exception safety: strong.
        -: 1050:template <class _Tp, class _Allocator>
        -: 1051:void
        -: 1052:vector<_Tp, _Allocator>::__append(size_type __n, const_reference __x)
        -: 1053:{
        -: 1054:    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
        -: 1055:        this->__construct_at_end(__n, __x);
        -: 1056:    else
        -: 1057:    {
        -: 1058:        allocator_type& __a = this->__alloc();
        -: 1059:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
        -: 1060:        __v.__construct_at_end(__n, __x);
        -: 1061:        __swap_out_circular_buffer(__v);
        -: 1062:    }
        -: 1063:}
        -: 1064:
        -: 1065:template <class _Tp, class _Allocator>
        -: 1066:vector<_Tp, _Allocator>::vector(size_type __n)
        -: 1067:{
        -: 1068:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1069:    __get_db()->__insert_c(this);
        -: 1070:#endif
        -: 1071:    if (__n > 0)
        -: 1072:    {
        -: 1073:        allocate(__n);
        -: 1074:        __construct_at_end(__n);
        -: 1075:    }
        -: 1076:}
        -: 1077:
        -: 1078:#if _LIBCPP_STD_VER > 11
        -: 1079:template <class _Tp, class _Allocator>
        -: 1080:vector<_Tp, _Allocator>::vector(size_type __n, const allocator_type& __a)
        -: 1081:    : __base(__a)
        -: 1082:{
        -: 1083:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1084:    __get_db()->__insert_c(this);
        -: 1085:#endif
        -: 1086:    if (__n > 0)
        -: 1087:    {
        -: 1088:        allocate(__n);
        -: 1089:        __construct_at_end(__n);
        -: 1090:    }
        -: 1091:}
        -: 1092:#endif
        -: 1093:
        -: 1094:template <class _Tp, class _Allocator>
        -: 1095:vector<_Tp, _Allocator>::vector(size_type __n, const_reference __x)
        -: 1096:{
        -: 1097:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1098:    __get_db()->__insert_c(this);
        -: 1099:#endif
        -: 1100:    if (__n > 0)
        -: 1101:    {
        -: 1102:        allocate(__n);
        -: 1103:        __construct_at_end(__n, __x);
        -: 1104:    }
        -: 1105:}
        -: 1106:
        -: 1107:template <class _Tp, class _Allocator>
        -: 1108:vector<_Tp, _Allocator>::vector(size_type __n, const_reference __x, const allocator_type& __a)
        -: 1109:    : __base(__a)
        -: 1110:{
        -: 1111:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1112:    __get_db()->__insert_c(this);
        -: 1113:#endif
        -: 1114:    if (__n > 0)
        -: 1115:    {
        -: 1116:        allocate(__n);
        -: 1117:        __construct_at_end(__n, __x);
        -: 1118:    }
        -: 1119:}
        -: 1120:
        -: 1121:template <class _Tp, class _Allocator>
        -: 1122:template <class _InputIterator>
        -: 1123:vector<_Tp, _Allocator>::vector(_InputIterator __first,
        -: 1124:       typename enable_if<__is_input_iterator  <_InputIterator>::value &&
        -: 1125:                         !__is_forward_iterator<_InputIterator>::value &&
        -: 1126:                         is_constructible<
        -: 1127:                            value_type,
        -: 1128:                            typename iterator_traits<_InputIterator>::reference>::value,
        -: 1129:                          _InputIterator>::type __last)
        -: 1130:{
        -: 1131:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1132:    __get_db()->__insert_c(this);
        -: 1133:#endif
        -: 1134:    for (; __first != __last; ++__first)
        -: 1135:        push_back(*__first);
        -: 1136:}
        -: 1137:
        -: 1138:template <class _Tp, class _Allocator>
        -: 1139:template <class _InputIterator>
        -: 1140:vector<_Tp, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -: 1141:       typename enable_if<__is_input_iterator  <_InputIterator>::value &&
        -: 1142:                         !__is_forward_iterator<_InputIterator>::value &&
        -: 1143:                         is_constructible<
        -: 1144:                            value_type,
        -: 1145:                            typename iterator_traits<_InputIterator>::reference>::value>::type*)
        -: 1146:    : __base(__a)
        -: 1147:{
        -: 1148:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1149:    __get_db()->__insert_c(this);
        -: 1150:#endif
        -: 1151:    for (; __first != __last; ++__first)
        -: 1152:        push_back(*__first);
        -: 1153:}
        -: 1154:
        -: 1155:template <class _Tp, class _Allocator>
        -: 1156:template <class _ForwardIterator>
        -: 1157:vector<_Tp, _Allocator>::vector(_ForwardIterator __first,
        -: 1158:                                typename enable_if<__is_forward_iterator<_ForwardIterator>::value &&
        -: 1159:                                is_constructible<
        -: 1160:                                   value_type,
        -: 1161:                                   typename iterator_traits<_ForwardIterator>::reference>::value,
        -: 1162:                                                   _ForwardIterator>::type __last)
        -: 1163:{
        -: 1164:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1165:    __get_db()->__insert_c(this);
        -: 1166:#endif
        -: 1167:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 1168:    if (__n > 0)
        -: 1169:    {
        -: 1170:        allocate(__n);
        -: 1171:        __construct_at_end(__first, __last, __n);
        -: 1172:    }
        -: 1173:}
        -: 1174:
        -: 1175:template <class _Tp, class _Allocator>
        -: 1176:template <class _ForwardIterator>
        -: 1177:vector<_Tp, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -: 1178:                                typename enable_if<__is_forward_iterator<_ForwardIterator>::value &&
        -: 1179:                                is_constructible<
        -: 1180:                                   value_type,
        -: 1181:                                   typename iterator_traits<_ForwardIterator>::reference>::value>::type*)
        -: 1182:    : __base(__a)
        -: 1183:{
        -: 1184:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1185:    __get_db()->__insert_c(this);
        -: 1186:#endif
        -: 1187:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 1188:    if (__n > 0)
        -: 1189:    {
        -: 1190:        allocate(__n);
        -: 1191:        __construct_at_end(__first, __last, __n);
        -: 1192:    }
        -: 1193:}
        -: 1194:
        -: 1195:template <class _Tp, class _Allocator>
        -: 1196:vector<_Tp, _Allocator>::vector(const vector& __x)
        -: 1197:    : __base(__alloc_traits::select_on_container_copy_construction(__x.__alloc()))
        -: 1198:{
        -: 1199:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1200:    __get_db()->__insert_c(this);
        -: 1201:#endif
        -: 1202:    size_type __n = __x.size();
        -: 1203:    if (__n > 0)
        -: 1204:    {
        -: 1205:        allocate(__n);
        -: 1206:        __construct_at_end(__x.__begin_, __x.__end_, __n);
        -: 1207:    }
        -: 1208:}
        -: 1209:
        -: 1210:template <class _Tp, class _Allocator>
        -: 1211:vector<_Tp, _Allocator>::vector(const vector& __x, const allocator_type& __a)
        -: 1212:    : __base(__a)
        -: 1213:{
        -: 1214:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1215:    __get_db()->__insert_c(this);
        -: 1216:#endif
        -: 1217:    size_type __n = __x.size();
        -: 1218:    if (__n > 0)
        -: 1219:    {
        -: 1220:        allocate(__n);
        -: 1221:        __construct_at_end(__x.__begin_, __x.__end_, __n);
        -: 1222:    }
        -: 1223:}
        -: 1224:
        -: 1225:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1226:
        -: 1227:template <class _Tp, class _Allocator>
        -: 1228:inline _LIBCPP_INLINE_VISIBILITY
        -: 1229:vector<_Tp, _Allocator>::vector(vector&& __x)
        -: 1230:#if _LIBCPP_STD_VER > 14
        -: 1231:        _NOEXCEPT
        -: 1232:#else
        -: 1233:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 1234:#endif
        -: 1235:    : __base(_VSTD::move(__x.__alloc()))
        -: 1236:{
        -: 1237:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1238:    __get_db()->__insert_c(this);
        -: 1239:    __get_db()->swap(this, &__x);
        -: 1240:#endif
        -: 1241:    this->__begin_ = __x.__begin_;
        -: 1242:    this->__end_ = __x.__end_;
        -: 1243:    this->__end_cap() = __x.__end_cap();
        -: 1244:    __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
        -: 1245:}
        -: 1246:
        -: 1247:template <class _Tp, class _Allocator>
        -: 1248:inline _LIBCPP_INLINE_VISIBILITY
        -: 1249:vector<_Tp, _Allocator>::vector(vector&& __x, const allocator_type& __a)
        -: 1250:    : __base(__a)
        -: 1251:{
        -: 1252:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1253:    __get_db()->__insert_c(this);
        -: 1254:#endif
        -: 1255:    if (__a == __x.__alloc())
        -: 1256:    {
        -: 1257:        this->__begin_ = __x.__begin_;
        -: 1258:        this->__end_ = __x.__end_;
        -: 1259:        this->__end_cap() = __x.__end_cap();
        -: 1260:        __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
        -: 1261:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1262:        __get_db()->swap(this, &__x);
        -: 1263:#endif
        -: 1264:    }
        -: 1265:    else
        -: 1266:    {
        -: 1267:        typedef move_iterator<iterator> _Ip;
        -: 1268:        assign(_Ip(__x.begin()), _Ip(__x.end()));
        -: 1269:    }
        -: 1270:}
        -: 1271:
        -: 1272:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1273:
        -: 1274:template <class _Tp, class _Allocator>
        -: 1275:inline _LIBCPP_INLINE_VISIBILITY
        -: 1276:vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il)
        -: 1277:{
        -: 1278:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1279:    __get_db()->__insert_c(this);
        -: 1280:#endif
        -: 1281:    if (__il.size() > 0)
        -: 1282:    {
        -: 1283:        allocate(__il.size());
        -: 1284:        __construct_at_end(__il.begin(), __il.end(), __il.size());
        -: 1285:    }
        -: 1286:}
        -: 1287:
        -: 1288:template <class _Tp, class _Allocator>
        -: 1289:inline _LIBCPP_INLINE_VISIBILITY
        -: 1290:vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
        -: 1291:    : __base(__a)
        -: 1292:{
        -: 1293:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1294:    __get_db()->__insert_c(this);
        -: 1295:#endif
        -: 1296:    if (__il.size() > 0)
        -: 1297:    {
        -: 1298:        allocate(__il.size());
        -: 1299:        __construct_at_end(__il.begin(), __il.end(), __il.size());
        -: 1300:    }
        -: 1301:}
        -: 1302:
        -: 1303:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1304:
        -: 1305:template <class _Tp, class _Allocator>
        -: 1306:inline _LIBCPP_INLINE_VISIBILITY
        -: 1307:vector<_Tp, _Allocator>&
        -: 1308:vector<_Tp, _Allocator>::operator=(vector&& __x)
        -: 1309:        _NOEXCEPT_(
        -: 1310:             __alloc_traits::propagate_on_container_move_assignment::value &&
        -: 1311:             is_nothrow_move_assignable<allocator_type>::value)
        -: 1312:{
        -: 1313:    __move_assign(__x, integral_constant<bool,
        -: 1314:          __alloc_traits::propagate_on_container_move_assignment::value>());
        -: 1315:    return *this;
        -: 1316:}
        -: 1317:
        -: 1318:template <class _Tp, class _Allocator>
        -: 1319:void
        -: 1320:vector<_Tp, _Allocator>::__move_assign(vector& __c, false_type)
        -: 1321:{
        -: 1322:    if (__base::__alloc() != __c.__alloc())
        -: 1323:    {
        -: 1324:        typedef move_iterator<iterator> _Ip;
        -: 1325:        assign(_Ip(__c.begin()), _Ip(__c.end()));
        -: 1326:    }
        -: 1327:    else
        -: 1328:        __move_assign(__c, true_type());
        -: 1329:}
        -: 1330:
        -: 1331:template <class _Tp, class _Allocator>
        -: 1332:void
        -: 1333:vector<_Tp, _Allocator>::__move_assign(vector& __c, true_type)
        -: 1334:    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 1335:{
        -: 1336:    deallocate();
        -: 1337:    __base::__move_assign_alloc(__c); // this can throw
        -: 1338:    this->__begin_ = __c.__begin_;
        -: 1339:    this->__end_ = __c.__end_;
        -: 1340:    this->__end_cap() = __c.__end_cap();
        -: 1341:    __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;
        -: 1342:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1343:    __get_db()->swap(this, &__c);
        -: 1344:#endif
        -: 1345:}
        -: 1346:
        -: 1347:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1348:
        -: 1349:template <class _Tp, class _Allocator>
        -: 1350:inline _LIBCPP_INLINE_VISIBILITY
        -: 1351:vector<_Tp, _Allocator>&
        -: 1352:vector<_Tp, _Allocator>::operator=(const vector& __x)
        -: 1353:{
        -: 1354:    if (this != &__x)
        -: 1355:    {
        -: 1356:        __base::__copy_assign_alloc(__x);
        -: 1357:        assign(__x.__begin_, __x.__end_);
        -: 1358:    }
        -: 1359:    return *this;
        -: 1360:}
        -: 1361:
        -: 1362:template <class _Tp, class _Allocator>
        -: 1363:template <class _InputIterator>
        -: 1364:typename enable_if
        -: 1365:<
        -: 1366:     __is_input_iterator  <_InputIterator>::value &&
        -: 1367:    !__is_forward_iterator<_InputIterator>::value &&
        -: 1368:    is_constructible<
        -: 1369:       _Tp,
        -: 1370:       typename iterator_traits<_InputIterator>::reference>::value,
        -: 1371:    void
        -: 1372:>::type
        -: 1373:vector<_Tp, _Allocator>::assign(_InputIterator __first, _InputIterator __last)
        -: 1374:{
        -: 1375:    clear();
        -: 1376:    for (; __first != __last; ++__first)
        -: 1377:        push_back(*__first);
        -: 1378:}
        -: 1379:
        -: 1380:template <class _Tp, class _Allocator>
        -: 1381:template <class _ForwardIterator>
        -: 1382:typename enable_if
        -: 1383:<
        -: 1384:    __is_forward_iterator<_ForwardIterator>::value &&
        -: 1385:    is_constructible<
        -: 1386:       _Tp,
        -: 1387:       typename iterator_traits<_ForwardIterator>::reference>::value,
        -: 1388:    void
        -: 1389:>::type
        -: 1390:vector<_Tp, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)
        -: 1391:{
        -: 1392:    size_type __new_size = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 1393:    if (__new_size <= capacity())
        -: 1394:    {
        -: 1395:        _ForwardIterator __mid = __last;
        -: 1396:        bool __growing = false;
        -: 1397:        if (__new_size > size())
        -: 1398:        {
        -: 1399:            __growing = true;
        -: 1400:            __mid =  __first;
        -: 1401:            _VSTD::advance(__mid, size());
        -: 1402:        }
        -: 1403:        pointer __m = _VSTD::copy(__first, __mid, this->__begin_);
        -: 1404:        if (__growing)
        -: 1405:            __construct_at_end(__mid, __last, __new_size - size());
        -: 1406:        else
        -: 1407:            this->__destruct_at_end(__m);
        -: 1408:    }
        -: 1409:    else
        -: 1410:    {
        -: 1411:        deallocate();
        -: 1412:        allocate(__recommend(__new_size));
        -: 1413:        __construct_at_end(__first, __last, __new_size);
        -: 1414:    }
        -: 1415:}
        -: 1416:
        -: 1417:template <class _Tp, class _Allocator>
        -: 1418:void
        -: 1419:vector<_Tp, _Allocator>::assign(size_type __n, const_reference __u)
        -: 1420:{
        -: 1421:    if (__n <= capacity())
        -: 1422:    {
        -: 1423:        size_type __s = size();
        -: 1424:        _VSTD::fill_n(this->__begin_, _VSTD::min(__n, __s), __u);
        -: 1425:        if (__n > __s)
        -: 1426:            __construct_at_end(__n - __s, __u);
        -: 1427:        else
        -: 1428:            this->__destruct_at_end(this->__begin_ + __n);
        -: 1429:    }
        -: 1430:    else
        -: 1431:    {
        -: 1432:        deallocate();
        -: 1433:        allocate(__recommend(static_cast<size_type>(__n)));
        -: 1434:        __construct_at_end(__n, __u);
        -: 1435:    }
        -: 1436:}
        -: 1437:
        -: 1438:template <class _Tp, class _Allocator>
        -: 1439:inline _LIBCPP_INLINE_VISIBILITY
        -: 1440:typename vector<_Tp, _Allocator>::iterator
        -: 1441:vector<_Tp, _Allocator>::__make_iter(pointer __p) _NOEXCEPT
        -: 1442:{
        -: 1443:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1444:    return iterator(this, __p);
        -: 1445:#else
        -: 1446:    return iterator(__p);
        -: 1447:#endif
        -: 1448:}
        -: 1449:
        -: 1450:template <class _Tp, class _Allocator>
        -: 1451:inline _LIBCPP_INLINE_VISIBILITY
        -: 1452:typename vector<_Tp, _Allocator>::const_iterator
        -: 1453:vector<_Tp, _Allocator>::__make_iter(const_pointer __p) const _NOEXCEPT
        -: 1454:{
        -: 1455:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1456:    return const_iterator(this, __p);
        -: 1457:#else
        -: 1458:    return const_iterator(__p);
        -: 1459:#endif
        -: 1460:}
        -: 1461:
        -: 1462:template <class _Tp, class _Allocator>
        -: 1463:inline _LIBCPP_INLINE_VISIBILITY
        -: 1464:typename vector<_Tp, _Allocator>::iterator
        -: 1465:vector<_Tp, _Allocator>::begin() _NOEXCEPT
        -: 1466:{
        -: 1467:    return __make_iter(this->__begin_);
        -: 1468:}
        -: 1469:
        -: 1470:template <class _Tp, class _Allocator>
        -: 1471:inline _LIBCPP_INLINE_VISIBILITY
        -: 1472:typename vector<_Tp, _Allocator>::const_iterator
        -: 1473:vector<_Tp, _Allocator>::begin() const _NOEXCEPT
        -: 1474:{
        -: 1475:    return __make_iter(this->__begin_);
        -: 1476:}
        -: 1477:
        -: 1478:template <class _Tp, class _Allocator>
        -: 1479:inline _LIBCPP_INLINE_VISIBILITY
        -: 1480:typename vector<_Tp, _Allocator>::iterator
        -: 1481:vector<_Tp, _Allocator>::end() _NOEXCEPT
        -: 1482:{
        -: 1483:    return __make_iter(this->__end_);
        -: 1484:}
        -: 1485:
        -: 1486:template <class _Tp, class _Allocator>
        -: 1487:inline _LIBCPP_INLINE_VISIBILITY
        -: 1488:typename vector<_Tp, _Allocator>::const_iterator
        -: 1489:vector<_Tp, _Allocator>::end() const _NOEXCEPT
        -: 1490:{
        -: 1491:    return __make_iter(this->__end_);
        -: 1492:}
        -: 1493:
        -: 1494:template <class _Tp, class _Allocator>
        -: 1495:inline _LIBCPP_INLINE_VISIBILITY
        -: 1496:typename vector<_Tp, _Allocator>::reference
        -: 1497:vector<_Tp, _Allocator>::operator[](size_type __n)
        -: 1498:{
        -: 1499:    _LIBCPP_ASSERT(__n < size(), "vector[] index out of bounds");
       20: 1500:    return this->__begin_[__n];
        -: 1501:}
        -: 1502:
        -: 1503:template <class _Tp, class _Allocator>
        -: 1504:inline _LIBCPP_INLINE_VISIBILITY
        -: 1505:typename vector<_Tp, _Allocator>::const_reference
        -: 1506:vector<_Tp, _Allocator>::operator[](size_type __n) const
        -: 1507:{
        -: 1508:    _LIBCPP_ASSERT(__n < size(), "vector[] index out of bounds");
        -: 1509:    return this->__begin_[__n];
        -: 1510:}
        -: 1511:
        -: 1512:template <class _Tp, class _Allocator>
        -: 1513:typename vector<_Tp, _Allocator>::reference
        -: 1514:vector<_Tp, _Allocator>::at(size_type __n)
        -: 1515:{
        -: 1516:    if (__n >= size())
        -: 1517:        this->__throw_out_of_range();
        -: 1518:    return this->__begin_[__n];
        -: 1519:}
        -: 1520:
        -: 1521:template <class _Tp, class _Allocator>
        -: 1522:typename vector<_Tp, _Allocator>::const_reference
        -: 1523:vector<_Tp, _Allocator>::at(size_type __n) const
        -: 1524:{
        -: 1525:    if (__n >= size())
        -: 1526:        this->__throw_out_of_range();
        -: 1527:    return this->__begin_[__n];
        -: 1528:}
        -: 1529:
        -: 1530:template <class _Tp, class _Allocator>
        -: 1531:void
        -: 1532:vector<_Tp, _Allocator>::reserve(size_type __n)
        -: 1533:{
        -: 1534:    if (__n > capacity())
        -: 1535:    {
        -: 1536:        allocator_type& __a = this->__alloc();
        -: 1537:        __split_buffer<value_type, allocator_type&> __v(__n, size(), __a);
        -: 1538:        __swap_out_circular_buffer(__v);
        -: 1539:    }
        -: 1540:}
        -: 1541:
        -: 1542:template <class _Tp, class _Allocator>
        -: 1543:void
        -: 1544:vector<_Tp, _Allocator>::shrink_to_fit() _NOEXCEPT
        -: 1545:{
        -: 1546:    if (capacity() > size())
        -: 1547:    {
        -: 1548:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1549:        try
        -: 1550:        {
        -: 1551:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1552:            allocator_type& __a = this->__alloc();
        -: 1553:            __split_buffer<value_type, allocator_type&> __v(size(), size(), __a);
        -: 1554:            __swap_out_circular_buffer(__v);
        -: 1555:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1556:        }
        -: 1557:        catch (...)
        -: 1558:        {
        -: 1559:        }
        -: 1560:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1561:    }
        -: 1562:}
        -: 1563:
        -: 1564:template <class _Tp, class _Allocator>
        -: 1565:template <class _Up>
        -: 1566:void
        -: 1567:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1568:vector<_Tp, _Allocator>::__push_back_slow_path(_Up&& __x)
        -: 1569:#else
        -: 1570:vector<_Tp, _Allocator>::__push_back_slow_path(_Up& __x)
        -: 1571:#endif
        -: 1572:{
        -: 1573:    allocator_type& __a = this->__alloc();
        -: 1574:    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);
        -: 1575:    // __v.push_back(_VSTD::forward<_Up>(__x));
        -: 1576:    __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(__v.__end_), _VSTD::forward<_Up>(__x));
        -: 1577:    __v.__end_++;
        -: 1578:    __swap_out_circular_buffer(__v);
        -: 1579:}
        -: 1580:
        -: 1581:template <class _Tp, class _Allocator>
        -: 1582:inline _LIBCPP_INLINE_VISIBILITY
        -: 1583:void
        -: 1584:vector<_Tp, _Allocator>::push_back(const_reference __x)
        -: 1585:{
        -: 1586:    if (this->__end_ != this->__end_cap())
        -: 1587:    {
        -: 1588:        __RAII_IncreaseAnnotator __annotator(*this);
        -: 1589:        __alloc_traits::construct(this->__alloc(),
        -: 1590:                                  _VSTD::__to_raw_pointer(this->__end_), __x);
        -: 1591:        __annotator.__done();
        -: 1592:        ++this->__end_;
        -: 1593:    }
        -: 1594:    else
        -: 1595:        __push_back_slow_path(__x);
        -: 1596:}
        -: 1597:
        -: 1598:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1599:
        -: 1600:template <class _Tp, class _Allocator>
        -: 1601:inline _LIBCPP_INLINE_VISIBILITY
        -: 1602:void
        -: 1603:vector<_Tp, _Allocator>::push_back(value_type&& __x)
        -: 1604:{
        -: 1605:    if (this->__end_ < this->__end_cap())
        -: 1606:    {
        -: 1607:        __RAII_IncreaseAnnotator __annotator(*this);
        -: 1608:        __alloc_traits::construct(this->__alloc(),
        -: 1609:                                  _VSTD::__to_raw_pointer(this->__end_),
        -: 1610:                                  _VSTD::move(__x));
        -: 1611:        __annotator.__done();
        -: 1612:        ++this->__end_;
        -: 1613:    }
        -: 1614:    else
        -: 1615:        __push_back_slow_path(_VSTD::move(__x));
        -: 1616:}
        -: 1617:
        -: 1618:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1619:
        -: 1620:template <class _Tp, class _Allocator>
        -: 1621:template <class... _Args>
        -: 1622:void
        -: 1623:vector<_Tp, _Allocator>::__emplace_back_slow_path(_Args&&... __args)
        -: 1624:{
       10: 1625:    allocator_type& __a = this->__alloc();
       10: 1626:    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);
        -: 1627://    __v.emplace_back(_VSTD::forward<_Args>(__args)...);
       10: 1628:    __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(__v.__end_), _VSTD::forward<_Args>(__args)...);
       10: 1629:    __v.__end_++;
       10: 1630:    __swap_out_circular_buffer(__v);
       10: 1631:}
        -: 1632:
        -: 1633:template <class _Tp, class _Allocator>
        -: 1634:template <class... _Args>
        -: 1635:inline
        -: 1636:void
        -: 1637:vector<_Tp, _Allocator>::emplace_back(_Args&&... __args)
        -: 1638:{
       20: 1639:    if (this->__end_ < this->__end_cap())
        -: 1640:    {
       10: 1641:        __RAII_IncreaseAnnotator __annotator(*this);
       20: 1642:        __alloc_traits::construct(this->__alloc(),
       10: 1643:                                  _VSTD::__to_raw_pointer(this->__end_),
       10: 1644:                                  _VSTD::forward<_Args>(__args)...);
       10: 1645:        __annotator.__done();
       10: 1646:        ++this->__end_;
       10: 1647:    }
        -: 1648:    else
       10: 1649:        __emplace_back_slow_path(_VSTD::forward<_Args>(__args)...);
       20: 1650:}
        -: 1651:
        -: 1652:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1653:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1654:
        -: 1655:template <class _Tp, class _Allocator>
        -: 1656:inline
        -: 1657:void
        -: 1658:vector<_Tp, _Allocator>::pop_back()
        -: 1659:{
        -: 1660:    _LIBCPP_ASSERT(!empty(), "vector::pop_back called for empty vector");
        -: 1661:    this->__destruct_at_end(this->__end_ - 1);
        -: 1662:}
        -: 1663:
        -: 1664:template <class _Tp, class _Allocator>
        -: 1665:inline _LIBCPP_INLINE_VISIBILITY
        -: 1666:typename vector<_Tp, _Allocator>::iterator
        -: 1667:vector<_Tp, _Allocator>::erase(const_iterator __position)
        -: 1668:{
        -: 1669:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1670:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1671:        "vector::erase(iterator) called with an iterator not"
        -: 1672:        " referring to this vector");
        -: 1673:#endif
        -: 1674:    _LIBCPP_ASSERT(__position != end(),
        -: 1675:        "vector::erase(iterator) called with a non-dereferenceable iterator");
        -: 1676:    difference_type __ps = __position - cbegin();
        -: 1677:    pointer __p = this->__begin_ + __ps;
        -: 1678:    iterator __r = __make_iter(__p);
        -: 1679:    this->__destruct_at_end(_VSTD::move(__p + 1, this->__end_, __p));
        -: 1680:    return __r;
        -: 1681:}
        -: 1682:
        -: 1683:template <class _Tp, class _Allocator>
        -: 1684:typename vector<_Tp, _Allocator>::iterator
        -: 1685:vector<_Tp, _Allocator>::erase(const_iterator __first, const_iterator __last)
        -: 1686:{
        -: 1687:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1688:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,
        -: 1689:        "vector::erase(iterator,  iterator) called with an iterator not"
        -: 1690:        " referring to this vector");
        -: 1691:#endif
        -: 1692:    _LIBCPP_ASSERT(__first <= __last, "vector::erase(first, last) called with invalid range");
        -: 1693:    pointer __p = this->__begin_ + (__first - begin());
        -: 1694:    iterator __r = __make_iter(__p);
        -: 1695:    if (__first != __last)
        -: 1696:        this->__destruct_at_end(_VSTD::move(__p + (__last - __first), this->__end_, __p));
        -: 1697:    return __r;
        -: 1698:}
        -: 1699:
        -: 1700:template <class _Tp, class _Allocator>
        -: 1701:void
        -: 1702:vector<_Tp, _Allocator>::__move_range(pointer __from_s, pointer __from_e, pointer __to)
        -: 1703:{
        -: 1704:    pointer __old_last = this->__end_;
        -: 1705:    difference_type __n = __old_last - __to;
        -: 1706:    for (pointer __i = __from_s + __n; __i < __from_e; ++__i, ++this->__end_)
        -: 1707:        __alloc_traits::construct(this->__alloc(),
        -: 1708:                                  _VSTD::__to_raw_pointer(this->__end_),
        -: 1709:                                  _VSTD::move(*__i));
        -: 1710:    _VSTD::move_backward(__from_s, __from_s + __n, __old_last);
        -: 1711:}
        -: 1712:
        -: 1713:template <class _Tp, class _Allocator>
        -: 1714:typename vector<_Tp, _Allocator>::iterator
        -: 1715:vector<_Tp, _Allocator>::insert(const_iterator __position, const_reference __x)
        -: 1716:{
        -: 1717:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1718:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1719:        "vector::insert(iterator, x) called with an iterator not"
        -: 1720:        " referring to this vector");
        -: 1721:#endif
        -: 1722:    pointer __p = this->__begin_ + (__position - begin());
        -: 1723:    if (this->__end_ < this->__end_cap())
        -: 1724:    {
        -: 1725:        __RAII_IncreaseAnnotator __annotator(*this);
        -: 1726:        if (__p == this->__end_)
        -: 1727:        {
        -: 1728:            __alloc_traits::construct(this->__alloc(),
        -: 1729:                                      _VSTD::__to_raw_pointer(this->__end_), __x);
        -: 1730:            ++this->__end_;
        -: 1731:        }
        -: 1732:        else
        -: 1733:        {
        -: 1734:            __move_range(__p, this->__end_, __p + 1);
        -: 1735:            const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
        -: 1736:            if (__p <= __xr && __xr < this->__end_)
        -: 1737:                ++__xr;
        -: 1738:            *__p = *__xr;
        -: 1739:        }
        -: 1740:        __annotator.__done();
        -: 1741:    }
        -: 1742:    else
        -: 1743:    {
        -: 1744:        allocator_type& __a = this->__alloc();
        -: 1745:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
        -: 1746:        __v.push_back(__x);
        -: 1747:        __p = __swap_out_circular_buffer(__v, __p);
        -: 1748:    }
        -: 1749:    return __make_iter(__p);
        -: 1750:}
        -: 1751:
        -: 1752:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1753:
        -: 1754:template <class _Tp, class _Allocator>
        -: 1755:typename vector<_Tp, _Allocator>::iterator
        -: 1756:vector<_Tp, _Allocator>::insert(const_iterator __position, value_type&& __x)
        -: 1757:{
        -: 1758:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1759:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1760:        "vector::insert(iterator, x) called with an iterator not"
        -: 1761:        " referring to this vector");
        -: 1762:#endif
        -: 1763:    pointer __p = this->__begin_ + (__position - begin());
        -: 1764:    if (this->__end_ < this->__end_cap())
        -: 1765:    {
        -: 1766:        __RAII_IncreaseAnnotator __annotator(*this);
        -: 1767:        if (__p == this->__end_)
        -: 1768:        {
        -: 1769:            __alloc_traits::construct(this->__alloc(),
        -: 1770:                                      _VSTD::__to_raw_pointer(this->__end_),
        -: 1771:                                      _VSTD::move(__x));
        -: 1772:            ++this->__end_;
        -: 1773:        }
        -: 1774:        else
        -: 1775:        {
        -: 1776:            __move_range(__p, this->__end_, __p + 1);
        -: 1777:            *__p = _VSTD::move(__x);
        -: 1778:        }
        -: 1779:        __annotator.__done();
        -: 1780:    }
        -: 1781:    else
        -: 1782:    {
        -: 1783:        allocator_type& __a = this->__alloc();
        -: 1784:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
        -: 1785:        __v.push_back(_VSTD::move(__x));
        -: 1786:        __p = __swap_out_circular_buffer(__v, __p);
        -: 1787:    }
        -: 1788:    return __make_iter(__p);
        -: 1789:}
        -: 1790:
        -: 1791:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1792:
        -: 1793:template <class _Tp, class _Allocator>
        -: 1794:template <class... _Args>
        -: 1795:typename vector<_Tp, _Allocator>::iterator
        -: 1796:vector<_Tp, _Allocator>::emplace(const_iterator __position, _Args&&... __args)
        -: 1797:{
        -: 1798:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1799:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1800:        "vector::emplace(iterator, x) called with an iterator not"
        -: 1801:        " referring to this vector");
        -: 1802:#endif
        -: 1803:    pointer __p = this->__begin_ + (__position - begin());
        -: 1804:    if (this->__end_ < this->__end_cap())
        -: 1805:    {
        -: 1806:        __RAII_IncreaseAnnotator __annotator(*this);
        -: 1807:        if (__p == this->__end_)
        -: 1808:        {
        -: 1809:            __alloc_traits::construct(this->__alloc(),
        -: 1810:                                      _VSTD::__to_raw_pointer(this->__end_),
        -: 1811:                                      _VSTD::forward<_Args>(__args)...);
        -: 1812:            ++this->__end_;
        -: 1813:        }
        -: 1814:        else
        -: 1815:        {
        -: 1816:            value_type __tmp(_VSTD::forward<_Args>(__args)...);
        -: 1817:            __move_range(__p, this->__end_, __p + 1);
        -: 1818:            *__p = _VSTD::move(__tmp);
        -: 1819:        }
        -: 1820:        __annotator.__done();
        -: 1821:    }
        -: 1822:    else
        -: 1823:    {
        -: 1824:        allocator_type& __a = this->__alloc();
        -: 1825:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
        -: 1826:        __v.emplace_back(_VSTD::forward<_Args>(__args)...);
        -: 1827:        __p = __swap_out_circular_buffer(__v, __p);
        -: 1828:    }
        -: 1829:    return __make_iter(__p);
        -: 1830:}
        -: 1831:
        -: 1832:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1833:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1834:
        -: 1835:template <class _Tp, class _Allocator>
        -: 1836:typename vector<_Tp, _Allocator>::iterator
        -: 1837:vector<_Tp, _Allocator>::insert(const_iterator __position, size_type __n, const_reference __x)
        -: 1838:{
        -: 1839:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1840:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1841:        "vector::insert(iterator, n, x) called with an iterator not"
        -: 1842:        " referring to this vector");
        -: 1843:#endif
        -: 1844:    pointer __p = this->__begin_ + (__position - begin());
        -: 1845:    if (__n > 0)
        -: 1846:    {
        -: 1847:        if (__n <= static_cast<size_type>(this->__end_cap() - this->__end_))
        -: 1848:        {
        -: 1849:            size_type __old_n = __n;
        -: 1850:            pointer __old_last = this->__end_;
        -: 1851:            if (__n > static_cast<size_type>(this->__end_ - __p))
        -: 1852:            {
        -: 1853:                size_type __cx = __n - (this->__end_ - __p);
        -: 1854:                __construct_at_end(__cx, __x);
        -: 1855:                __n -= __cx;
        -: 1856:            }
        -: 1857:            if (__n > 0)
        -: 1858:            {
        -: 1859:                __RAII_IncreaseAnnotator __annotator(*this, __n);
        -: 1860:                __move_range(__p, __old_last, __p + __old_n);
        -: 1861:                __annotator.__done();
        -: 1862:                const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
        -: 1863:                if (__p <= __xr && __xr < this->__end_)
        -: 1864:                    __xr += __old_n;
        -: 1865:                _VSTD::fill_n(__p, __n, *__xr);
        -: 1866:            }
        -: 1867:        }
        -: 1868:        else
        -: 1869:        {
        -: 1870:            allocator_type& __a = this->__alloc();
        -: 1871:            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
        -: 1872:            __v.__construct_at_end(__n, __x);
        -: 1873:            __p = __swap_out_circular_buffer(__v, __p);
        -: 1874:        }
        -: 1875:    }
        -: 1876:    return __make_iter(__p);
        -: 1877:}
        -: 1878:
        -: 1879:template <class _Tp, class _Allocator>
        -: 1880:template <class _InputIterator>
        -: 1881:typename enable_if
        -: 1882:<
        -: 1883:     __is_input_iterator  <_InputIterator>::value &&
        -: 1884:    !__is_forward_iterator<_InputIterator>::value &&
        -: 1885:    is_constructible<
        -: 1886:       _Tp,
        -: 1887:       typename iterator_traits<_InputIterator>::reference>::value,
        -: 1888:    typename vector<_Tp, _Allocator>::iterator
        -: 1889:>::type
        -: 1890:vector<_Tp, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)
        -: 1891:{
        -: 1892:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1893:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1894:        "vector::insert(iterator, range) called with an iterator not"
        -: 1895:        " referring to this vector");
        -: 1896:#endif
        -: 1897:    difference_type __off = __position - begin();
        -: 1898:    pointer __p = this->__begin_ + __off;
        -: 1899:    allocator_type& __a = this->__alloc();
        -: 1900:    pointer __old_last = this->__end_;
        -: 1901:    for (; this->__end_ != this->__end_cap() && __first != __last; ++__first)
        -: 1902:    {
        -: 1903:        __RAII_IncreaseAnnotator __annotator(*this);
        -: 1904:        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_),
        -: 1905:                                  *__first);
        -: 1906:        ++this->__end_;
        -: 1907:        __annotator.__done();
        -: 1908:    }
        -: 1909:    __split_buffer<value_type, allocator_type&> __v(__a);
        -: 1910:    if (__first != __last)
        -: 1911:    {
        -: 1912:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1913:        try
        -: 1914:        {
        -: 1915:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1916:            __v.__construct_at_end(__first, __last);
        -: 1917:            difference_type __old_size = __old_last - this->__begin_;
        -: 1918:            difference_type __old_p = __p - this->__begin_;
        -: 1919:            reserve(__recommend(size() + __v.size()));
        -: 1920:            __p = this->__begin_ + __old_p;
        -: 1921:            __old_last = this->__begin_ + __old_size;
        -: 1922:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1923:        }
        -: 1924:        catch (...)
        -: 1925:        {
        -: 1926:            erase(__make_iter(__old_last), end());
        -: 1927:            throw;
        -: 1928:        }
        -: 1929:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1930:    }
        -: 1931:    __p = _VSTD::rotate(__p, __old_last, this->__end_);
        -: 1932:    insert(__make_iter(__p), make_move_iterator(__v.begin()),
        -: 1933:                                    make_move_iterator(__v.end()));
        -: 1934:    return begin() + __off;
        -: 1935:}
        -: 1936:
        -: 1937:template <class _Tp, class _Allocator>
        -: 1938:template <class _ForwardIterator>
        -: 1939:typename enable_if
        -: 1940:<
        -: 1941:    __is_forward_iterator<_ForwardIterator>::value &&
        -: 1942:    is_constructible<
        -: 1943:       _Tp,
        -: 1944:       typename iterator_traits<_ForwardIterator>::reference>::value,
        -: 1945:    typename vector<_Tp, _Allocator>::iterator
        -: 1946:>::type
        -: 1947:vector<_Tp, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)
        -: 1948:{
        -: 1949:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1950:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1951:        "vector::insert(iterator, range) called with an iterator not"
        -: 1952:        " referring to this vector");
        -: 1953:#endif
        -: 1954:    pointer __p = this->__begin_ + (__position - begin());
        -: 1955:    difference_type __n = _VSTD::distance(__first, __last);
        -: 1956:    if (__n > 0)
        -: 1957:    {
        -: 1958:        if (__n <= this->__end_cap() - this->__end_)
        -: 1959:        {
        -: 1960:            size_type __old_n = __n;
        -: 1961:            pointer __old_last = this->__end_;
        -: 1962:            _ForwardIterator __m = __last;
        -: 1963:            difference_type __dx = this->__end_ - __p;
        -: 1964:            if (__n > __dx)
        -: 1965:            {
        -: 1966:                __m = __first;
        -: 1967:                difference_type __diff = this->__end_ - __p;
        -: 1968:                _VSTD::advance(__m, __diff);
        -: 1969:                __construct_at_end(__m, __last, __n - __diff);
        -: 1970:                __n = __dx;
        -: 1971:            }
        -: 1972:            if (__n > 0)
        -: 1973:            {
        -: 1974:                __RAII_IncreaseAnnotator __annotator(*this, __n);
        -: 1975:                __move_range(__p, __old_last, __p + __old_n);
        -: 1976:                __annotator.__done();
        -: 1977:                _VSTD::copy(__first, __m, __p);
        -: 1978:            }
        -: 1979:        }
        -: 1980:        else
        -: 1981:        {
        -: 1982:            allocator_type& __a = this->__alloc();
        -: 1983:            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
        -: 1984:            __v.__construct_at_end(__first, __last);
        -: 1985:            __p = __swap_out_circular_buffer(__v, __p);
        -: 1986:        }
        -: 1987:    }
        -: 1988:    return __make_iter(__p);
        -: 1989:}
        -: 1990:
        -: 1991:template <class _Tp, class _Allocator>
        -: 1992:void
        -: 1993:vector<_Tp, _Allocator>::resize(size_type __sz)
        -: 1994:{
        -: 1995:    size_type __cs = size();
        -: 1996:    if (__cs < __sz)
        -: 1997:        this->__append(__sz - __cs);
        -: 1998:    else if (__cs > __sz)
        -: 1999:        this->__destruct_at_end(this->__begin_ + __sz);
        -: 2000:}
        -: 2001:
        -: 2002:template <class _Tp, class _Allocator>
        -: 2003:void
        -: 2004:vector<_Tp, _Allocator>::resize(size_type __sz, const_reference __x)
        -: 2005:{
        -: 2006:    size_type __cs = size();
        -: 2007:    if (__cs < __sz)
        -: 2008:        this->__append(__sz - __cs, __x);
        -: 2009:    else if (__cs > __sz)
        -: 2010:        this->__destruct_at_end(this->__begin_ + __sz);
        -: 2011:}
        -: 2012:
        -: 2013:template <class _Tp, class _Allocator>
        -: 2014:void
        -: 2015:vector<_Tp, _Allocator>::swap(vector& __x)
        -: 2016:#if _LIBCPP_STD_VER >= 14
        -: 2017:    _NOEXCEPT
        -: 2018:#else
        -: 2019:    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value || 
        -: 2020:                __is_nothrow_swappable<allocator_type>::value)
        -: 2021:#endif
        -: 2022:{
        -: 2023:    _LIBCPP_ASSERT(__alloc_traits::propagate_on_container_swap::value ||
        -: 2024:                   this->__alloc() == __x.__alloc(),
        -: 2025:                   "vector::swap: Either propagate_on_container_swap must be true"
        -: 2026:                   " or the allocators must compare equal");
        -: 2027:    _VSTD::swap(this->__begin_, __x.__begin_);
        -: 2028:    _VSTD::swap(this->__end_, __x.__end_);
        -: 2029:    _VSTD::swap(this->__end_cap(), __x.__end_cap());
        -: 2030:    __swap_allocator(this->__alloc(), __x.__alloc(), 
        -: 2031:        integral_constant<bool,__alloc_traits::propagate_on_container_swap::value>());
        -: 2032:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2033:    __get_db()->swap(this, &__x);
        -: 2034:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 2035:}
        -: 2036:
        -: 2037:template <class _Tp, class _Allocator>
        -: 2038:bool
        -: 2039:vector<_Tp, _Allocator>::__invariants() const
        -: 2040:{
        -: 2041:    if (this->__begin_ == nullptr)
        -: 2042:    {
        -: 2043:        if (this->__end_ != nullptr || this->__end_cap() != nullptr)
        -: 2044:            return false;
        -: 2045:    }
        -: 2046:    else
        -: 2047:    {
        -: 2048:        if (this->__begin_ > this->__end_)
        -: 2049:            return false;
        -: 2050:        if (this->__begin_ == this->__end_cap())
        -: 2051:            return false;
        -: 2052:        if (this->__end_ > this->__end_cap())
        -: 2053:            return false;
        -: 2054:    }
        -: 2055:    return true;
        -: 2056:}
        -: 2057:
        -: 2058:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2059:
        -: 2060:template <class _Tp, class _Allocator>
        -: 2061:bool
        -: 2062:vector<_Tp, _Allocator>::__dereferenceable(const const_iterator* __i) const
        -: 2063:{
        -: 2064:    return this->__begin_ <= __i->base() && __i->base() < this->__end_;
        -: 2065:}
        -: 2066:
        -: 2067:template <class _Tp, class _Allocator>
        -: 2068:bool
        -: 2069:vector<_Tp, _Allocator>::__decrementable(const const_iterator* __i) const
        -: 2070:{
        -: 2071:    return this->__begin_ < __i->base() && __i->base() <= this->__end_;
        -: 2072:}
        -: 2073:
        -: 2074:template <class _Tp, class _Allocator>
        -: 2075:bool
        -: 2076:vector<_Tp, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const
        -: 2077:{
        -: 2078:    const_pointer __p = __i->base() + __n;
        -: 2079:    return this->__begin_ <= __p && __p <= this->__end_;
        -: 2080:}
        -: 2081:
        -: 2082:template <class _Tp, class _Allocator>
        -: 2083:bool
        -: 2084:vector<_Tp, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const
        -: 2085:{
        -: 2086:    const_pointer __p = __i->base() + __n;
        -: 2087:    return this->__begin_ <= __p && __p < this->__end_;
        -: 2088:}
        -: 2089:
        -: 2090:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 2091:
        -: 2092:template <class _Tp, class _Allocator>
        -: 2093:inline _LIBCPP_INLINE_VISIBILITY
        -: 2094:void
        -: 2095:vector<_Tp, _Allocator>::__invalidate_all_iterators()
        -: 2096:{
        -: 2097:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2098:    __get_db()->__invalidate_all(this);
        -: 2099:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
       10: 2100:}
        -: 2101:
        -: 2102:// vector<bool>
        -: 2103:
        -: 2104:template <class _Allocator> class vector<bool, _Allocator>;
        -: 2105:
        -: 2106:template <class _Allocator> struct hash<vector<bool, _Allocator> >;
        -: 2107:
        -: 2108:template <class _Allocator>
        -: 2109:struct __has_storage_type<vector<bool, _Allocator> >
        -: 2110:{
        -: 2111:    static const bool value = true;
        -: 2112:};
        -: 2113:
        -: 2114:template <class _Allocator>
        -: 2115:class _LIBCPP_TYPE_VIS_ONLY vector<bool, _Allocator>
        -: 2116:    : private __vector_base_common<true>
        -: 2117:{
        -: 2118:public:
        -: 2119:    typedef vector                                   __self;
        -: 2120:    typedef bool                                     value_type;
        -: 2121:    typedef _Allocator                               allocator_type;
        -: 2122:    typedef allocator_traits<allocator_type>         __alloc_traits;
        -: 2123:    typedef typename __alloc_traits::size_type       size_type;
        -: 2124:    typedef typename __alloc_traits::difference_type difference_type;
        -: 2125:    typedef size_type __storage_type;
        -: 2126:    typedef __bit_iterator<vector, false>            pointer;
        -: 2127:    typedef __bit_iterator<vector, true>             const_pointer;
        -: 2128:    typedef pointer                                  iterator;
        -: 2129:    typedef const_pointer                            const_iterator;
        -: 2130:    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;
        -: 2131:    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;
        -: 2132:
        -: 2133:private:
        -: 2134:    typedef typename __rebind_alloc_helper<__alloc_traits, __storage_type>::type __storage_allocator;
        -: 2135:    typedef allocator_traits<__storage_allocator>    __storage_traits;
        -: 2136:    typedef typename __storage_traits::pointer       __storage_pointer;
        -: 2137:    typedef typename __storage_traits::const_pointer __const_storage_pointer;
        -: 2138:
        -: 2139:    __storage_pointer                                      __begin_;
        -: 2140:    size_type                                              __size_;
        -: 2141:    __compressed_pair<size_type, __storage_allocator> __cap_alloc_;
        -: 2142:public:
        -: 2143:    typedef __bit_reference<vector>                  reference;
        -: 2144:    typedef __bit_const_reference<vector>            const_reference;
        -: 2145:private:
        -: 2146:    _LIBCPP_INLINE_VISIBILITY
        -: 2147:    size_type& __cap() _NOEXCEPT
        -: 2148:        {return __cap_alloc_.first();}
        -: 2149:    _LIBCPP_INLINE_VISIBILITY
        -: 2150:    const size_type& __cap() const _NOEXCEPT
        -: 2151:        {return __cap_alloc_.first();}
        -: 2152:    _LIBCPP_INLINE_VISIBILITY
        -: 2153:    __storage_allocator& __alloc() _NOEXCEPT
        -: 2154:        {return __cap_alloc_.second();}
        -: 2155:    _LIBCPP_INLINE_VISIBILITY
        -: 2156:    const __storage_allocator& __alloc() const _NOEXCEPT
        -: 2157:        {return __cap_alloc_.second();}
        -: 2158:
        -: 2159:    static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * CHAR_BIT);
        -: 2160:
        -: 2161:    _LIBCPP_INLINE_VISIBILITY
        -: 2162:    static size_type __internal_cap_to_external(size_type __n) _NOEXCEPT
        -: 2163:        {return __n * __bits_per_word;}
        -: 2164:    _LIBCPP_INLINE_VISIBILITY
        -: 2165:    static size_type __external_cap_to_internal(size_type __n) _NOEXCEPT
        -: 2166:        {return (__n - 1) / __bits_per_word + 1;}
        -: 2167:
        -: 2168:public:
        -: 2169:    _LIBCPP_INLINE_VISIBILITY
        -: 2170:    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);
        -: 2171:
        -: 2172:    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)
        -: 2173:#if _LIBCPP_STD_VER <= 14
        -: 2174:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);
        -: 2175:#else
        -: 2176:        _NOEXCEPT;
        -: 2177:#endif
        -: 2178:    ~vector();
        -: 2179:    explicit vector(size_type __n);
        -: 2180:#if _LIBCPP_STD_VER > 11
        -: 2181:    explicit vector(size_type __n, const allocator_type& __a);
        -: 2182:#endif
        -: 2183:    vector(size_type __n, const value_type& __v);
        -: 2184:    vector(size_type __n, const value_type& __v, const allocator_type& __a);
        -: 2185:    template <class _InputIterator>
        -: 2186:        vector(_InputIterator __first, _InputIterator __last,
        -: 2187:               typename enable_if<__is_input_iterator  <_InputIterator>::value &&
        -: 2188:                                 !__is_forward_iterator<_InputIterator>::value>::type* = 0);
        -: 2189:    template <class _InputIterator>
        -: 2190:        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -: 2191:               typename enable_if<__is_input_iterator  <_InputIterator>::value &&
        -: 2192:                                 !__is_forward_iterator<_InputIterator>::value>::type* = 0);
        -: 2193:    template <class _ForwardIterator>
        -: 2194:        vector(_ForwardIterator __first, _ForwardIterator __last,
        -: 2195:               typename enable_if<__is_forward_iterator<_ForwardIterator>::value>::type* = 0);
        -: 2196:    template <class _ForwardIterator>
        -: 2197:        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -: 2198:               typename enable_if<__is_forward_iterator<_ForwardIterator>::value>::type* = 0);
        -: 2199:
        -: 2200:    vector(const vector& __v);
        -: 2201:    vector(const vector& __v, const allocator_type& __a);
        -: 2202:    vector& operator=(const vector& __v);
        -: 2203:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2204:    vector(initializer_list<value_type> __il);
        -: 2205:    vector(initializer_list<value_type> __il, const allocator_type& __a);
        -: 2206:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2207:
        -: 2208:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2209:    _LIBCPP_INLINE_VISIBILITY
        -: 2210:    vector(vector&& __v)
        -: 2211:#if _LIBCPP_STD_VER > 14
        -: 2212:        _NOEXCEPT;
        -: 2213:#else
        -: 2214:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);
        -: 2215:#endif
        -: 2216:    vector(vector&& __v, const allocator_type& __a);
        -: 2217:    _LIBCPP_INLINE_VISIBILITY
        -: 2218:    vector& operator=(vector&& __v)
        -: 2219:        _NOEXCEPT_(
        -: 2220:             __alloc_traits::propagate_on_container_move_assignment::value &&
        -: 2221:             is_nothrow_move_assignable<allocator_type>::value);
        -: 2222:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2223:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2224:    _LIBCPP_INLINE_VISIBILITY
        -: 2225:    vector& operator=(initializer_list<value_type> __il)
        -: 2226:        {assign(__il.begin(), __il.end()); return *this;}
        -: 2227:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2228:
        -: 2229:    template <class _InputIterator>
        -: 2230:        typename enable_if
        -: 2231:        <
        -: 2232:            __is_input_iterator<_InputIterator>::value &&
        -: 2233:           !__is_forward_iterator<_InputIterator>::value,
        -: 2234:           void
        -: 2235:        >::type
        -: 2236:        assign(_InputIterator __first, _InputIterator __last);
        -: 2237:    template <class _ForwardIterator>
        -: 2238:        typename enable_if
        -: 2239:        <
        -: 2240:            __is_forward_iterator<_ForwardIterator>::value,
        -: 2241:           void
        -: 2242:        >::type
        -: 2243:        assign(_ForwardIterator __first, _ForwardIterator __last);
        -: 2244:
        -: 2245:    void assign(size_type __n, const value_type& __x);
        -: 2246:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2247:    _LIBCPP_INLINE_VISIBILITY
        -: 2248:    void assign(initializer_list<value_type> __il)
        -: 2249:        {assign(__il.begin(), __il.end());}
        -: 2250:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2251:
        -: 2252:    _LIBCPP_INLINE_VISIBILITY allocator_type get_allocator() const _NOEXCEPT
        -: 2253:        {return allocator_type(this->__alloc());}
        -: 2254:
        -: 2255:    size_type max_size() const _NOEXCEPT;
        -: 2256:    _LIBCPP_INLINE_VISIBILITY
        -: 2257:    size_type capacity() const _NOEXCEPT
        -: 2258:        {return __internal_cap_to_external(__cap());}
        -: 2259:    _LIBCPP_INLINE_VISIBILITY
        -: 2260:    size_type size() const _NOEXCEPT
        -: 2261:        {return __size_;}
        -: 2262:    _LIBCPP_INLINE_VISIBILITY
        -: 2263:    bool empty() const _NOEXCEPT
        -: 2264:        {return __size_ == 0;}
        -: 2265:    void reserve(size_type __n);
        -: 2266:    void shrink_to_fit() _NOEXCEPT;
        -: 2267:
        -: 2268:    _LIBCPP_INLINE_VISIBILITY
        -: 2269:    iterator begin() _NOEXCEPT
        -: 2270:        {return __make_iter(0);}
        -: 2271:    _LIBCPP_INLINE_VISIBILITY
        -: 2272:    const_iterator begin() const _NOEXCEPT
        -: 2273:        {return __make_iter(0);}
        -: 2274:    _LIBCPP_INLINE_VISIBILITY
        -: 2275:    iterator end() _NOEXCEPT
        -: 2276:        {return __make_iter(__size_);}
        -: 2277:    _LIBCPP_INLINE_VISIBILITY
        -: 2278:    const_iterator end()   const _NOEXCEPT
        -: 2279:        {return __make_iter(__size_);}
        -: 2280:
        -: 2281:    _LIBCPP_INLINE_VISIBILITY
        -: 2282:    reverse_iterator rbegin() _NOEXCEPT
        -: 2283:        {return       reverse_iterator(end());}
        -: 2284:    _LIBCPP_INLINE_VISIBILITY
        -: 2285:    const_reverse_iterator rbegin() const _NOEXCEPT
        -: 2286:        {return const_reverse_iterator(end());}
        -: 2287:    _LIBCPP_INLINE_VISIBILITY
        -: 2288:    reverse_iterator rend() _NOEXCEPT
        -: 2289:        {return       reverse_iterator(begin());}
        -: 2290:    _LIBCPP_INLINE_VISIBILITY
        -: 2291:    const_reverse_iterator rend()   const _NOEXCEPT
        -: 2292:        {return const_reverse_iterator(begin());}
        -: 2293:
        -: 2294:    _LIBCPP_INLINE_VISIBILITY
        -: 2295:    const_iterator         cbegin()  const _NOEXCEPT
        -: 2296:        {return __make_iter(0);}
        -: 2297:    _LIBCPP_INLINE_VISIBILITY
        -: 2298:    const_iterator         cend()    const _NOEXCEPT
        -: 2299:        {return __make_iter(__size_);}
        -: 2300:    _LIBCPP_INLINE_VISIBILITY
        -: 2301:    const_reverse_iterator crbegin() const _NOEXCEPT
        -: 2302:        {return rbegin();}
        -: 2303:    _LIBCPP_INLINE_VISIBILITY
        -: 2304:    const_reverse_iterator crend()   const _NOEXCEPT
        -: 2305:        {return rend();}
        -: 2306:
        -: 2307:    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n)       {return __make_ref(__n);}
        -: 2308:    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const {return __make_ref(__n);}
        -: 2309:    reference       at(size_type __n);
        -: 2310:    const_reference at(size_type __n) const;
        -: 2311:
        -: 2312:    _LIBCPP_INLINE_VISIBILITY reference       front()       {return __make_ref(0);}
        -: 2313:    _LIBCPP_INLINE_VISIBILITY const_reference front() const {return __make_ref(0);}
        -: 2314:    _LIBCPP_INLINE_VISIBILITY reference       back()        {return __make_ref(__size_ - 1);}
        -: 2315:    _LIBCPP_INLINE_VISIBILITY const_reference back()  const {return __make_ref(__size_ - 1);}
        -: 2316:
        -: 2317:    void push_back(const value_type& __x);
        -: 2318:#if _LIBCPP_STD_VER > 11
        -: 2319:    template <class... _Args>
        -: 2320:    _LIBCPP_INLINE_VISIBILITY void emplace_back(_Args&&... __args)
        -: 2321:        { push_back ( value_type ( _VSTD::forward<_Args>(__args)... )); }
        -: 2322:#endif
        -: 2323:
        -: 2324:    _LIBCPP_INLINE_VISIBILITY void pop_back() {--__size_;}
        -: 2325:
        -: 2326:#if _LIBCPP_STD_VER > 11
        -: 2327:    template <class... _Args>
        -: 2328:   _LIBCPP_INLINE_VISIBILITY iterator emplace(const_iterator position, _Args&&... __args)
        -: 2329:        { return insert ( position, value_type ( _VSTD::forward<_Args>(__args)... )); }
        -: 2330:#endif
        -: 2331:
        -: 2332:    iterator insert(const_iterator __position, const value_type& __x);
        -: 2333:    iterator insert(const_iterator __position, size_type __n, const value_type& __x);
        -: 2334:    iterator insert(const_iterator __position, size_type __n, const_reference __x);
        -: 2335:    template <class _InputIterator>
        -: 2336:        typename enable_if
        -: 2337:        <
        -: 2338:             __is_input_iterator  <_InputIterator>::value &&
        -: 2339:            !__is_forward_iterator<_InputIterator>::value,
        -: 2340:            iterator
        -: 2341:        >::type
        -: 2342:        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
        -: 2343:    template <class _ForwardIterator>
        -: 2344:        typename enable_if
        -: 2345:        <
        -: 2346:            __is_forward_iterator<_ForwardIterator>::value,
        -: 2347:            iterator
        -: 2348:        >::type
        -: 2349:        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);
        -: 2350:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2351:    _LIBCPP_INLINE_VISIBILITY
        -: 2352:    iterator insert(const_iterator __position, initializer_list<value_type> __il)
        -: 2353:        {return insert(__position, __il.begin(), __il.end());}
        -: 2354:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2355:
        -: 2356:    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);
        -: 2357:    iterator erase(const_iterator __first, const_iterator __last);
        -: 2358:
        -: 2359:    _LIBCPP_INLINE_VISIBILITY
        -: 2360:    void clear() _NOEXCEPT {__size_ = 0;}
        -: 2361:
        -: 2362:    void swap(vector&)
        -: 2363:#if _LIBCPP_STD_VER >= 14
        -: 2364:        _NOEXCEPT;
        -: 2365:#else
        -: 2366:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value || 
        -: 2367:                    __is_nothrow_swappable<allocator_type>::value);
        -: 2368:#endif
        -: 2369:
        -: 2370:    void resize(size_type __sz, value_type __x = false);
        -: 2371:    void flip() _NOEXCEPT;
        -: 2372:
        -: 2373:    bool __invariants() const;
        -: 2374:
        -: 2375:private:
        -: 2376:    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();
        -: 2377:    void allocate(size_type __n);
        -: 2378:    void deallocate() _NOEXCEPT;
        -: 2379:    _LIBCPP_INLINE_VISIBILITY
        -: 2380:    static size_type __align_it(size_type __new_size) _NOEXCEPT
        -: 2381:        {return __new_size + (__bits_per_word-1) & ~((size_type)__bits_per_word-1);};
        -: 2382:    _LIBCPP_INLINE_VISIBILITY  size_type __recommend(size_type __new_size) const;
        -: 2383:    _LIBCPP_INLINE_VISIBILITY void __construct_at_end(size_type __n, bool __x);
        -: 2384:    template <class _ForwardIterator>
        -: 2385:        typename enable_if
        -: 2386:        <
        -: 2387:            __is_forward_iterator<_ForwardIterator>::value,
        -: 2388:            void
        -: 2389:        >::type
        -: 2390:        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last);
        -: 2391:    void __append(size_type __n, const_reference __x);
        -: 2392:    _LIBCPP_INLINE_VISIBILITY
        -: 2393:    reference __make_ref(size_type __pos) _NOEXCEPT
        -: 2394:        {return reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}
        -: 2395:    _LIBCPP_INLINE_VISIBILITY
        -: 2396:    const_reference __make_ref(size_type __pos) const _NOEXCEPT
        -: 2397:        {return const_reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}
        -: 2398:    _LIBCPP_INLINE_VISIBILITY
        -: 2399:    iterator __make_iter(size_type __pos) _NOEXCEPT
        -: 2400:        {return iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}
        -: 2401:    _LIBCPP_INLINE_VISIBILITY
        -: 2402:    const_iterator __make_iter(size_type __pos) const _NOEXCEPT
        -: 2403:        {return const_iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}
        -: 2404:    _LIBCPP_INLINE_VISIBILITY
        -: 2405:    iterator __const_iterator_cast(const_iterator __p) _NOEXCEPT
        -: 2406:        {return begin() + (__p - cbegin());}
        -: 2407:
        -: 2408:    _LIBCPP_INLINE_VISIBILITY
        -: 2409:    void __copy_assign_alloc(const vector& __v)
        -: 2410:        {__copy_assign_alloc(__v, integral_constant<bool,
        -: 2411:                      __storage_traits::propagate_on_container_copy_assignment::value>());}
        -: 2412:    _LIBCPP_INLINE_VISIBILITY
        -: 2413:    void __copy_assign_alloc(const vector& __c, true_type)
        -: 2414:        {
        -: 2415:            if (__alloc() != __c.__alloc())
        -: 2416:                deallocate();
        -: 2417:            __alloc() = __c.__alloc();
        -: 2418:        }
        -: 2419:
        -: 2420:    _LIBCPP_INLINE_VISIBILITY
        -: 2421:    void __copy_assign_alloc(const vector&, false_type)
        -: 2422:        {}
        -: 2423:
        -: 2424:    void __move_assign(vector& __c, false_type);
        -: 2425:    void __move_assign(vector& __c, true_type)
        -: 2426:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);
        -: 2427:    _LIBCPP_INLINE_VISIBILITY
        -: 2428:    void __move_assign_alloc(vector& __c)
        -: 2429:        _NOEXCEPT_(
        -: 2430:            !__storage_traits::propagate_on_container_move_assignment::value ||
        -: 2431:            is_nothrow_move_assignable<allocator_type>::value)
        -: 2432:        {__move_assign_alloc(__c, integral_constant<bool,
        -: 2433:                      __storage_traits::propagate_on_container_move_assignment::value>());}
        -: 2434:    _LIBCPP_INLINE_VISIBILITY
        -: 2435:    void __move_assign_alloc(vector& __c, true_type)
        -: 2436:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 2437:        {
        -: 2438:            __alloc() = _VSTD::move(__c.__alloc());
        -: 2439:        }
        -: 2440:
        -: 2441:    _LIBCPP_INLINE_VISIBILITY
        -: 2442:    void __move_assign_alloc(vector&, false_type)
        -: 2443:        _NOEXCEPT
        -: 2444:        {}
        -: 2445:
        -: 2446:    size_t __hash_code() const _NOEXCEPT;
        -: 2447:
        -: 2448:    friend class __bit_reference<vector>;
        -: 2449:    friend class __bit_const_reference<vector>;
        -: 2450:    friend class __bit_iterator<vector, false>;
        -: 2451:    friend class __bit_iterator<vector, true>;
        -: 2452:    friend struct __bit_array<vector>;
        -: 2453:    friend struct _LIBCPP_TYPE_VIS_ONLY hash<vector>;
        -: 2454:};
        -: 2455:
        -: 2456:template <class _Allocator>
        -: 2457:inline _LIBCPP_INLINE_VISIBILITY
        -: 2458:void
        -: 2459:vector<bool, _Allocator>::__invalidate_all_iterators()
        -: 2460:{
        -: 2461:}
        -: 2462:
        -: 2463://  Allocate space for __n objects
        -: 2464://  throws length_error if __n > max_size()
        -: 2465://  throws (probably bad_alloc) if memory run out
        -: 2466://  Precondition:  __begin_ == __end_ == __cap() == 0
        -: 2467://  Precondition:  __n > 0
        -: 2468://  Postcondition:  capacity() == __n
        -: 2469://  Postcondition:  size() == 0
        -: 2470:template <class _Allocator>
        -: 2471:void
        -: 2472:vector<bool, _Allocator>::allocate(size_type __n)
        -: 2473:{
        -: 2474:    if (__n > max_size())
        -: 2475:        this->__throw_length_error();
        -: 2476:    __n = __external_cap_to_internal(__n);
        -: 2477:    this->__begin_ = __storage_traits::allocate(this->__alloc(), __n);
        -: 2478:    this->__size_ = 0;
        -: 2479:    this->__cap() = __n;
        -: 2480:}
        -: 2481:
        -: 2482:template <class _Allocator>
        -: 2483:void
        -: 2484:vector<bool, _Allocator>::deallocate() _NOEXCEPT
        -: 2485:{
        -: 2486:    if (this->__begin_ != nullptr)
        -: 2487:    {
        -: 2488:        __storage_traits::deallocate(this->__alloc(), this->__begin_, __cap());
        -: 2489:        __invalidate_all_iterators();
        -: 2490:        this->__begin_ = nullptr;
        -: 2491:        this->__size_ = this->__cap() = 0;
        -: 2492:    }
        -: 2493:}
        -: 2494:
        -: 2495:template <class _Allocator>
        -: 2496:typename vector<bool, _Allocator>::size_type
        -: 2497:vector<bool, _Allocator>::max_size() const _NOEXCEPT
        -: 2498:{
        -: 2499:    size_type __amax = __storage_traits::max_size(__alloc());
        -: 2500:    size_type __nmax = numeric_limits<size_type>::max() / 2;  // end() >= begin(), always
        -: 2501:    if (__nmax / __bits_per_word <= __amax)
        -: 2502:        return __nmax;
        -: 2503:    return __internal_cap_to_external(__amax);
        -: 2504:}
        -: 2505:
        -: 2506://  Precondition:  __new_size > capacity()
        -: 2507:template <class _Allocator>
        -: 2508:inline _LIBCPP_INLINE_VISIBILITY
        -: 2509:typename vector<bool, _Allocator>::size_type
        -: 2510:vector<bool, _Allocator>::__recommend(size_type __new_size) const
        -: 2511:{
        -: 2512:    const size_type __ms = max_size();
        -: 2513:    if (__new_size > __ms)
        -: 2514:        this->__throw_length_error();
        -: 2515:    const size_type __cap = capacity();
        -: 2516:    if (__cap >= __ms / 2)
        -: 2517:        return __ms;
        -: 2518:    return _VSTD::max(2*__cap, __align_it(__new_size));
        -: 2519:}
        -: 2520:
        -: 2521://  Default constructs __n objects starting at __end_
        -: 2522://  Precondition:  __n > 0
        -: 2523://  Precondition:  size() + __n <= capacity()
        -: 2524://  Postcondition:  size() == size() + __n
        -: 2525:template <class _Allocator>
        -: 2526:inline _LIBCPP_INLINE_VISIBILITY
        -: 2527:void
        -: 2528:vector<bool, _Allocator>::__construct_at_end(size_type __n, bool __x)
        -: 2529:{
        -: 2530:    size_type __old_size = this->__size_;
        -: 2531:    this->__size_ += __n;
        -: 2532:    _VSTD::fill_n(__make_iter(__old_size), __n, __x);
        -: 2533:}
        -: 2534:
        -: 2535:template <class _Allocator>
        -: 2536:template <class _ForwardIterator>
        -: 2537:typename enable_if
        -: 2538:<
        -: 2539:    __is_forward_iterator<_ForwardIterator>::value,
        -: 2540:    void
        -: 2541:>::type
        -: 2542:vector<bool, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last)
        -: 2543:{
        -: 2544:    size_type __old_size = this->__size_;
        -: 2545:    this->__size_ += _VSTD::distance(__first, __last);
        -: 2546:    _VSTD::copy(__first, __last, __make_iter(__old_size));
        -: 2547:}
        -: 2548:
        -: 2549:template <class _Allocator>
        -: 2550:inline _LIBCPP_INLINE_VISIBILITY
        -: 2551:vector<bool, _Allocator>::vector()
        -: 2552:    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
        -: 2553:    : __begin_(nullptr),
        -: 2554:      __size_(0),
        -: 2555:      __cap_alloc_(0)
        -: 2556:{
        -: 2557:}
        -: 2558:
        -: 2559:template <class _Allocator>
        -: 2560:inline _LIBCPP_INLINE_VISIBILITY
        -: 2561:vector<bool, _Allocator>::vector(const allocator_type& __a)
        -: 2562:#if _LIBCPP_STD_VER <= 14
        -: 2563:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -: 2564:#else
        -: 2565:        _NOEXCEPT
        -: 2566:#endif
        -: 2567:    : __begin_(nullptr),
        -: 2568:      __size_(0),
        -: 2569:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2570:{
        -: 2571:}
        -: 2572:
        -: 2573:template <class _Allocator>
        -: 2574:vector<bool, _Allocator>::vector(size_type __n)
        -: 2575:    : __begin_(nullptr),
        -: 2576:      __size_(0),
        -: 2577:      __cap_alloc_(0)
        -: 2578:{
        -: 2579:    if (__n > 0)
        -: 2580:    {
        -: 2581:        allocate(__n);
        -: 2582:        __construct_at_end(__n, false);
        -: 2583:    }
        -: 2584:}
        -: 2585:
        -: 2586:#if _LIBCPP_STD_VER > 11
        -: 2587:template <class _Allocator>
        -: 2588:vector<bool, _Allocator>::vector(size_type __n, const allocator_type& __a)
        -: 2589:    : __begin_(nullptr),
        -: 2590:      __size_(0),
        -: 2591:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2592:{
        -: 2593:    if (__n > 0)
        -: 2594:    {
        -: 2595:        allocate(__n);
        -: 2596:        __construct_at_end(__n, false);
        -: 2597:    }
        -: 2598:}
        -: 2599:#endif
        -: 2600:
        -: 2601:template <class _Allocator>
        -: 2602:vector<bool, _Allocator>::vector(size_type __n, const value_type& __x)
        -: 2603:    : __begin_(nullptr),
        -: 2604:      __size_(0),
        -: 2605:      __cap_alloc_(0)
        -: 2606:{
        -: 2607:    if (__n > 0)
        -: 2608:    {
        -: 2609:        allocate(__n);
        -: 2610:        __construct_at_end(__n, __x);
        -: 2611:    }
        -: 2612:}
        -: 2613:
        -: 2614:template <class _Allocator>
        -: 2615:vector<bool, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)
        -: 2616:    : __begin_(nullptr),
        -: 2617:      __size_(0),
        -: 2618:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2619:{
        -: 2620:    if (__n > 0)
        -: 2621:    {
        -: 2622:        allocate(__n);
        -: 2623:        __construct_at_end(__n, __x);
        -: 2624:    }
        -: 2625:}
        -: 2626:
        -: 2627:template <class _Allocator>
        -: 2628:template <class _InputIterator>
        -: 2629:vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last,
        -: 2630:       typename enable_if<__is_input_iterator  <_InputIterator>::value &&
        -: 2631:                         !__is_forward_iterator<_InputIterator>::value>::type*)
        -: 2632:    : __begin_(nullptr),
        -: 2633:      __size_(0),
        -: 2634:      __cap_alloc_(0)
        -: 2635:{
        -: 2636:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2637:    try
        -: 2638:    {
        -: 2639:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2640:        for (; __first != __last; ++__first)
        -: 2641:            push_back(*__first);
        -: 2642:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2643:    }
        -: 2644:    catch (...)
        -: 2645:    {
        -: 2646:        if (__begin_ != nullptr)
        -: 2647:            __storage_traits::deallocate(__alloc(), __begin_, __cap());
        -: 2648:        __invalidate_all_iterators();
        -: 2649:        throw;
        -: 2650:    }
        -: 2651:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2652:}
        -: 2653:
        -: 2654:template <class _Allocator>
        -: 2655:template <class _InputIterator>
        -: 2656:vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -: 2657:       typename enable_if<__is_input_iterator  <_InputIterator>::value &&
        -: 2658:                         !__is_forward_iterator<_InputIterator>::value>::type*)
        -: 2659:    : __begin_(nullptr),
        -: 2660:      __size_(0),
        -: 2661:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2662:{
        -: 2663:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2664:    try
        -: 2665:    {
        -: 2666:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2667:        for (; __first != __last; ++__first)
        -: 2668:            push_back(*__first);
        -: 2669:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2670:    }
        -: 2671:    catch (...)
        -: 2672:    {
        -: 2673:        if (__begin_ != nullptr)
        -: 2674:            __storage_traits::deallocate(__alloc(), __begin_, __cap());
        -: 2675:        __invalidate_all_iterators();
        -: 2676:        throw;
        -: 2677:    }
        -: 2678:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2679:}
        -: 2680:
        -: 2681:template <class _Allocator>
        -: 2682:template <class _ForwardIterator>
        -: 2683:vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last,
        -: 2684:                                typename enable_if<__is_forward_iterator<_ForwardIterator>::value>::type*)
        -: 2685:    : __begin_(nullptr),
        -: 2686:      __size_(0),
        -: 2687:      __cap_alloc_(0)
        -: 2688:{
        -: 2689:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2690:    if (__n > 0)
        -: 2691:    {
        -: 2692:        allocate(__n);
        -: 2693:        __construct_at_end(__first, __last);
        -: 2694:    }
        -: 2695:}
        -: 2696:
        -: 2697:template <class _Allocator>
        -: 2698:template <class _ForwardIterator>
        -: 2699:vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -: 2700:                                typename enable_if<__is_forward_iterator<_ForwardIterator>::value>::type*)
        -: 2701:    : __begin_(nullptr),
        -: 2702:      __size_(0),
        -: 2703:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2704:{
        -: 2705:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2706:    if (__n > 0)
        -: 2707:    {
        -: 2708:        allocate(__n);
        -: 2709:        __construct_at_end(__first, __last);
        -: 2710:    }
        -: 2711:}
        -: 2712:
        -: 2713:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2714:
        -: 2715:template <class _Allocator>
        -: 2716:vector<bool, _Allocator>::vector(initializer_list<value_type> __il)
        -: 2717:    : __begin_(nullptr),
        -: 2718:      __size_(0),
        -: 2719:      __cap_alloc_(0)
        -: 2720:{
        -: 2721:    size_type __n = static_cast<size_type>(__il.size());
        -: 2722:    if (__n > 0)
        -: 2723:    {
        -: 2724:        allocate(__n);
        -: 2725:        __construct_at_end(__il.begin(), __il.end());
        -: 2726:    }
        -: 2727:}
        -: 2728:
        -: 2729:template <class _Allocator>
        -: 2730:vector<bool, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
        -: 2731:    : __begin_(nullptr),
        -: 2732:      __size_(0),
        -: 2733:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2734:{
        -: 2735:    size_type __n = static_cast<size_type>(__il.size());
        -: 2736:    if (__n > 0)
        -: 2737:    {
        -: 2738:        allocate(__n);
        -: 2739:        __construct_at_end(__il.begin(), __il.end());
        -: 2740:    }
        -: 2741:}
        -: 2742:
        -: 2743:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2744:
        -: 2745:template <class _Allocator>
        -: 2746:vector<bool, _Allocator>::~vector()
        -: 2747:{
        -: 2748:    if (__begin_ != nullptr)
        -: 2749:        __storage_traits::deallocate(__alloc(), __begin_, __cap());
        -: 2750:    __invalidate_all_iterators();
        -: 2751:}
        -: 2752:
        -: 2753:template <class _Allocator>
        -: 2754:vector<bool, _Allocator>::vector(const vector& __v)
        -: 2755:    : __begin_(nullptr),
        -: 2756:      __size_(0),
        -: 2757:      __cap_alloc_(0, __storage_traits::select_on_container_copy_construction(__v.__alloc()))
        -: 2758:{
        -: 2759:    if (__v.size() > 0)
        -: 2760:    {
        -: 2761:        allocate(__v.size());
        -: 2762:        __construct_at_end(__v.begin(), __v.end());
        -: 2763:    }
        -: 2764:}
        -: 2765:
        -: 2766:template <class _Allocator>
        -: 2767:vector<bool, _Allocator>::vector(const vector& __v, const allocator_type& __a)
        -: 2768:    : __begin_(nullptr),
        -: 2769:      __size_(0),
        -: 2770:      __cap_alloc_(0, __a)
        -: 2771:{
        -: 2772:    if (__v.size() > 0)
        -: 2773:    {
        -: 2774:        allocate(__v.size());
        -: 2775:        __construct_at_end(__v.begin(), __v.end());
        -: 2776:    }
        -: 2777:}
        -: 2778:
        -: 2779:template <class _Allocator>
        -: 2780:vector<bool, _Allocator>&
        -: 2781:vector<bool, _Allocator>::operator=(const vector& __v)
        -: 2782:{
        -: 2783:    if (this != &__v)
        -: 2784:    {
        -: 2785:        __copy_assign_alloc(__v);
        -: 2786:        if (__v.__size_)
        -: 2787:        {
        -: 2788:            if (__v.__size_ > capacity())
        -: 2789:            {
        -: 2790:                deallocate();
        -: 2791:                allocate(__v.__size_);
        -: 2792:            }
        -: 2793:            _VSTD::copy(__v.__begin_, __v.__begin_ + __external_cap_to_internal(__v.__size_), __begin_);
        -: 2794:        }
        -: 2795:        __size_ = __v.__size_;
        -: 2796:    }
        -: 2797:    return *this;
        -: 2798:}
        -: 2799:
        -: 2800:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2801:
        -: 2802:template <class _Allocator>
        -: 2803:inline _LIBCPP_INLINE_VISIBILITY
        -: 2804:vector<bool, _Allocator>::vector(vector&& __v)
        -: 2805:#if _LIBCPP_STD_VER > 14
        -: 2806:        _NOEXCEPT
        -: 2807:#else
        -: 2808:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 2809:#endif
        -: 2810:    : __begin_(__v.__begin_),
        -: 2811:      __size_(__v.__size_),
        -: 2812:      __cap_alloc_(__v.__cap_alloc_)
        -: 2813:{
        -: 2814:    __v.__begin_ = nullptr;
        -: 2815:    __v.__size_ = 0;
        -: 2816:    __v.__cap() = 0;
        -: 2817:}
        -: 2818:
        -: 2819:template <class _Allocator>
        -: 2820:vector<bool, _Allocator>::vector(vector&& __v, const allocator_type& __a)
        -: 2821:    : __begin_(nullptr),
        -: 2822:      __size_(0),
        -: 2823:      __cap_alloc_(0, __a)
        -: 2824:{
        -: 2825:    if (__a == allocator_type(__v.__alloc()))
        -: 2826:    {
        -: 2827:        this->__begin_ = __v.__begin_;
        -: 2828:        this->__size_ = __v.__size_;
        -: 2829:        this->__cap() = __v.__cap();
        -: 2830:        __v.__begin_ = nullptr;
        -: 2831:        __v.__cap() = __v.__size_ = 0;
        -: 2832:    }
        -: 2833:    else if (__v.size() > 0)
        -: 2834:    {
        -: 2835:        allocate(__v.size());
        -: 2836:        __construct_at_end(__v.begin(), __v.end());
        -: 2837:    }
        -: 2838:}
        -: 2839:
        -: 2840:template <class _Allocator>
        -: 2841:inline _LIBCPP_INLINE_VISIBILITY
        -: 2842:vector<bool, _Allocator>&
        -: 2843:vector<bool, _Allocator>::operator=(vector&& __v)
        -: 2844:        _NOEXCEPT_(
        -: 2845:             __alloc_traits::propagate_on_container_move_assignment::value &&
        -: 2846:             is_nothrow_move_assignable<allocator_type>::value)
        -: 2847:{
        -: 2848:    __move_assign(__v, integral_constant<bool,
        -: 2849:          __storage_traits::propagate_on_container_move_assignment::value>());
        -: 2850:    return *this;
        -: 2851:}
        -: 2852:
        -: 2853:template <class _Allocator>
        -: 2854:void
        -: 2855:vector<bool, _Allocator>::__move_assign(vector& __c, false_type)
        -: 2856:{
        -: 2857:    if (__alloc() != __c.__alloc())
        -: 2858:        assign(__c.begin(), __c.end());
        -: 2859:    else
        -: 2860:        __move_assign(__c, true_type());
        -: 2861:}
        -: 2862:
        -: 2863:template <class _Allocator>
        -: 2864:void
        -: 2865:vector<bool, _Allocator>::__move_assign(vector& __c, true_type)
        -: 2866:    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 2867:{
        -: 2868:    deallocate();
        -: 2869:    __move_assign_alloc(__c);
        -: 2870:    this->__begin_ = __c.__begin_;
        -: 2871:    this->__size_ = __c.__size_;
        -: 2872:    this->__cap() = __c.__cap();
        -: 2873:    __c.__begin_ = nullptr;
        -: 2874:    __c.__cap() = __c.__size_ = 0;
        -: 2875:}
        -: 2876:
        -: 2877:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2878:
        -: 2879:template <class _Allocator>
        -: 2880:void
        -: 2881:vector<bool, _Allocator>::assign(size_type __n, const value_type& __x)
        -: 2882:{
        -: 2883:    __size_ = 0;
        -: 2884:    if (__n > 0)
        -: 2885:    {
        -: 2886:        size_type __c = capacity();
        -: 2887:        if (__n <= __c)
        -: 2888:            __size_ = __n;
        -: 2889:        else
        -: 2890:        {
        -: 2891:            vector __v(__alloc());
        -: 2892:            __v.reserve(__recommend(__n));
        -: 2893:            __v.__size_ = __n;
        -: 2894:            swap(__v);
        -: 2895:        }
        -: 2896:        _VSTD::fill_n(begin(), __n, __x);
        -: 2897:    }
        -: 2898:}
        -: 2899:
        -: 2900:template <class _Allocator>
        -: 2901:template <class _InputIterator>
        -: 2902:typename enable_if
        -: 2903:<
        -: 2904:    __is_input_iterator<_InputIterator>::value &&
        -: 2905:   !__is_forward_iterator<_InputIterator>::value,
        -: 2906:   void
        -: 2907:>::type
        -: 2908:vector<bool, _Allocator>::assign(_InputIterator __first, _InputIterator __last)
        -: 2909:{
        -: 2910:    clear();
        -: 2911:    for (; __first != __last; ++__first)
        -: 2912:        push_back(*__first);
        -: 2913:}
        -: 2914:
        -: 2915:template <class _Allocator>
        -: 2916:template <class _ForwardIterator>
        -: 2917:typename enable_if
        -: 2918:<
        -: 2919:    __is_forward_iterator<_ForwardIterator>::value,
        -: 2920:   void
        -: 2921:>::type
        -: 2922:vector<bool, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)
        -: 2923:{
        -: 2924:    clear();
        -: 2925:    difference_type __n = _VSTD::distance(__first, __last);
        -: 2926:    if (__n)
        -: 2927:    {
        -: 2928:        if (__n > capacity())
        -: 2929:        {
        -: 2930:            deallocate();
        -: 2931:            allocate(__n);
        -: 2932:        }
        -: 2933:        __construct_at_end(__first, __last);
        -: 2934:    }
        -: 2935:}
        -: 2936:
        -: 2937:template <class _Allocator>
        -: 2938:void
        -: 2939:vector<bool, _Allocator>::reserve(size_type __n)
        -: 2940:{
        -: 2941:    if (__n > capacity())
        -: 2942:    {
        -: 2943:        vector __v(this->__alloc());
        -: 2944:        __v.allocate(__n);
        -: 2945:        __v.__construct_at_end(this->begin(), this->end());
        -: 2946:        swap(__v);
        -: 2947:        __invalidate_all_iterators();
        -: 2948:    }
        -: 2949:}
        -: 2950:
        -: 2951:template <class _Allocator>
        -: 2952:void
        -: 2953:vector<bool, _Allocator>::shrink_to_fit() _NOEXCEPT
        -: 2954:{
        -: 2955:    if (__external_cap_to_internal(size()) > __cap())
        -: 2956:    {
        -: 2957:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2958:        try
        -: 2959:        {
        -: 2960:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2961:            vector(*this, allocator_type(__alloc())).swap(*this);
        -: 2962:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2963:        }
        -: 2964:        catch (...)
        -: 2965:        {
        -: 2966:        }
        -: 2967:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2968:    }
        -: 2969:}
        -: 2970:
        -: 2971:template <class _Allocator>
        -: 2972:typename vector<bool, _Allocator>::reference
        -: 2973:vector<bool, _Allocator>::at(size_type __n)
        -: 2974:{
        -: 2975:    if (__n >= size())
        -: 2976:        this->__throw_out_of_range();
        -: 2977:    return (*this)[__n];
        -: 2978:}
        -: 2979:
        -: 2980:template <class _Allocator>
        -: 2981:typename vector<bool, _Allocator>::const_reference
        -: 2982:vector<bool, _Allocator>::at(size_type __n) const
        -: 2983:{
        -: 2984:    if (__n >= size())
        -: 2985:        this->__throw_out_of_range();
        -: 2986:    return (*this)[__n];
        -: 2987:}
        -: 2988:
        -: 2989:template <class _Allocator>
        -: 2990:void
        -: 2991:vector<bool, _Allocator>::push_back(const value_type& __x)
        -: 2992:{
        -: 2993:    if (this->__size_ == this->capacity())
        -: 2994:        reserve(__recommend(this->__size_ + 1));
        -: 2995:    ++this->__size_;
        -: 2996:    back() = __x;
        -: 2997:}
        -: 2998:
        -: 2999:template <class _Allocator>
        -: 3000:typename vector<bool, _Allocator>::iterator
        -: 3001:vector<bool, _Allocator>::insert(const_iterator __position, const value_type& __x)
        -: 3002:{
        -: 3003:    iterator __r;
        -: 3004:    if (size() < capacity())
        -: 3005:    {
        -: 3006:        const_iterator __old_end = end();
        -: 3007:        ++__size_;
        -: 3008:        _VSTD::copy_backward(__position, __old_end, end());
        -: 3009:        __r = __const_iterator_cast(__position);
        -: 3010:    }
        -: 3011:    else
        -: 3012:    {
        -: 3013:        vector __v(__alloc());
        -: 3014:        __v.reserve(__recommend(__size_ + 1));
        -: 3015:        __v.__size_ = __size_ + 1;
        -: 3016:        __r = _VSTD::copy(cbegin(), __position, __v.begin());
        -: 3017:        _VSTD::copy_backward(__position, cend(), __v.end());
        -: 3018:        swap(__v);
        -: 3019:    }
        -: 3020:    *__r = __x;
        -: 3021:    return __r;
        -: 3022:}
        -: 3023:
        -: 3024:template <class _Allocator>
        -: 3025:typename vector<bool, _Allocator>::iterator
        -: 3026:vector<bool, _Allocator>::insert(const_iterator __position, size_type __n, const value_type& __x)
        -: 3027:{
        -: 3028:    iterator __r;
        -: 3029:    size_type __c = capacity();
        -: 3030:    if (__n <= __c && size() <= __c - __n)
        -: 3031:    {
        -: 3032:        const_iterator __old_end = end();
        -: 3033:        __size_ += __n;
        -: 3034:        _VSTD::copy_backward(__position, __old_end, end());
        -: 3035:        __r = __const_iterator_cast(__position);
        -: 3036:    }
        -: 3037:    else
        -: 3038:    {
        -: 3039:        vector __v(__alloc());
        -: 3040:        __v.reserve(__recommend(__size_ + __n));
        -: 3041:        __v.__size_ = __size_ + __n;
        -: 3042:        __r = _VSTD::copy(cbegin(), __position, __v.begin());
        -: 3043:        _VSTD::copy_backward(__position, cend(), __v.end());
        -: 3044:        swap(__v);
        -: 3045:    }
        -: 3046:    _VSTD::fill_n(__r, __n, __x);
        -: 3047:    return __r;
        -: 3048:}
        -: 3049:
        -: 3050:template <class _Allocator>
        -: 3051:template <class _InputIterator>
        -: 3052:typename enable_if
        -: 3053:<
        -: 3054:     __is_input_iterator  <_InputIterator>::value &&
        -: 3055:    !__is_forward_iterator<_InputIterator>::value,
        -: 3056:    typename vector<bool, _Allocator>::iterator
        -: 3057:>::type
        -: 3058:vector<bool, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)
        -: 3059:{
        -: 3060:    difference_type __off = __position - begin();
        -: 3061:    iterator __p = __const_iterator_cast(__position);
        -: 3062:    iterator __old_end = end();
        -: 3063:    for (; size() != capacity() && __first != __last; ++__first)
        -: 3064:    {
        -: 3065:        ++this->__size_;
        -: 3066:        back() = *__first;
        -: 3067:    }
        -: 3068:    vector __v(__alloc());
        -: 3069:    if (__first != __last)
        -: 3070:    {
        -: 3071:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3072:        try
        -: 3073:        {
        -: 3074:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3075:            __v.assign(__first, __last);
        -: 3076:            difference_type __old_size = static_cast<difference_type>(__old_end - begin());
        -: 3077:            difference_type __old_p = __p - begin();
        -: 3078:            reserve(__recommend(size() + __v.size()));
        -: 3079:            __p = begin() + __old_p;
        -: 3080:            __old_end = begin() + __old_size;
        -: 3081:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3082:        }
        -: 3083:        catch (...)
        -: 3084:        {
        -: 3085:            erase(__old_end, end());
        -: 3086:            throw;
        -: 3087:        }
        -: 3088:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3089:    }
        -: 3090:    __p = _VSTD::rotate(__p, __old_end, end());
        -: 3091:    insert(__p, __v.begin(), __v.end());
        -: 3092:    return begin() + __off;
        -: 3093:}
        -: 3094:
        -: 3095:template <class _Allocator>
        -: 3096:template <class _ForwardIterator>
        -: 3097:typename enable_if
        -: 3098:<
        -: 3099:    __is_forward_iterator<_ForwardIterator>::value,
        -: 3100:    typename vector<bool, _Allocator>::iterator
        -: 3101:>::type
        -: 3102:vector<bool, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)
        -: 3103:{
        -: 3104:    difference_type __n = _VSTD::distance(__first, __last);
        -: 3105:    iterator __r;
        -: 3106:    size_type __c = capacity();
        -: 3107:    if (__n <= __c && size() <= __c - __n)
        -: 3108:    {
        -: 3109:        const_iterator __old_end = end();
        -: 3110:        __size_ += __n;
        -: 3111:        _VSTD::copy_backward(__position, __old_end, end());
        -: 3112:        __r = __const_iterator_cast(__position);
        -: 3113:    }
        -: 3114:    else
        -: 3115:    {
        -: 3116:        vector __v(__alloc());
        -: 3117:        __v.reserve(__recommend(__size_ + __n));
        -: 3118:        __v.__size_ = __size_ + __n;
        -: 3119:        __r = _VSTD::copy(cbegin(), __position, __v.begin());
        -: 3120:        _VSTD::copy_backward(__position, cend(), __v.end());
        -: 3121:        swap(__v);
        -: 3122:    }
        -: 3123:    _VSTD::copy(__first, __last, __r);
        -: 3124:    return __r;
        -: 3125:}
        -: 3126:
        -: 3127:template <class _Allocator>
        -: 3128:inline _LIBCPP_INLINE_VISIBILITY
        -: 3129:typename vector<bool, _Allocator>::iterator
        -: 3130:vector<bool, _Allocator>::erase(const_iterator __position)
        -: 3131:{
        -: 3132:    iterator __r = __const_iterator_cast(__position);
        -: 3133:    _VSTD::copy(__position + 1, this->cend(), __r);
        -: 3134:    --__size_;
        -: 3135:    return __r;
        -: 3136:}
        -: 3137:
        -: 3138:template <class _Allocator>
        -: 3139:typename vector<bool, _Allocator>::iterator
        -: 3140:vector<bool, _Allocator>::erase(const_iterator __first, const_iterator __last)
        -: 3141:{
        -: 3142:    iterator __r = __const_iterator_cast(__first);
        -: 3143:    difference_type __d = __last - __first;
        -: 3144:    _VSTD::copy(__last, this->cend(), __r);
        -: 3145:    __size_ -= __d;
        -: 3146:    return __r;
        -: 3147:}
        -: 3148:
        -: 3149:template <class _Allocator>
        -: 3150:void
        -: 3151:vector<bool, _Allocator>::swap(vector& __x)
        -: 3152:#if _LIBCPP_STD_VER >= 14
        -: 3153:    _NOEXCEPT
        -: 3154:#else
        -: 3155:    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value || 
        -: 3156:                __is_nothrow_swappable<allocator_type>::value)
        -: 3157:#endif
        -: 3158:{
        -: 3159:    _VSTD::swap(this->__begin_, __x.__begin_);
        -: 3160:    _VSTD::swap(this->__size_, __x.__size_);
        -: 3161:    _VSTD::swap(this->__cap(), __x.__cap());
        -: 3162:    __swap_allocator(this->__alloc(), __x.__alloc(), 
        -: 3163:        integral_constant<bool, __alloc_traits::propagate_on_container_swap::value>());
        -: 3164:}
        -: 3165:
        -: 3166:template <class _Allocator>
        -: 3167:void
        -: 3168:vector<bool, _Allocator>::resize(size_type __sz, value_type __x)
        -: 3169:{
        -: 3170:    size_type __cs = size();
        -: 3171:    if (__cs < __sz)
        -: 3172:    {
        -: 3173:        iterator __r;
        -: 3174:        size_type __c = capacity();
        -: 3175:        size_type __n = __sz - __cs;
        -: 3176:        if (__n <= __c && __cs <= __c - __n)
        -: 3177:        {
        -: 3178:            __r = end();
        -: 3179:            __size_ += __n;
        -: 3180:        }
        -: 3181:        else
        -: 3182:        {
        -: 3183:            vector __v(__alloc());
        -: 3184:            __v.reserve(__recommend(__size_ + __n));
        -: 3185:            __v.__size_ = __size_ + __n;
        -: 3186:            __r = _VSTD::copy(cbegin(), cend(), __v.begin());
        -: 3187:            swap(__v);
        -: 3188:        }
        -: 3189:        _VSTD::fill_n(__r, __n, __x);
        -: 3190:    }
        -: 3191:    else
        -: 3192:        __size_ = __sz;
        -: 3193:}
        -: 3194:
        -: 3195:template <class _Allocator>
        -: 3196:void
        -: 3197:vector<bool, _Allocator>::flip() _NOEXCEPT
        -: 3198:{
        -: 3199:    // do middle whole words
        -: 3200:    size_type __n = __size_;
        -: 3201:    __storage_pointer __p = __begin_;
        -: 3202:    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
        -: 3203:        *__p = ~*__p;
        -: 3204:    // do last partial word
        -: 3205:    if (__n > 0)
        -: 3206:    {
        -: 3207:        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
        -: 3208:        __storage_type __b = *__p & __m;
        -: 3209:        *__p &= ~__m;
        -: 3210:        *__p |= ~__b & __m;
        -: 3211:    }
        -: 3212:}
        -: 3213:
        -: 3214:template <class _Allocator>
        -: 3215:bool
        -: 3216:vector<bool, _Allocator>::__invariants() const
        -: 3217:{
        -: 3218:    if (this->__begin_ == nullptr)
        -: 3219:    {
        -: 3220:        if (this->__size_ != 0 || this->__cap() != 0)
        -: 3221:            return false;
        -: 3222:    }
        -: 3223:    else
        -: 3224:    {
        -: 3225:        if (this->__cap() == 0)
        -: 3226:            return false;
        -: 3227:        if (this->__size_ > this->capacity())
        -: 3228:            return false;
        -: 3229:    }
        -: 3230:    return true;
        -: 3231:}
        -: 3232:
        -: 3233:template <class _Allocator>
        -: 3234:size_t
        -: 3235:vector<bool, _Allocator>::__hash_code() const _NOEXCEPT
        -: 3236:{
        -: 3237:    size_t __h = 0;
        -: 3238:    // do middle whole words
        -: 3239:    size_type __n = __size_;
        -: 3240:    __storage_pointer __p = __begin_;
        -: 3241:    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
        -: 3242:        __h ^= *__p;
        -: 3243:    // do last partial word
        -: 3244:    if (__n > 0)
        -: 3245:    {
        -: 3246:        const __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
        -: 3247:        __h ^= *__p & __m;
        -: 3248:    }
        -: 3249:    return __h;
        -: 3250:}
        -: 3251:
        -: 3252:template <class _Allocator>
        -: 3253:struct _LIBCPP_TYPE_VIS_ONLY hash<vector<bool, _Allocator> >
        -: 3254:    : public unary_function<vector<bool, _Allocator>, size_t>
        -: 3255:{
        -: 3256:    _LIBCPP_INLINE_VISIBILITY
        -: 3257:    size_t operator()(const vector<bool, _Allocator>& __vec) const _NOEXCEPT
        -: 3258:        {return __vec.__hash_code();}
        -: 3259:};
        -: 3260:
        -: 3261:template <class _Tp, class _Allocator>
        -: 3262:inline _LIBCPP_INLINE_VISIBILITY
        -: 3263:bool
        -: 3264:operator==(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3265:{
        -: 3266:    const typename vector<_Tp, _Allocator>::size_type __sz = __x.size();
        -: 3267:    return __sz == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());
        -: 3268:}
        -: 3269:
        -: 3270:template <class _Tp, class _Allocator>
        -: 3271:inline _LIBCPP_INLINE_VISIBILITY
        -: 3272:bool
        -: 3273:operator!=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3274:{
        -: 3275:    return !(__x == __y);
        -: 3276:}
        -: 3277:
        -: 3278:template <class _Tp, class _Allocator>
        -: 3279:inline _LIBCPP_INLINE_VISIBILITY
        -: 3280:bool
        -: 3281:operator< (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3282:{
        -: 3283:    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
        -: 3284:}
        -: 3285:
        -: 3286:template <class _Tp, class _Allocator>
        -: 3287:inline _LIBCPP_INLINE_VISIBILITY
        -: 3288:bool
        -: 3289:operator> (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3290:{
        -: 3291:    return __y < __x;
        -: 3292:}
        -: 3293:
        -: 3294:template <class _Tp, class _Allocator>
        -: 3295:inline _LIBCPP_INLINE_VISIBILITY
        -: 3296:bool
        -: 3297:operator>=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3298:{
        -: 3299:    return !(__x < __y);
        -: 3300:}
        -: 3301:
        -: 3302:template <class _Tp, class _Allocator>
        -: 3303:inline _LIBCPP_INLINE_VISIBILITY
        -: 3304:bool
        -: 3305:operator<=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3306:{
        -: 3307:    return !(__y < __x);
        -: 3308:}
        -: 3309:
        -: 3310:template <class _Tp, class _Allocator>
        -: 3311:inline _LIBCPP_INLINE_VISIBILITY
        -: 3312:void
        -: 3313:swap(vector<_Tp, _Allocator>& __x, vector<_Tp, _Allocator>& __y)
        -: 3314:    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))
        -: 3315:{
        -: 3316:    __x.swap(__y);
        -: 3317:}
        -: 3318:
        -: 3319:_LIBCPP_END_NAMESPACE_STD
        -: 3320:
        -: 3321:#endif  // _LIBCPP_VECTOR
