        -:    0:Source:/Users/wjp/Desktop/workspace/libasync/libasync/tests/ChaseLevDequeTOT.cc
        -:    0:Graph:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/ChaseLevDequeTOT.cc.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "gtest/gtest.h"
        -:    2:#include "ChaseLevDeque.h"
        -:    3:#include <thread>
        -:    4:#include <set>
        -:    5:#include <mutex>
        -:    6:#include "Utils.h"
        -:    7:
        -:    8:using namespace wjp;
        -:    9:
    #####:   10:struct A{
    #####:   11:	A(const std::string& str):x(str){}
        -:   12:	std::string x;
        -:   13:};
        -:   14:
        -:   15:class ChaseLevDequeTOT : public ::testing::Test {
        -:   16:protected:
    #####:   17:	ChaseLevDequeTOT() {}
    #####:   18:	virtual ~ChaseLevDequeTOT() {}
        -:   19:	virtual void SetUp() {
    #####:   20:		q=new ChaseLevDeque<A>(3);
    #####:   21:		count=0;
    #####:   22:	}
        -:   23:	virtual void TearDown() {
    #####:   24:		delete q;
    #####:   25:	}
        -:   26:	ChaseLevDeque<A>* 		q;
        -:   27:	std::atomic<int> 		count;  // how many are stolen
        -:   28:};
        -:   29:
    #####:   30:TEST_F(ChaseLevDequeTOT, SingleThreadSituationA) {
    #####:   31:	auto t1=std::make_shared<A>("1");
    #####:   32:	auto t2=std::make_shared<A>("2");
    #####:   33:	auto t3=std::make_shared<A>("3");
    #####:   34:	auto t4=std::make_shared<A>("4");
    #####:   35:	auto t5=std::make_shared<A>("5");
    #####:   36:	auto t6=std::make_shared<A>("6");
    #####:   37:	auto t7=std::make_shared<A>("7");
    #####:   38:	auto t8=std::make_shared<A>("8");
    #####:   39:	auto t9=std::make_shared<A>("9");
    #####:   40:	auto t10=std::make_shared<A>("10");
    #####:   41:	auto t11=std::make_shared<A>("11");
    #####:   42:	auto t12=std::make_shared<A>("12");
    #####:   43:	q->push(t1);
    #####:   44:	q->push(t2);
    #####:   45:	q->push(t3);
    #####:   46:	q->push(t4);
    #####:   47:	q->push(t5);
    #####:   48:	q->push(t6);
    #####:   49:	q->push(t7);
    #####:   50:	q->push(t8);
    #####:   51:	q->push(t9);
    #####:   52:	q->push(t10);
    #####:   53:	q->push(t11);
    #####:   54:	q->push(t12);
    #####:   55:	auto x=q->take();
    #####:   56:	EXPECT_EQ(x->x, "12");
    #####:   57:	x=q->take();
    #####:   58:	EXPECT_EQ(x->x, "11");
    #####:   59:	x=q->steal();
    #####:   60:	EXPECT_EQ(x->x, "1");
    #####:   61:	x=q->take();
    #####:   62:	EXPECT_EQ(x->x, "10");
    #####:   63:	x=q->take();
    #####:   64:	EXPECT_EQ(x->x, "9");
    #####:   65:	x=q->steal();
    #####:   66:	EXPECT_EQ(x->x, "2");
    #####:   67:	x=q->steal();
    #####:   68:	EXPECT_EQ(x->x, "3");
    #####:   69:	x=q->steal();
    #####:   70:	EXPECT_EQ(x->x, "4");
    #####:   71:	x=q->steal();
    #####:   72:	EXPECT_EQ(x->x, "5");
    #####:   73:	x=q->steal();
    #####:   74:	EXPECT_EQ(x->x, "6");
    #####:   75:	x=q->take();
    #####:   76:	EXPECT_EQ(x->x, "8");
    #####:   77:	x=q->steal();
    #####:   78:	EXPECT_EQ(x->x, "7");
    #####:   79:	x=q->steal();
    #####:   80:	EXPECT_EQ(x, nullptr);
    #####:   81:	x=q->take();
    #####:   82:	EXPECT_EQ(x, nullptr);
    #####:   83:}
        -:   84:
    #####:   85:TEST_F(ChaseLevDequeTOT, SingleThreadSituationInt) {
    #####:   86:	auto qq=new ChaseLevDeque<int>(2);
    #####:   87:	auto t1=std::make_shared<int>(1);
    #####:   88:	auto t2=std::make_shared<int>(2);
    #####:   89:	auto t3=std::make_shared<int>(3);
    #####:   90:	auto t4=std::make_shared<int>(4);
    #####:   91:	qq->push(t1);
    #####:   92:	auto x=qq->take();
    #####:   93:	EXPECT_EQ(*x, 1);
    #####:   94:	qq->push(t1);
    #####:   95:	qq->push(t2);
    #####:   96:	qq->push(t3);
    #####:   97:	qq->push(t4);
    #####:   98:	x=qq->steal();
    #####:   99:	EXPECT_EQ(*x, 1);
    #####:  100:	x=qq->steal();
    #####:  101:	EXPECT_EQ(*x, 2);
    #####:  102:	x=qq->steal();
    #####:  103:	EXPECT_EQ(*x, 3);
    #####:  104:	x=qq->steal();
    #####:  105:	EXPECT_EQ(*x, 4);
    #####:  106:}
        -:  107:
    #####:  108:TEST_F(ChaseLevDequeTOT, StealerRace) {
    #####:  109:	for(int i=1;i<=100;i++){
    #####:  110:		q->push(std::make_shared<A>(std::to_string(i)));
    #####:  111:	}	
    #####:  112:	std::vector<std::future<std::string>> tasks;
    #####:  113:	for(int i=0;i<10;i++){
    #####:  114:		tasks.emplace_back(std::async(std::launch::async, [this, i]{
    #####:  115:			int value=0;
    #####:  116:			std::string res="thread"+std::to_string(i)+": ";
    #####:  117:			for(int k=0;k<100;k++){
    #####:  118:				auto x=q->steal();
    #####:  119:				if(x==nullptr){
    #####:  120:					sleep(randint<1000,3000>());
    #####:  121:					continue;
        -:  122:				}
    #####:  123:				sleep(randint<3000,4000>());
    #####:  124:				count++;
    #####:  125:				int tmp=std::stoi(x->x);
    #####:  126:				res+=x->x+",";
    #####:  127:				EXPECT_TRUE(tmp>value && tmp<=100 &&tmp>0);
    #####:  128:			}
    #####:  129:			return res;
    #####:  130:		}));
    #####:  131:	}
    #####:  132:	for(int i=0;i<tasks.size();i++)
        -:  133:    {
    #####:  134:        std::cout<<tasks[i].get()<<std::endl;
    #####:  135:    }
        -:  136:
    #####:  137:	EXPECT_EQ(count, 100);
    #####:  138:}
        -:  139:
