        -:    0:Source:/Users/wjp/Desktop/workspace/libasync/libasync/tests/ChaseLevDequeTOT.cc
        -:    0:Graph:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/ChaseLevDequeTOT.cc.gcno
        -:    0:Data:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/ChaseLevDequeTOT.cc.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "gtest/gtest.h"
        -:    2:#include "ChaseLevDeque.h"
        -:    3:#include <thread>
        -:    4:#include <set>
        -:    5:#include <mutex>
        -:    6:#include "Utils.h"
        -:    7:
        -:    8:using namespace wjp;
        -:    9:
    #####:   10:struct A{
      448:   11:	A(const std::string& str):x(str){}
        -:   12:	std::string x;
        -:   13:};
        -:   14:
        -:   15:class ChaseLevDequeTOT : public ::testing::Test {
        -:   16:protected:
        6:   17:	ChaseLevDequeTOT() {}
        6:   18:	virtual ~ChaseLevDequeTOT() {}
        -:   19:	virtual void SetUp() {
       12:   20:		q=new ChaseLevDeque<A>(3);
        6:   21:		count=0;
        6:   22:	}
        -:   23:	virtual void TearDown() {
       12:   24:		delete q;
        6:   25:	}
        -:   26:	ChaseLevDeque<A>* 		q;
        -:   27:	std::atomic<int> 		count;  // how many are stolen
        -:   28:};
        -:   29:
       24:   30:TEST_F(ChaseLevDequeTOT, SingleThreadSituationA) {
        2:   31:	auto t1=std::make_shared<A>("1");
        2:   32:	auto t2=std::make_shared<A>("2");
        2:   33:	auto t3=std::make_shared<A>("3");
        2:   34:	auto t4=std::make_shared<A>("4");
        2:   35:	auto t5=std::make_shared<A>("5");
        2:   36:	auto t6=std::make_shared<A>("6");
        2:   37:	auto t7=std::make_shared<A>("7");
        2:   38:	auto t8=std::make_shared<A>("8");
        2:   39:	auto t9=std::make_shared<A>("9");
        2:   40:	auto t10=std::make_shared<A>("10");
        2:   41:	auto t11=std::make_shared<A>("11");
        2:   42:	auto t12=std::make_shared<A>("12");
        4:   43:	q->push(t1);
        4:   44:	q->push(t2);
        4:   45:	q->push(t3);
        4:   46:	q->push(t4);
        4:   47:	q->push(t5);
        4:   48:	q->push(t6);
        4:   49:	q->push(t7);
        4:   50:	q->push(t8);
        4:   51:	q->push(t9);
        4:   52:	q->push(t10);
        4:   53:	q->push(t11);
        4:   54:	q->push(t12);
        2:   55:	auto x=q->take();
       10:   56:	EXPECT_EQ(x->x, "12");
        4:   57:	x=q->take();
       10:   58:	EXPECT_EQ(x->x, "11");
        4:   59:	x=q->steal();
       10:   60:	EXPECT_EQ(x->x, "1");
        4:   61:	x=q->take();
       10:   62:	EXPECT_EQ(x->x, "10");
        4:   63:	x=q->take();
       10:   64:	EXPECT_EQ(x->x, "9");
        4:   65:	x=q->steal();
       10:   66:	EXPECT_EQ(x->x, "2");
        4:   67:	x=q->steal();
       10:   68:	EXPECT_EQ(x->x, "3");
        4:   69:	x=q->steal();
       10:   70:	EXPECT_EQ(x->x, "4");
        4:   71:	x=q->steal();
       10:   72:	EXPECT_EQ(x->x, "5");
        4:   73:	x=q->steal();
       10:   74:	EXPECT_EQ(x->x, "6");
        4:   75:	x=q->take();
       10:   76:	EXPECT_EQ(x->x, "8");
        4:   77:	x=q->steal();
       10:   78:	EXPECT_EQ(x->x, "7");
        4:   79:	x=q->steal();
       10:   80:	EXPECT_EQ(x, nullptr);
        4:   81:	x=q->take();
       10:   82:	EXPECT_EQ(x, nullptr);
        2:   83:}
        -:   84:
       24:   85:TEST_F(ChaseLevDequeTOT, SingleThreadSituationInt) {
        4:   86:	auto qq=new ChaseLevDeque<int>(2);
        2:   87:	auto t1=std::make_shared<int>(1);
        2:   88:	auto t2=std::make_shared<int>(2);
        2:   89:	auto t3=std::make_shared<int>(3);
        2:   90:	auto t4=std::make_shared<int>(4);
        4:   91:	qq->push(t1);
        2:   92:	auto x=qq->take();
       10:   93:	EXPECT_EQ(*x, 1);
        4:   94:	qq->push(t1);
        4:   95:	qq->push(t2);
        4:   96:	qq->push(t3);
        4:   97:	qq->push(t4);
        4:   98:	x=qq->steal();
       10:   99:	EXPECT_EQ(*x, 1);
        4:  100:	x=qq->steal();
       10:  101:	EXPECT_EQ(*x, 2);
        4:  102:	x=qq->steal();
       10:  103:	EXPECT_EQ(*x, 3);
        4:  104:	x=qq->steal();
       10:  105:	EXPECT_EQ(*x, 4);
        2:  106:}
        -:  107:
       24:  108:TEST_F(ChaseLevDequeTOT, StealerRace) {
      404:  109:	for(int i=1;i<=100;i++){
      600:  110:		q->push(std::make_shared<A>(std::to_string(i)));
      200:  111:	}	
        2:  112:	std::vector<std::future<std::string>> tasks;
       44:  113:	for(int i=0;i<10;i++){
       60:  114:		tasks.emplace_back(std::async(std::launch::async, [this, i]{
       19:  115:			int value=0;
       59:  116:			std::string res="thread"+std::to_string(i)+": ";
     3371:  117:			for(int k=0;k<100;k++){
     1578:  118:				auto x=q->steal();
     1934:  119:				if(x==nullptr){
     2778:  120:					sleep(randint<1000,3000>());
     1458:  121:					continue;
        -:  122:				}
      304:  123:				sleep(randint<3000,4000>());
      161:  124:				count++;
      302:  125:				int tmp=std::stoi(x->x);
      505:  126:				res+=x->x+",";
     1531:  127:				EXPECT_TRUE(tmp>value && tmp<=100 &&tmp>0);
     2196:  128:			}
       20:  129:			return res;
       40:  130:		}));
       20:  131:	}
       44:  132:	for(int i=0;i<tasks.size();i++)
        -:  133:    {
      100:  134:        std::cout<<tasks[i].get()<<std::endl;
       20:  135:    }
        -:  136:
       10:  137:	EXPECT_EQ(count, 100);
        2:  138:}
        -:  139:
