        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/utility
        -:    0:Graph:/Users/wjp/Desktop/workspace/libasync/libasync/build/tests/CMakeFiles/tests.dir/ChaseLevDequeTOT.cc.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- utility -----------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is dual licensed under the MIT and the University of Illinois Open
        -:    7:// Source Licenses. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_UTILITY
        -:   12:#define _LIBCPP_UTILITY
        -:   13:
        -:   14:/*
        -:   15:    utility synopsis
        -:   16:
        -:   17:namespace std
        -:   18:{
        -:   19:
        -:   20:template <class T>
        -:   21:    void
        -:   22:    swap(T& a, T& b);
        -:   23:
        -:   24:namespace rel_ops
        -:   25:{
        -:   26:    template<class T> bool operator!=(const T&, const T&);
        -:   27:    template<class T> bool operator> (const T&, const T&);
        -:   28:    template<class T> bool operator<=(const T&, const T&);
        -:   29:    template<class T> bool operator>=(const T&, const T&);
        -:   30:}
        -:   31:
        -:   32:template<class T>
        -:   33:void
        -:   34:swap(T& a, T& b) noexcept(is_nothrow_move_constructible<T>::value &&
        -:   35:                          is_nothrow_move_assignable<T>::value);
        -:   36:
        -:   37:template <class T, size_t N>
        -:   38:void
        -:   39:swap(T (&a)[N], T (&b)[N]) noexcept(noexcept(swap(*a, *b)));
        -:   40:
        -:   41:template <class T> T&& forward(typename remove_reference<T>::type& t) noexcept;  // constexpr in C++14
        -:   42:template <class T> T&& forward(typename remove_reference<T>::type&& t) noexcept; // constexpr in C++14
        -:   43:
        -:   44:template <class T> typename remove_reference<T>::type&& move(T&&) noexcept;      // constexpr in C++14
        -:   45:
        -:   46:template <class T>
        -:   47:    typename conditional
        -:   48:    <
        -:   49:        !is_nothrow_move_constructible<T>::value && is_copy_constructible<T>::value,
        -:   50:        const T&,
        -:   51:        T&&
        -:   52:    >::type
        -:   53:    move_if_noexcept(T& x) noexcept; // constexpr in C++14
        -:   54:
        -:   55:template <class T> typename add_rvalue_reference<T>::type declval() noexcept;
        -:   56:
        -:   57:template <class T1, class T2>
        -:   58:struct pair
        -:   59:{
        -:   60:    typedef T1 first_type;
        -:   61:    typedef T2 second_type;
        -:   62:
        -:   63:    T1 first;
        -:   64:    T2 second;
        -:   65:
        -:   66:    pair(const pair&) = default;
        -:   67:    pair(pair&&) = default;
        -:   68:    constexpr pair();
        -:   69:    pair(const T1& x, const T2& y);                          // constexpr in C++14
        -:   70:    template <class U, class V> pair(U&& x, V&& y);          // constexpr in C++14
        -:   71:    template <class U, class V> pair(const pair<U, V>& p);   // constexpr in C++14
        -:   72:    template <class U, class V> pair(pair<U, V>&& p);        // constexpr in C++14
        -:   73:    template <class... Args1, class... Args2>
        -:   74:        pair(piecewise_construct_t, tuple<Args1...> first_args,
        -:   75:             tuple<Args2...> second_args);
        -:   76:
        -:   77:    template <class U, class V> pair& operator=(const pair<U, V>& p);
        -:   78:    pair& operator=(pair&& p) noexcept(is_nothrow_move_assignable<T1>::value &&
        -:   79:                                       is_nothrow_move_assignable<T2>::value);
        -:   80:    template <class U, class V> pair& operator=(pair<U, V>&& p);
        -:   81:
        -:   82:    void swap(pair& p) noexcept(noexcept(swap(first, p.first)) &&
        -:   83:                                noexcept(swap(second, p.second)));
        -:   84:};
        -:   85:
        -:   86:template <class T1, class T2> bool operator==(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   87:template <class T1, class T2> bool operator!=(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   88:template <class T1, class T2> bool operator< (const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   89:template <class T1, class T2> bool operator> (const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   90:template <class T1, class T2> bool operator>=(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   91:template <class T1, class T2> bool operator<=(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   92:
        -:   93:template <class T1, class T2> pair<V1, V2> make_pair(T1&&, T2&&);   // constexpr in C++14
        -:   94:template <class T1, class T2>
        -:   95:void
        -:   96:swap(pair<T1, T2>& x, pair<T1, T2>& y) noexcept(noexcept(x.swap(y)));
        -:   97:
        -:   98:struct piecewise_construct_t { };
        -:   99:constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
        -:  100:
        -:  101:template <class T> class tuple_size;
        -:  102:template <size_t I, class T> class tuple_element;
        -:  103:
        -:  104:template <class T1, class T2> struct tuple_size<pair<T1, T2> >;
        -:  105:template <class T1, class T2> struct tuple_element<0, pair<T1, T2> >;
        -:  106:template <class T1, class T2> struct tuple_element<1, pair<T1, T2> >;
        -:  107:
        -:  108:template<size_t I, class T1, class T2>
        -:  109:    typename tuple_element<I, pair<T1, T2> >::type&
        -:  110:    get(pair<T1, T2>&) noexcept; // constexpr in C++14
        -:  111:
        -:  112:template<size_t I, class T1, class T2>
        -:  113:    const typename const tuple_element<I, pair<T1, T2> >::type&
        -:  114:    get(const pair<T1, T2>&) noexcept; // constexpr in C++14
        -:  115:
        -:  116:template<size_t I, class T1, class T2>
        -:  117:    typename tuple_element<I, pair<T1, T2> >::type&&
        -:  118:    get(pair<T1, T2>&&) noexcept; // constexpr in C++14
        -:  119:
        -:  120:template<class T1, class T2>
        -:  121:    constexpr T1& get(pair<T1, T2>&) noexcept; // C++14
        -:  122:
        -:  123:template<size_t I, class T1, class T2>
        -:  124:    constexpr T1 const& get(pair<T1, T2> const &) noexcept; // C++14
        -:  125:
        -:  126:template<size_t I, class T1, class T2>
        -:  127:    constexpr T1&& get(pair<T1, T2>&&) noexcept; // C++14
        -:  128:
        -:  129:// C++14
        -:  130:
        -:  131:template<class T, T... I>
        -:  132:struct integer_sequence
        -:  133:{
        -:  134:    typedef T value_type;
        -:  135:
        -:  136:    static constexpr size_t size() noexcept;
        -:  137:};
        -:  138:
        -:  139:template<size_t... I>
        -:  140:  using index_sequence = integer_sequence<size_t, I...>;
        -:  141:
        -:  142:template<class T, T N>
        -:  143:  using make_integer_sequence = integer_sequence<T, 0, 1, ..., N-1>;
        -:  144:template<size_t N>
        -:  145:  using make_index_sequence = make_integer_sequence<size_t, N>;
        -:  146:
        -:  147:template<class... T>
        -:  148:  using index_sequence_for = make_index_sequence<sizeof...(T)>;
        -:  149:
        -:  150:template<class T, class U=T> 
        -:  151:    T exchange(T& obj, U&& new_value);
        -:  152:}  // std
        -:  153:
        -:  154:*/
        -:  155:
        -:  156:#include <__config>
        -:  157:#include <__tuple>
        -:  158:#include <type_traits>
        -:  159:
        -:  160:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  161:#pragma GCC system_header
        -:  162:#endif
        -:  163:
        -:  164:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  165:
        -:  166:namespace rel_ops
        -:  167:{
        -:  168:
        -:  169:template<class _Tp>
        -:  170:inline _LIBCPP_INLINE_VISIBILITY
        -:  171:bool
        -:  172:operator!=(const _Tp& __x, const _Tp& __y)
        -:  173:{
        -:  174:    return !(__x == __y);
        -:  175:}
        -:  176:
        -:  177:template<class _Tp>
        -:  178:inline _LIBCPP_INLINE_VISIBILITY
        -:  179:bool
        -:  180:operator> (const _Tp& __x, const _Tp& __y)
        -:  181:{
        -:  182:    return __y < __x;
        -:  183:}
        -:  184:
        -:  185:template<class _Tp>
        -:  186:inline _LIBCPP_INLINE_VISIBILITY
        -:  187:bool
        -:  188:operator<=(const _Tp& __x, const _Tp& __y)
        -:  189:{
        -:  190:    return !(__y < __x);
        -:  191:}
        -:  192:
        -:  193:template<class _Tp>
        -:  194:inline _LIBCPP_INLINE_VISIBILITY
        -:  195:bool
        -:  196:operator>=(const _Tp& __x, const _Tp& __y)
        -:  197:{
        -:  198:    return !(__x < __y);
        -:  199:}
        -:  200:
        -:  201:}  // rel_ops
        -:  202:
        -:  203:// swap_ranges
        -:  204:
        -:  205:// forward
        -:  206:template<class _Tp, size_t _Np>
        -:  207:inline _LIBCPP_INLINE_VISIBILITY
        -:  208:void swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::value);
        -:  209:
        -:  210:template <class _ForwardIterator1, class _ForwardIterator2>
        -:  211:inline _LIBCPP_INLINE_VISIBILITY
        -:  212:_ForwardIterator2
        -:  213:swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
        -:  214:{
        -:  215:    for(; __first1 != __last1; ++__first1, (void) ++__first2)
        -:  216:        swap(*__first1, *__first2);
        -:  217:    return __first2;
        -:  218:}
        -:  219:
        -:  220:template<class _Tp, size_t _Np>
        -:  221:inline _LIBCPP_INLINE_VISIBILITY
        -:  222:void
        -:  223:swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::value)
        -:  224:{
        -:  225:    _VSTD::swap_ranges(__a, __a + _Np, __b);
        -:  226:}
        -:  227:
        -:  228:template <class _Tp>
        -:  229:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  230:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  231:typename conditional
        -:  232:<
        -:  233:    !is_nothrow_move_constructible<_Tp>::value && is_copy_constructible<_Tp>::value,
        -:  234:    const _Tp&,
        -:  235:    _Tp&&
        -:  236:>::type
        -:  237:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  238:const _Tp&
        -:  239:#endif
        -:  240:move_if_noexcept(_Tp& __x) _NOEXCEPT
        -:  241:{
    #####:  242:    return _VSTD::move(__x);
        -:  243:}
        -:  244:
        -:  245:struct _LIBCPP_TYPE_VIS_ONLY piecewise_construct_t { };
        -:  246:#if defined(_LIBCPP_HAS_NO_CONSTEXPR) || defined(_LIBCPP_BUILDING_UTILITY)
        -:  247:extern const piecewise_construct_t piecewise_construct;// = piecewise_construct_t();
        -:  248:#else
        -:  249:constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
        -:  250:#endif
        -:  251:
        -:  252:template <class _T1, class _T2>
        -:  253:struct _LIBCPP_TYPE_VIS_ONLY pair
        -:  254:{
        -:  255:    typedef _T1 first_type;
        -:  256:    typedef _T2 second_type;
        -:  257:
        -:  258:    _T1 first;
        -:  259:    _T2 second;
        -:  260:
        -:  261:    // pair(const pair&) = default;
        -:  262:    // pair(pair&&) = default;
        -:  263:
        -:  264:#ifndef _LIBCPP_HAS_NO_DEFAULT_FUNCTION_TEMPLATE_ARGS
        -:  265:    template <bool _Dummy = true, class = typename enable_if<
        -:  266:        __dependent_type<is_default_constructible<_T1>, _Dummy>::value &&
        -:  267:        __dependent_type<is_default_constructible<_T2>, _Dummy>::value
        -:  268:      >::type>
        -:  269:#endif
        -:  270:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR pair() : first(), second() {}
        -:  271:
        -:  272:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  273:    pair(const _T1& __x, const _T2& __y)
        -:  274:        : first(__x), second(__y) {}
        -:  275:
        -:  276:    template<class _U1, class _U2>
        -:  277:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  278:        pair(const pair<_U1, _U2>& __p
        -:  279:#ifndef _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -:  280:                 ,typename enable_if<is_convertible<const _U1&, _T1>::value &&
        -:  281:                                    is_convertible<const _U2&, _T2>::value>::type* = 0
        -:  282:#endif
        -:  283:                                      )
        -:  284:            : first(__p.first), second(__p.second) {}
        -:  285:
        -:  286:#if !defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && _LIBCPP_TRIVIAL_PAIR_COPY_CTOR
        -:  287:    _LIBCPP_INLINE_VISIBILITY
        -:  288:    pair(const pair& __p) = default;
        -:  289:#elif !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) || !_LIBCPP_TRIVIAL_PAIR_COPY_CTOR
        -:  290:    _LIBCPP_INLINE_VISIBILITY
        -:  291:    pair(const pair& __p)
        -:  292:        _NOEXCEPT_(is_nothrow_copy_constructible<first_type>::value &&
        -:  293:                   is_nothrow_copy_constructible<second_type>::value)
        -:  294:        : first(__p.first),
        -:  295:          second(__p.second)
        -:  296:    {
        -:  297:    }
        -:  298:#endif
        -:  299:
        -:  300:    _LIBCPP_INLINE_VISIBILITY
        -:  301:    pair& operator=(const pair& __p)
        -:  302:        _NOEXCEPT_(is_nothrow_copy_assignable<first_type>::value &&
        -:  303:                   is_nothrow_copy_assignable<second_type>::value)
        -:  304:    {
        -:  305:        first = __p.first;
        -:  306:        second = __p.second;
        -:  307:        return *this;
        -:  308:    }
        -:  309:
        -:  310:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  311:
        -:  312:    template <class _U1, class _U2,
        -:  313:              class = typename enable_if<is_convertible<_U1, first_type>::value &&
        -:  314:                                         is_convertible<_U2, second_type>::value>::type>
        -:  315:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  316:        pair(_U1&& __u1, _U2&& __u2)
        -:  317:            : first(_VSTD::forward<_U1>(__u1)),
        -:  318:              second(_VSTD::forward<_U2>(__u2))
        -:  319:            {}
        -:  320:
        -:  321:    template<class _U1, class _U2>
        -:  322:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  323:        pair(pair<_U1, _U2>&& __p,
        -:  324:                 typename enable_if<is_convertible<_U1, _T1>::value &&
        -:  325:                                    is_convertible<_U2, _T2>::value>::type* = 0)
        -:  326:            : first(_VSTD::forward<_U1>(__p.first)),
        -:  327:              second(_VSTD::forward<_U2>(__p.second)) {}
        -:  328:
        -:  329:#ifndef _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS
        -:  330:    _LIBCPP_INLINE_VISIBILITY
        -:  331:    pair(pair&& __p) = default;
        -:  332:#else
        -:  333:    _LIBCPP_INLINE_VISIBILITY
        -:  334:    pair(pair&& __p) _NOEXCEPT_(is_nothrow_move_constructible<first_type>::value &&
        -:  335:                                is_nothrow_move_constructible<second_type>::value)
        -:  336:        : first(_VSTD::forward<first_type>(__p.first)),
        -:  337:          second(_VSTD::forward<second_type>(__p.second))
        -:  338:    {
        -:  339:    }
        -:  340:#endif
        -:  341:
        -:  342:    _LIBCPP_INLINE_VISIBILITY
        -:  343:    pair&
        -:  344:    operator=(pair&& __p) _NOEXCEPT_(is_nothrow_move_assignable<first_type>::value &&
        -:  345:                                     is_nothrow_move_assignable<second_type>::value)
        -:  346:    {
        -:  347:        first = _VSTD::forward<first_type>(__p.first);
        -:  348:        second = _VSTD::forward<second_type>(__p.second);
        -:  349:        return *this;
        -:  350:    }
        -:  351:
        -:  352:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  353:
        -:  354:    template<class _Tuple,
        -:  355:             class = typename enable_if<__tuple_convertible<_Tuple, pair>::value>::type>
        -:  356:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  357:        pair(_Tuple&& __p)
        -:  358:            : first(_VSTD::forward<typename tuple_element<0,
        -:  359:                                  typename __make_tuple_types<_Tuple>::type>::type>(_VSTD::get<0>(__p))),
        -:  360:              second(_VSTD::forward<typename tuple_element<1,
        -:  361:                                   typename __make_tuple_types<_Tuple>::type>::type>(_VSTD::get<1>(__p)))
        -:  362:            {}
        -:  363:
        -:  364:
        -:  365:
        -:  366:    template <class... _Args1, class... _Args2>
        -:  367:        _LIBCPP_INLINE_VISIBILITY
        -:  368:        pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,
        -:  369:                                    tuple<_Args2...> __second_args)
        -:  370:            : pair(__pc, __first_args, __second_args,
        -:  371:                   typename __make_tuple_indices<sizeof...(_Args1)>::type(),
        -:  372:                   typename __make_tuple_indices<sizeof...(_Args2) >::type())
        -:  373:            {}
        -:  374:
        -:  375:    template <class _Tuple,
        -:  376:              class = typename enable_if<__tuple_assignable<_Tuple, pair>::value>::type>
        -:  377:        _LIBCPP_INLINE_VISIBILITY
        -:  378:        pair&
        -:  379:        operator=(_Tuple&& __p)
        -:  380:        {
        -:  381:            typedef typename __make_tuple_types<_Tuple>::type _TupleRef;
        -:  382:            typedef typename tuple_element<0, _TupleRef>::type _U0;
        -:  383:            typedef typename tuple_element<1, _TupleRef>::type _U1;
        -:  384:            first  = _VSTD::forward<_U0>(_VSTD::get<0>(__p));
        -:  385:            second = _VSTD::forward<_U1>(_VSTD::get<1>(__p));
        -:  386:            return *this;
        -:  387:        }
        -:  388:
        -:  389:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  390:
        -:  391:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  392:    _LIBCPP_INLINE_VISIBILITY
        -:  393:    void
        -:  394:    swap(pair& __p) _NOEXCEPT_(__is_nothrow_swappable<first_type>::value &&
        -:  395:                               __is_nothrow_swappable<second_type>::value)
        -:  396:    {
        -:  397:        _VSTD::iter_swap(&first, &__p.first);
        -:  398:        _VSTD::iter_swap(&second, &__p.second);
        -:  399:    }
        -:  400:private:
        -:  401:
        -:  402:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  403:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -:  404:        _LIBCPP_INLINE_VISIBILITY
        -:  405:        pair(piecewise_construct_t,
        -:  406:             tuple<_Args1...>& __first_args, tuple<_Args2...>& __second_args,
        -:  407:             __tuple_indices<_I1...>, __tuple_indices<_I2...>);
        -:  408:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  409:};
        -:  410:
        -:  411:template <class _T1, class _T2>
        -:  412:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  413:bool
        -:  414:operator==(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  415:{
        -:  416:    return __x.first == __y.first && __x.second == __y.second;
        -:  417:}
        -:  418:
        -:  419:template <class _T1, class _T2>
        -:  420:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  421:bool
        -:  422:operator!=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  423:{
        -:  424:    return !(__x == __y);
        -:  425:}
        -:  426:
        -:  427:template <class _T1, class _T2>
        -:  428:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  429:bool
        -:  430:operator< (const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  431:{
        -:  432:    return __x.first < __y.first || (!(__y.first < __x.first) && __x.second < __y.second);
        -:  433:}
        -:  434:
        -:  435:template <class _T1, class _T2>
        -:  436:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  437:bool
        -:  438:operator> (const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  439:{
        -:  440:    return __y < __x;
        -:  441:}
        -:  442:
        -:  443:template <class _T1, class _T2>
        -:  444:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  445:bool
        -:  446:operator>=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  447:{
        -:  448:    return !(__x < __y);
        -:  449:}
        -:  450:
        -:  451:template <class _T1, class _T2>
        -:  452:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  453:bool
        -:  454:operator<=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  455:{
        -:  456:    return !(__y < __x);
        -:  457:}
        -:  458:
        -:  459:template <class _T1, class _T2>
        -:  460:inline _LIBCPP_INLINE_VISIBILITY
        -:  461:typename enable_if
        -:  462:<
        -:  463:    __is_swappable<_T1>::value &&
        -:  464:    __is_swappable<_T2>::value,
        -:  465:    void
        -:  466:>::type
        -:  467:swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
        -:  468:                     _NOEXCEPT_((__is_nothrow_swappable<_T1>::value &&
        -:  469:                                 __is_nothrow_swappable<_T2>::value))
        -:  470:{
        -:  471:    __x.swap(__y);
        -:  472:}
        -:  473:
        -:  474:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  475:
        -:  476:template <class _Tp> class _LIBCPP_TYPE_VIS_ONLY reference_wrapper;
        -:  477:
        -:  478:template <class _Tp>
        -:  479:struct __make_pair_return_impl
        -:  480:{
        -:  481:    typedef _Tp type;
        -:  482:};
        -:  483:
        -:  484:template <class _Tp>
        -:  485:struct __make_pair_return_impl<reference_wrapper<_Tp>>
        -:  486:{
        -:  487:    typedef _Tp& type;
        -:  488:};
        -:  489:
        -:  490:template <class _Tp>
        -:  491:struct __make_pair_return
        -:  492:{
        -:  493:    typedef typename __make_pair_return_impl<typename decay<_Tp>::type>::type type;
        -:  494:};
        -:  495:
        -:  496:template <class _T1, class _T2>
        -:  497:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  498:pair<typename __make_pair_return<_T1>::type, typename __make_pair_return<_T2>::type>
        -:  499:make_pair(_T1&& __t1, _T2&& __t2)
        -:  500:{
        -:  501:    return pair<typename __make_pair_return<_T1>::type, typename __make_pair_return<_T2>::type>
        -:  502:               (_VSTD::forward<_T1>(__t1), _VSTD::forward<_T2>(__t2));
        -:  503:}
        -:  504:
        -:  505:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  506:
        -:  507:template <class _T1, class _T2>
        -:  508:inline _LIBCPP_INLINE_VISIBILITY
        -:  509:pair<_T1,_T2>
        -:  510:make_pair(_T1 __x, _T2 __y)
        -:  511:{
        -:  512:    return pair<_T1, _T2>(__x, __y);
        -:  513:}
        -:  514:
        -:  515:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  516:
        -:  517:template <class _T1, class _T2>
        -:  518:  class _LIBCPP_TYPE_VIS_ONLY tuple_size<pair<_T1, _T2> >
        -:  519:    : public integral_constant<size_t, 2> {};
        -:  520:
        -:  521:template <class _T1, class _T2>
        -:  522:class _LIBCPP_TYPE_VIS_ONLY tuple_element<0, pair<_T1, _T2> >
        -:  523:{
        -:  524:public:
        -:  525:    typedef _T1 type;
        -:  526:};
        -:  527:
        -:  528:template <class _T1, class _T2>
        -:  529:class _LIBCPP_TYPE_VIS_ONLY tuple_element<1, pair<_T1, _T2> >
        -:  530:{
        -:  531:public:
        -:  532:    typedef _T2 type;
        -:  533:};
        -:  534:
        -:  535:template <size_t _Ip> struct __get_pair;
        -:  536:
        -:  537:template <>
        -:  538:struct __get_pair<0>
        -:  539:{
        -:  540:    template <class _T1, class _T2>
        -:  541:    static
        -:  542:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  543:    _T1&
        -:  544:    get(pair<_T1, _T2>& __p) _NOEXCEPT {return __p.first;}
        -:  545:
        -:  546:    template <class _T1, class _T2>
        -:  547:    static
        -:  548:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  549:    const _T1&
        -:  550:    get(const pair<_T1, _T2>& __p) _NOEXCEPT {return __p.first;}
        -:  551:
        -:  552:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  553:
        -:  554:    template <class _T1, class _T2>
        -:  555:    static
        -:  556:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  557:    _T1&&
        -:  558:    get(pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<_T1>(__p.first);}
        -:  559:
        -:  560:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  561:};
        -:  562:
        -:  563:template <>
        -:  564:struct __get_pair<1>
        -:  565:{
        -:  566:    template <class _T1, class _T2>
        -:  567:    static
        -:  568:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  569:    _T2&
        -:  570:    get(pair<_T1, _T2>& __p) _NOEXCEPT {return __p.second;}
        -:  571:
        -:  572:    template <class _T1, class _T2>
        -:  573:    static
        -:  574:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  575:    const _T2&
        -:  576:    get(const pair<_T1, _T2>& __p) _NOEXCEPT {return __p.second;}
        -:  577:
        -:  578:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  579:
        -:  580:    template <class _T1, class _T2>
        -:  581:    static
        -:  582:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  583:    _T2&&
        -:  584:    get(pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<_T2>(__p.second);}
        -:  585:
        -:  586:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  587:};
        -:  588:
        -:  589:template <size_t _Ip, class _T1, class _T2>
        -:  590:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  591:typename tuple_element<_Ip, pair<_T1, _T2> >::type&
        -:  592:get(pair<_T1, _T2>& __p) _NOEXCEPT
        -:  593:{
        -:  594:    return __get_pair<_Ip>::get(__p);
        -:  595:}
        -:  596:
        -:  597:template <size_t _Ip, class _T1, class _T2>
        -:  598:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  599:const typename tuple_element<_Ip, pair<_T1, _T2> >::type&
        -:  600:get(const pair<_T1, _T2>& __p) _NOEXCEPT
        -:  601:{
        -:  602:    return __get_pair<_Ip>::get(__p);
        -:  603:}
        -:  604:
        -:  605:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  606:
        -:  607:template <size_t _Ip, class _T1, class _T2>
        -:  608:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  609:typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
        -:  610:get(pair<_T1, _T2>&& __p) _NOEXCEPT
        -:  611:{
        -:  612:    return __get_pair<_Ip>::get(_VSTD::move(__p));
        -:  613:}
        -:  614:
        -:  615:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -:  616:
        -:  617:#if _LIBCPP_STD_VER > 11
        -:  618:template <class _T1, class _T2>
        -:  619:inline _LIBCPP_INLINE_VISIBILITY
        -:  620:constexpr _T1 & get(pair<_T1, _T2>& __p) _NOEXCEPT
        -:  621:{
        -:  622:    return __get_pair<0>::get(__p);
        -:  623:}
        -:  624:
        -:  625:template <class _T1, class _T2>
        -:  626:inline _LIBCPP_INLINE_VISIBILITY
        -:  627:constexpr _T1 const & get(pair<_T1, _T2> const& __p) _NOEXCEPT
        -:  628:{
        -:  629:    return __get_pair<0>::get(__p);
        -:  630:}
        -:  631:
        -:  632:template <class _T1, class _T2>
        -:  633:inline _LIBCPP_INLINE_VISIBILITY
        -:  634:constexpr _T1 && get(pair<_T1, _T2>&& __p) _NOEXCEPT
        -:  635:{
        -:  636:    return __get_pair<0>::get(_VSTD::move(__p));
        -:  637:}
        -:  638:
        -:  639:template <class _T1, class _T2>
        -:  640:inline _LIBCPP_INLINE_VISIBILITY
        -:  641:constexpr _T1 & get(pair<_T2, _T1>& __p) _NOEXCEPT
        -:  642:{
        -:  643:    return __get_pair<1>::get(__p);
        -:  644:}
        -:  645:
        -:  646:template <class _T1, class _T2>
        -:  647:inline _LIBCPP_INLINE_VISIBILITY
        -:  648:constexpr _T1 const & get(pair<_T2, _T1> const& __p) _NOEXCEPT
        -:  649:{
        -:  650:    return __get_pair<1>::get(__p);
        -:  651:}
        -:  652:
        -:  653:template <class _T1, class _T2>
        -:  654:inline _LIBCPP_INLINE_VISIBILITY
        -:  655:constexpr _T1 && get(pair<_T2, _T1>&& __p) _NOEXCEPT
        -:  656:{
        -:  657:    return __get_pair<1>::get(_VSTD::move(__p));
        -:  658:}
        -:  659:
        -:  660:#endif
        -:  661:
        -:  662:#if _LIBCPP_STD_VER > 11
        -:  663:
        -:  664:template<class _Tp, _Tp... _Ip>
        -:  665:struct _LIBCPP_TYPE_VIS_ONLY integer_sequence
        -:  666:{
        -:  667:    typedef _Tp value_type;
        -:  668:    static_assert( is_integral<_Tp>::value,
        -:  669:                  "std::integer_sequence can only be instantiated with an integral type" );
        -:  670:    static
        -:  671:    _LIBCPP_INLINE_VISIBILITY
        -:  672:    constexpr
        -:  673:    size_t
        -:  674:    size() noexcept { return sizeof...(_Ip); }
        -:  675:};
        -:  676:
        -:  677:template<size_t... _Ip>
        -:  678:    using index_sequence = integer_sequence<size_t, _Ip...>;
        -:  679:
        -:  680:namespace __detail {
        -:  681:
        -:  682:template<typename _Tp, size_t ..._Extra> struct __repeat;
        -:  683:template<typename _Tp, _Tp ..._Np, size_t ..._Extra> struct __repeat<integer_sequence<_Tp, _Np...>, _Extra...> {
        -:  684:  typedef integer_sequence<_Tp,
        -:  685:                           _Np...,
        -:  686:                           sizeof...(_Np) + _Np...,
        -:  687:                           2 * sizeof...(_Np) + _Np...,
        -:  688:                           3 * sizeof...(_Np) + _Np...,
        -:  689:                           4 * sizeof...(_Np) + _Np...,
        -:  690:                           5 * sizeof...(_Np) + _Np...,
        -:  691:                           6 * sizeof...(_Np) + _Np...,
        -:  692:                           7 * sizeof...(_Np) + _Np...,
        -:  693:                           _Extra...> type;
        -:  694:};
        -:  695:
        -:  696:template<size_t _Np> struct __parity;
        -:  697:template<size_t _Np> struct __make : __parity<_Np % 8>::template __pmake<_Np> {};
        -:  698:
        -:  699:template<> struct __make<0> { typedef integer_sequence<size_t> type; };
        -:  700:template<> struct __make<1> { typedef integer_sequence<size_t, 0> type; };
        -:  701:template<> struct __make<2> { typedef integer_sequence<size_t, 0, 1> type; };
        -:  702:template<> struct __make<3> { typedef integer_sequence<size_t, 0, 1, 2> type; };
        -:  703:template<> struct __make<4> { typedef integer_sequence<size_t, 0, 1, 2, 3> type; };
        -:  704:template<> struct __make<5> { typedef integer_sequence<size_t, 0, 1, 2, 3, 4> type; };
        -:  705:template<> struct __make<6> { typedef integer_sequence<size_t, 0, 1, 2, 3, 4, 5> type; };
        -:  706:template<> struct __make<7> { typedef integer_sequence<size_t, 0, 1, 2, 3, 4, 5, 6> type; };
        -:  707:
        -:  708:template<> struct __parity<0> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type> {}; };
        -:  709:template<> struct __parity<1> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 1> {}; };
        -:  710:template<> struct __parity<2> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 2, _Np - 1> {}; };
        -:  711:template<> struct __parity<3> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 3, _Np - 2, _Np - 1> {}; };
        -:  712:template<> struct __parity<4> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 4, _Np - 3, _Np - 2, _Np - 1> {}; };
        -:  713:template<> struct __parity<5> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 5, _Np - 4, _Np - 3, _Np - 2, _Np - 1> {}; };
        -:  714:template<> struct __parity<6> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 6, _Np - 5, _Np - 4, _Np - 3, _Np - 2, _Np - 1> {}; };
        -:  715:template<> struct __parity<7> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 7, _Np - 6, _Np - 5, _Np - 4, _Np - 3, _Np - 2, _Np - 1> {}; };
        -:  716:
        -:  717:template<typename _Tp, typename _Up> struct __convert {
        -:  718:  template<typename> struct __result;
        -:  719:  template<_Tp ..._Np> struct __result<integer_sequence<_Tp, _Np...> > { typedef integer_sequence<_Up, _Np...> type; };
        -:  720:};
        -:  721:template<typename _Tp> struct __convert<_Tp, _Tp> { template<typename _Up> struct __result { typedef _Up type; }; };
        -:  722:
        -:  723:}
        -:  724:
        -:  725:template<typename _Tp, _Tp _Np> using __make_integer_sequence_unchecked =
        -:  726:  typename __detail::__convert<size_t, _Tp>::template __result<typename __detail::__make<_Np>::type>::type;
        -:  727:
        -:  728:template <class _Tp, _Tp _Ep>
        -:  729:struct __make_integer_sequence
        -:  730:{
        -:  731:    static_assert(is_integral<_Tp>::value,
        -:  732:                  "std::make_integer_sequence can only be instantiated with an integral type" );
        -:  733:    static_assert(0 <= _Ep, "std::make_integer_sequence input shall not be negative");
        -:  734:    typedef __make_integer_sequence_unchecked<_Tp, _Ep> type;
        -:  735:};
        -:  736:
        -:  737:template<class _Tp, _Tp _Np>
        -:  738:    using make_integer_sequence = typename __make_integer_sequence<_Tp, _Np>::type;
        -:  739:
        -:  740:template<size_t _Np>
        -:  741:    using make_index_sequence = make_integer_sequence<size_t, _Np>;
        -:  742:
        -:  743:template<class... _Tp>
        -:  744:    using index_sequence_for = make_index_sequence<sizeof...(_Tp)>;
        -:  745:  
        -:  746:#endif  // _LIBCPP_STD_VER > 11
        -:  747:
        -:  748:#if _LIBCPP_STD_VER > 11
        -:  749:template<class _T1, class _T2 = _T1>
        -:  750:inline _LIBCPP_INLINE_VISIBILITY
        -:  751:_T1 exchange(_T1& __obj, _T2 && __new_value)
        -:  752:{
        -:  753:    _T1 __old_value = _VSTD::move(__obj);
        -:  754:    __obj = _VSTD::forward<_T2>(__new_value);
        -:  755:    return __old_value;
        -:  756:}    
        -:  757:#endif  // _LIBCPP_STD_VER > 11
        -:  758:
        -:  759:_LIBCPP_END_NAMESPACE_STD
        -:  760:
        -:  761:#endif  // _LIBCPP_UTILITY
